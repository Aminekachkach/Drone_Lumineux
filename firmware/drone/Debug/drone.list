
drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008e68  08008e68  00018e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800928c  0800928c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800928c  0800928c  0001928c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009294  08009294  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009294  08009294  00019294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009298  08009298  00019298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800929c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001dc  08009478  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08009478  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b191  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003787  00000000  00000000  0003b39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0003eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001738  00000000  00000000  000403f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee79  00000000  00000000  00041b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e51a  00000000  00000000  000609a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c25da  00000000  00000000  0007eec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014149d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007994  00000000  00000000  001414f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e50 	.word	0x08008e50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008e50 	.word	0x08008e50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000ed0:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <MX_ADC1_Init+0xe4>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000eee:	2204      	movs	r2, #4
 8000ef0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2e:	4817      	ldr	r0, [pc, #92]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f30:	f001 f91e 	bl	8002170 <HAL_ADC_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f3a:	f000 fa66 	bl	800140a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4810      	ldr	r0, [pc, #64]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f4a:	f001 fe83 	bl	8002c54 <HAL_ADCEx_MultiModeConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f54:	f000 fa59 	bl	800140a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_ADC1_Init+0xe8>)
 8000f5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f64:	237f      	movs	r3, #127	; 0x7f
 8000f66:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_ADC1_Init+0xe0>)
 8000f76:	f001 fa4b 	bl	8002410 <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f80:	f000 fa43 	bl	800140a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200001f8 	.word	0x200001f8
 8000f90:	50040000 	.word	0x50040000
 8000f94:	2a000400 	.word	0x2a000400

08000f98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a15      	ldr	r2, [pc, #84]	; (800100c <HAL_ADC_MspInit+0x74>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d124      	bne.n	8001004 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_ADC_MspInit+0x78>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Battery_ADC_Pin;
 8000fea:	2320      	movs	r3, #32
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fee:	230b      	movs	r3, #11
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_ADC_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f002 f946 	bl	8003290 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	50040000 	.word	0x50040000
 8001010:	40021000 	.word	0x40021000

08001014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_DMA_Init+0x38>)
 800101c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <MX_DMA_Init+0x38>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6493      	str	r3, [r2, #72]	; 0x48
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_DMA_Init+0x38>)
 8001028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	200f      	movs	r0, #15
 8001038:	f001 ff8b 	bl	8002f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800103c:	200f      	movs	r0, #15
 800103e:	f001 ffa4 	bl	8002f8a <HAL_NVIC_EnableIRQ>

}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40021000 	.word	0x40021000

08001050 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a2d      	ldr	r2, [pc, #180]	; (8001120 <MX_GPIO_Init+0xd0>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a27      	ldr	r2, [pc, #156]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <MX_GPIO_Init+0xd0>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_GPIO_Init+0xd0>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <MX_GPIO_Init+0xd0>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_GPIO_Init+0xd0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2118      	movs	r1, #24
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f002 fa5d 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_NRF_Pin|CE_NRF_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	210b      	movs	r1, #11
 80010be:	4819      	ldr	r0, [pc, #100]	; (8001124 <MX_GPIO_Init+0xd4>)
 80010c0:	f002 fa58 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80010c4:	2318      	movs	r3, #24
 80010c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f002 f8d7 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CSN_NRF_Pin|CE_NRF_Pin|LD3_Pin;
 80010e2:	230b      	movs	r3, #11
 80010e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <MX_GPIO_Init+0xd4>)
 80010fa:	f002 f8c9 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_EXT_MPU_Pin|GPIO_EXT_NRF_Pin;
 80010fe:	2360      	movs	r3, #96	; 0x60
 8001100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001102:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_GPIO_Init+0xd4>)
 8001114:	f002 f8bc 	bl	8003290 <HAL_GPIO_Init>

}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000
 8001124:	48000400 	.word	0x48000400

08001128 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_I2C3_Init+0x74>)
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <MX_I2C3_Init+0x78>)
 8001130:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_I2C3_Init+0x74>)
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <MX_I2C3_Init+0x7c>)
 8001136:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_I2C3_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_I2C3_Init+0x74>)
 8001140:	2201      	movs	r2, #1
 8001142:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_I2C3_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_I2C3_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_I2C3_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_I2C3_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_I2C3_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001162:	480e      	ldr	r0, [pc, #56]	; (800119c <MX_I2C3_Init+0x74>)
 8001164:	f002 fa1e 	bl	80035a4 <HAL_I2C_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800116e:	f000 f94c 	bl	800140a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001172:	2100      	movs	r1, #0
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <MX_I2C3_Init+0x74>)
 8001176:	f002 faa4 	bl	80036c2 <HAL_I2CEx_ConfigAnalogFilter>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001180:	f000 f943 	bl	800140a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_I2C3_Init+0x74>)
 8001188:	f002 fae6 	bl	8003758 <HAL_I2CEx_ConfigDigitalFilter>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001192:	f000 f93a 	bl	800140a <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000025c 	.word	0x2000025c
 80011a0:	40005c00 	.word	0x40005c00
 80011a4:	10909cec 	.word	0x10909cec

080011a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b098      	sub	sp, #96	; 0x60
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	2234      	movs	r2, #52	; 0x34
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 f923 	bl	8006414 <memset>
  if(i2cHandle->Instance==I2C3)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a2d      	ldr	r2, [pc, #180]	; (8001288 <HAL_I2C_MspInit+0xe0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d153      	bne.n	8001280 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f9ec 	bl	80045c4 <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011f2:	f000 f90a 	bl	800140a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <HAL_I2C_MspInit+0xe4>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a24      	ldr	r2, [pc, #144]	; (800128c <HAL_I2C_MspInit+0xe4>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_I2C_MspInit+0xe4>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <HAL_I2C_MspInit+0xe4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <HAL_I2C_MspInit+0xe4>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_I2C_MspInit+0xe4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_MPU_Pin;
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122a:	2312      	movs	r3, #18
 800122c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001236:	2304      	movs	r3, #4
 8001238:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(I2C_SCL_MPU_GPIO_Port, &GPIO_InitStruct);
 800123a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001244:	f002 f824 	bl	8003290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001248:	2310      	movs	r3, #16
 800124a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124c:	2312      	movs	r3, #18
 800124e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001258:	2304      	movs	r3, #4
 800125a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001260:	4619      	mov	r1, r3
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <HAL_I2C_MspInit+0xe8>)
 8001264:	f002 f814 	bl	8003290 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_I2C_MspInit+0xe4>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_I2C_MspInit+0xe4>)
 800126e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001272:	6593      	str	r3, [r2, #88]	; 0x58
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_I2C_MspInit+0xe4>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001280:	bf00      	nop
 8001282:	3760      	adds	r7, #96	; 0x60
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40005c00 	.word	0x40005c00
 800128c:	40021000 	.word	0x40021000
 8001290:	48000400 	.word	0x48000400

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129a:	f000 fd30 	bl	8001cfe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 f865 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f7ff fed5 	bl	8001050 <MX_GPIO_Init>
  MX_DMA_Init();
 80012a6:	f7ff feb5 	bl	8001014 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012aa:	f000 fc65 	bl	8001b78 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80012ae:	f000 f8b1 	bl	8001414 <MX_SPI1_Init>
  MX_ADC1_Init();
 80012b2:	f7ff fdfb 	bl	8000eac <MX_ADC1_Init>
  MX_I2C3_Init();
 80012b6:	f7ff ff37 	bl	8001128 <MX_I2C3_Init>
  MX_TIM1_Init();
 80012ba:	f000 fa5d 	bl	8001778 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012be:	f000 fb2b 	bl	8001918 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80012c2:	2100      	movs	r1, #0
 80012c4:	4828      	ldr	r0, [pc, #160]	; (8001368 <main+0xd4>)
 80012c6:	f003 fc5f 	bl	8004b88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80012ca:	2104      	movs	r1, #4
 80012cc:	4826      	ldr	r0, [pc, #152]	; (8001368 <main+0xd4>)
 80012ce:	f003 fc5b 	bl	8004b88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 80012d2:	2108      	movs	r1, #8
 80012d4:	4824      	ldr	r0, [pc, #144]	; (8001368 <main+0xd4>)
 80012d6:	f003 fc57 	bl	8004b88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 80012da:	210c      	movs	r1, #12
 80012dc:	4822      	ldr	r0, [pc, #136]	; (8001368 <main+0xd4>)
 80012de:	f003 fc53 	bl	8004b88 <HAL_TIM_PWM_Start>

  int it = Servo_Angle_Min;
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	60bb      	str	r3, [r7, #8]
  int sign = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
  int a=0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	603b      	str	r3, [r7, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 //initialisation
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <main+0xd4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(20); // Maintien en vol pendant 2 secondes
 80012fa:	2014      	movs	r0, #20
 80012fc:	f000 fd74 	bl	8001de8 <HAL_Delay>
  while (1)
  {
    //HAL_Delay(100);
    //HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
	  for(int i=1000; i<=1075; i++){
 8001300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e015      	b.n	8001334 <main+0xa0>
	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <main+0xd4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <main+0xd4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	639a      	str	r2, [r3, #56]	; 0x38
	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, i);
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <main+0xd4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	63da      	str	r2, [r3, #60]	; 0x3c
	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, i);
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <main+0xd4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	641a      	str	r2, [r3, #64]	; 0x40

		    HAL_Delay(20); // Maintien en vol pendant 2 secondes
 8001328:	2014      	movs	r0, #20
 800132a:	f000 fd5d 	bl	8001de8 <HAL_Delay>
	  for(int i=1000; i<=1075; i++){
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3301      	adds	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f240 4233 	movw	r2, #1075	; 0x433
 800133a:	4293      	cmp	r3, r2
 800133c:	dde4      	ble.n	8001308 <main+0x74>
	  }

	  HAL_Delay(6000); // Maintien en vol pendant 2 secondes
 800133e:	f241 7070 	movw	r0, #6000	; 0x1770
 8001342:	f000 fd51 	bl	8001de8 <HAL_Delay>
//	      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
//	      HAL_Delay(20); // Attends 20 ms entre chaque étape de descente
//	    }

	    // Arrête la génération du signal PWM
	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001346:	2100      	movs	r1, #0
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <main+0xd4>)
 800134a:	f003 fcfb 	bl	8004d44 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800134e:	2104      	movs	r1, #4
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <main+0xd4>)
 8001352:	f003 fcf7 	bl	8004d44 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001356:	2108      	movs	r1, #8
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <main+0xd4>)
 800135a:	f003 fcf3 	bl	8004d44 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 800135e:	210c      	movs	r1, #12
 8001360:	4801      	ldr	r0, [pc, #4]	; (8001368 <main+0xd4>)
 8001362:	f003 fcef 	bl	8004d44 <HAL_TIM_PWM_Stop>
	  for(int i=1000; i<=1075; i++){
 8001366:	e7cb      	b.n	8001300 <main+0x6c>
 8001368:	20000318 	.word	0x20000318

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b096      	sub	sp, #88	; 0x58
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	2244      	movs	r2, #68	; 0x44
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f005 f84a 	bl	8006414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800138e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001392:	f002 fa3b 	bl	800380c <HAL_PWREx_ControlVoltageScaling>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800139c:	f000 f835 	bl	800140a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a0:	2302      	movs	r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80013aa:	2310      	movs	r3, #16
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ae:	2302      	movs	r3, #2
 80013b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b2:	2302      	movs	r3, #2
 80013b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013ba:	230a      	movs	r3, #10
 80013bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fa74 	bl	80038b8 <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013d6:	f000 f818 	bl	800140a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013de:	2303      	movs	r3, #3
 80013e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	2104      	movs	r1, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fec2 	bl	800417c <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013fe:	f000 f804 	bl	800140a <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3758      	adds	r7, #88	; 0x58
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140e:	b672      	cpsid	i
}
 8001410:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001412:	e7fe      	b.n	8001412 <Error_Handler+0x8>

08001414 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_SPI1_Init+0x74>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <MX_SPI1_Init+0x78>)
 800141c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_SPI1_Init+0x74>)
 8001420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_SPI1_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_SPI1_Init+0x74>)
 800142e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001432:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_SPI1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_SPI1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_SPI1_Init+0x74>)
 8001442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001446:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_SPI1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_SPI1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_SPI1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_SPI1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_SPI1_Init+0x74>)
 8001462:	2207      	movs	r2, #7
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_SPI1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_SPI1_Init+0x74>)
 800146e:	2208      	movs	r2, #8
 8001470:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_SPI1_Init+0x74>)
 8001474:	f003 fa2c 	bl	80048d0 <HAL_SPI_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800147e:	f7ff ffc4 	bl	800140a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200002b0 	.word	0x200002b0
 800148c:	40013000 	.word	0x40013000

08001490 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <HAL_SPI_MspInit+0x80>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d129      	bne.n	8001506 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_SPI_MspInit+0x84>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_SPI_MspInit+0x84>)
 80014b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014bc:	6613      	str	r3, [r2, #96]	; 0x60
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_SPI_MspInit+0x84>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_SPI_MspInit+0x84>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a11      	ldr	r2, [pc, #68]	; (8001514 <HAL_SPI_MspInit+0x84>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_SPI_MspInit+0x84>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_NRF_Pin|MISO_NRF_Pin|MOSI_NRF_Pin;
 80014e2:	f241 0342 	movw	r3, #4162	; 0x1042
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f4:	2305      	movs	r3, #5
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f001 fec5 	bl	8003290 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40013000 	.word	0x40013000
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_MspInit+0x44>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_MspInit+0x44>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6613      	str	r3, [r2, #96]	; 0x60
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_MspInit+0x44>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_MspInit+0x44>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_MspInit+0x44>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6593      	str	r3, [r2, #88]	; 0x58
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_MspInit+0x44>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 fbfc 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <DMA1_Channel5_IRQHandler+0x10>)
 80015ba:	f001 fdb9 	bl	8003130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200003b0 	.word	0x200003b0

080015c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return 1;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <_kill>:

int _kill(int pid, int sig)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015e2:	f004 feed 	bl	80063c0 <__errno>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2216      	movs	r2, #22
 80015ea:	601a      	str	r2, [r3, #0]
  return -1;
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_exit>:

void _exit (int status)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ffe7 	bl	80015d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800160a:	e7fe      	b.n	800160a <_exit+0x12>

0800160c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	e00a      	b.n	8001634 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800161e:	f3af 8000 	nop.w
 8001622:	4601      	mov	r1, r0
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	60ba      	str	r2, [r7, #8]
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbf0      	blt.n	800161e <_read+0x12>
  }

  return len;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b086      	sub	sp, #24
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e009      	b.n	800166c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	dbf1      	blt.n	8001658 <_write+0x12>
  }
  return len;
 8001674:	687b      	ldr	r3, [r7, #4]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_close>:

int _close(int file)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a6:	605a      	str	r2, [r3, #4]
  return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_isatty>:

int _isatty(int file)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f004 fe52 	bl	80063c0 <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000a000 	.word	0x2000a000
 8001748:	00000400 	.word	0x00000400
 800174c:	20000314 	.word	0x20000314
 8001750:	20000490 	.word	0x20000490

08001754 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b09a      	sub	sp, #104	; 0x68
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001798:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	222c      	movs	r2, #44	; 0x2c
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f004 fe2e 	bl	8006414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b8:	4b55      	ldr	r3, [pc, #340]	; (8001910 <MX_TIM1_Init+0x198>)
 80017ba:	4a56      	ldr	r2, [pc, #344]	; (8001914 <MX_TIM1_Init+0x19c>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80017be:	4b54      	ldr	r3, [pc, #336]	; (8001910 <MX_TIM1_Init+0x198>)
 80017c0:	224f      	movs	r2, #79	; 0x4f
 80017c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b52      	ldr	r3, [pc, #328]	; (8001910 <MX_TIM1_Init+0x198>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80017ca:	4b51      	ldr	r3, [pc, #324]	; (8001910 <MX_TIM1_Init+0x198>)
 80017cc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <MX_TIM1_Init+0x198>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d8:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <MX_TIM1_Init+0x198>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <MX_TIM1_Init+0x198>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017e4:	484a      	ldr	r0, [pc, #296]	; (8001910 <MX_TIM1_Init+0x198>)
 80017e6:	f003 f916 	bl	8004a16 <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017f0:	f7ff fe0b 	bl	800140a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017fe:	4619      	mov	r1, r3
 8001800:	4843      	ldr	r0, [pc, #268]	; (8001910 <MX_TIM1_Init+0x198>)
 8001802:	f003 fc3b 	bl	800507c <HAL_TIM_ConfigClockSource>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800180c:	f7ff fdfd 	bl	800140a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001810:	483f      	ldr	r0, [pc, #252]	; (8001910 <MX_TIM1_Init+0x198>)
 8001812:	f003 f957 	bl	8004ac4 <HAL_TIM_PWM_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800181c:	f7ff fdf5 	bl	800140a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800182c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001830:	4619      	mov	r1, r3
 8001832:	4837      	ldr	r0, [pc, #220]	; (8001910 <MX_TIM1_Init+0x198>)
 8001834:	f004 f88e 	bl	8005954 <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800183e:	f7ff fde4 	bl	800140a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001842:	2360      	movs	r3, #96	; 0x60
 8001844:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184a:	2300      	movs	r3, #0
 800184c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800184e:	2300      	movs	r3, #0
 8001850:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001862:	2200      	movs	r2, #0
 8001864:	4619      	mov	r1, r3
 8001866:	482a      	ldr	r0, [pc, #168]	; (8001910 <MX_TIM1_Init+0x198>)
 8001868:	f003 faf4 	bl	8004e54 <HAL_TIM_PWM_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001872:	f7ff fdca 	bl	800140a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800187a:	2204      	movs	r2, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4824      	ldr	r0, [pc, #144]	; (8001910 <MX_TIM1_Init+0x198>)
 8001880:	f003 fae8 	bl	8004e54 <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800188a:	f7ff fdbe 	bl	800140a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800188e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001892:	2208      	movs	r2, #8
 8001894:	4619      	mov	r1, r3
 8001896:	481e      	ldr	r0, [pc, #120]	; (8001910 <MX_TIM1_Init+0x198>)
 8001898:	f003 fadc 	bl	8004e54 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80018a2:	f7ff fdb2 	bl	800140a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018aa:	220c      	movs	r2, #12
 80018ac:	4619      	mov	r1, r3
 80018ae:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM1_Init+0x198>)
 80018b0:	f003 fad0 	bl	8004e54 <HAL_TIM_PWM_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80018ba:	f7ff fda6 	bl	800140a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM1_Init+0x198>)
 80018f4:	f004 f894 	bl	8005a20 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80018fe:	f7ff fd84 	bl	800140a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001902:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM1_Init+0x198>)
 8001904:	f000 f8de 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3768      	adds	r7, #104	; 0x68
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000318 	.word	0x20000318
 8001914:	40012c00 	.word	0x40012c00

08001918 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800194c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001950:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <MX_TIM2_Init+0xe8>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001972:	4823      	ldr	r0, [pc, #140]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001974:	f003 f84f 	bl	8004a16 <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800197e:	f7ff fd44 	bl	800140a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198c:	4619      	mov	r1, r3
 800198e:	481c      	ldr	r0, [pc, #112]	; (8001a00 <MX_TIM2_Init+0xe8>)
 8001990:	f003 fb74 	bl	800507c <HAL_TIM_ConfigClockSource>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800199a:	f7ff fd36 	bl	800140a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800199e:	4818      	ldr	r0, [pc, #96]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019a0:	f003 f890 	bl	8004ac4 <HAL_TIM_PWM_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019aa:	f7ff fd2e 	bl	800140a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b6:	f107 031c 	add.w	r3, r7, #28
 80019ba:	4619      	mov	r1, r3
 80019bc:	4810      	ldr	r0, [pc, #64]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019be:	f003 ffc9 	bl	8005954 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019c8:	f7ff fd1f 	bl	800140a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019cc:	2360      	movs	r3, #96	; 0x60
 80019ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	4619      	mov	r1, r3
 80019e2:	4807      	ldr	r0, [pc, #28]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019e4:	f003 fa36 	bl	8004e54 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019ee:	f7ff fd0c 	bl	800140a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <MX_TIM2_Init+0xe8>)
 80019f4:	f000 f866 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 80019f8:	bf00      	nop
 80019fa:	3738      	adds	r7, #56	; 0x38
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000364 	.word	0x20000364

08001a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <HAL_TIM_Base_MspInit+0xb0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10c      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_TIM_Base_MspInit+0xb4>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1a:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <HAL_TIM_Base_MspInit+0xb4>)
 8001a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a20:	6613      	str	r3, [r2, #96]	; 0x60
 8001a22:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <HAL_TIM_Base_MspInit+0xb4>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a2e:	e03c      	b.n	8001aaa <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a38:	d137      	bne.n	8001aaa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_TIM_Base_MspInit+0xb4>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_TIM_Base_MspInit+0xb4>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6593      	str	r3, [r2, #88]	; 0x58
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_TIM_Base_MspInit+0xb4>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_TIM_Base_MspInit+0xbc>)
 8001a56:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8001a58:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a76:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a7e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a88:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001a8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001a8e:	480b      	ldr	r0, [pc, #44]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001a90:	f001 fa96 	bl	8002fc0 <HAL_DMA_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_TIM_Base_MspInit+0x9a>
      Error_Handler();
 8001a9a:	f7ff fcb6 	bl	800140a <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <HAL_TIM_Base_MspInit+0xb8>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40012c00 	.word	0x40012c00
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	200003b0 	.word	0x200003b0
 8001ac0:	40020058 	.word	0x40020058

08001ac4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_TIM_MspPostInit+0xac>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d11e      	bne.n	8001b24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_TIM_MspPostInit+0xb0>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <HAL_TIM_MspPostInit+0xb0>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_TIM_MspPostInit+0xb0>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM_PWM1_Pin|TIM_PWM2_Pin|TIM_PWM3_Pin|TIM_PWM4_Pin;
 8001afe:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f001 fbb7 	bl	8003290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b22:	e021      	b.n	8001b68 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b2c:	d11c      	bne.n	8001b68 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_TIM_MspPostInit+0xb0>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_TIM_MspPostInit+0xb0>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <HAL_TIM_MspPostInit+0xb0>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_Neopixel_Pin;
 8001b46:	2301      	movs	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b56:	2301      	movs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b64:	f001 fb94 	bl	8003290 <HAL_GPIO_Init>
}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	; 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40012c00 	.word	0x40012c00
 8001b74:	40021000 	.word	0x40021000

08001b78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <MX_USART2_UART_Init+0x5c>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_USART2_UART_Init+0x58>)
 8001bbc:	f003 ffa8 	bl	8005b10 <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bc6:	f7ff fc20 	bl	800140a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200003f8 	.word	0x200003f8
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b096      	sub	sp, #88	; 0x58
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	2234      	movs	r2, #52	; 0x34
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 fc0b 	bl	8006414 <memset>
  if(uartHandle->Instance==USART2)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <HAL_UART_MspInit+0xcc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d148      	bne.n	8001c9a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4618      	mov	r0, r3
 8001c16:	f002 fcd5 	bl	80045c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c20:	f7ff fbf3 	bl	800140a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <HAL_UART_MspInit+0xd0>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <HAL_UART_MspInit+0xd0>)
 8001c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_UART_MspInit+0xd0>)
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_UART_MspInit+0xd0>)
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_UART_MspInit+0xd0>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c48:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_UART_MspInit+0xd0>)
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c54:	2304      	movs	r3, #4
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c64:	2307      	movs	r3, #7
 8001c66:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f001 fb0d 	bl	8003290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	f001 fafb 	bl	8003290 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3758      	adds	r7, #88	; 0x58
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40004400 	.word	0x40004400
 8001ca8:	40021000 	.word	0x40021000

08001cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb0:	f7ff fd50 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	; (8001cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <LoopForever+0xe>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	; (8001cf8 <LoopForever+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cda:	f004 fb77 	bl	80063cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cde:	f7ff fad9 	bl	8001294 <main>

08001ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce2:	e7fe      	b.n	8001ce2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001cf0:	0800929c 	.word	0x0800929c
  ldr r2, =_sbss
 8001cf4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001cf8:	20000490 	.word	0x20000490

08001cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC1_2_IRQHandler>

08001cfe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f001 f917 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 f80e 	bl	8001d30 <HAL_InitTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	e001      	b.n	8001d24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d20:	f7ff fbfa 	bl	8001518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d24:	79fb      	ldrb	r3, [r7, #7]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_InitTick+0x6c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d023      	beq.n	8001d8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d44:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_InitTick+0x70>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_InitTick+0x6c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 f923 	bl	8002fa6 <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10f      	bne.n	8001d86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d809      	bhi.n	8001d80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f001 f8ed 	bl	8002f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_InitTick+0x74>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e007      	b.n	8001d90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e004      	b.n	8001d90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
 8001d8a:	e001      	b.n	8001d90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x24>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_IncTick+0x24>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	2000047c 	.word	0x2000047c

08001dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_GetTick+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	2000047c 	.word	0x2000047c

08001de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff ffee 	bl	8001dd0 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_Delay+0x44>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffde 	bl	8001dd0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
  {
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008

08001e30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	609a      	str	r2, [r3, #8]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3360      	adds	r3, #96	; 0x60
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <LL_ADC_SetOffset+0x44>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	03fff000 	.word	0x03fff000

08001ee0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3360      	adds	r3, #96	; 0x60
 8001eee:	461a      	mov	r2, r3
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b087      	sub	sp, #28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3360      	adds	r3, #96	; 0x60
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	615a      	str	r2, [r3, #20]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3330      	adds	r3, #48	; 0x30
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	4413      	add	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	211f      	movs	r1, #31
 8001f94:	fa01 f303 	lsl.w	r3, r1, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	0e9b      	lsrs	r3, r3, #26
 8001fa0:	f003 011f 	and.w	r1, r3, #31
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3314      	adds	r3, #20
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	0e5b      	lsrs	r3, r3, #25
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	0d1b      	lsrs	r3, r3, #20
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2107      	movs	r1, #7
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	0d1b      	lsrs	r3, r3, #20
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002030:	43db      	mvns	r3, r3
 8002032:	401a      	ands	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0318 	and.w	r3, r3, #24
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <LL_ADC_SetChannelSingleDiff+0x44>)
 800203c:	40d9      	lsrs	r1, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	400b      	ands	r3, r1
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	431a      	orrs	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	0007ffff 	.word	0x0007ffff

08002060 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6093      	str	r3, [r2, #8]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002098:	d101      	bne.n	800209e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020e8:	d101      	bne.n	80020ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <LL_ADC_IsEnabled+0x18>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <LL_ADC_IsEnabled+0x1a>
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b04      	cmp	r3, #4
 8002134:	d101      	bne.n	800213a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b08      	cmp	r3, #8
 800215a:	d101      	bne.n	8002160 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e131      	b.n	80023ee <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe fefd 	bl	8000f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff67 	bl	8002084 <LL_ADC_IsDeepPowerDownEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff4d 	bl	8002060 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff82 	bl	80020d4 <LL_ADC_IsInternalRegulatorEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d115      	bne.n	8002202 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff66 	bl	80020ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021e0:	4b85      	ldr	r3, [pc, #532]	; (80023f8 <HAL_ADC_Init+0x288>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	4a85      	ldr	r2, [pc, #532]	; (80023fc <HAL_ADC_Init+0x28c>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	099b      	lsrs	r3, r3, #6
 80021ee:	3301      	adds	r3, #1
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021f4:	e002      	b.n	80021fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f9      	bne.n	80021f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff64 	bl	80020d4 <LL_ADC_IsInternalRegulatorEnabled>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10d      	bne.n	800222e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	f043 0210 	orr.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff75 	bl	8002122 <LL_ADC_REG_IsConversionOngoing>
 8002238:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 80ca 	bne.w	80023dc <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80c6 	bne.w	80023dc <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002258:	f043 0202 	orr.w	r2, r3, #2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff49 	bl	80020fc <LL_ADC_IsEnabled>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d110      	bne.n	8002292 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002270:	4863      	ldr	r0, [pc, #396]	; (8002400 <HAL_ADC_Init+0x290>)
 8002272:	f7ff ff43 	bl	80020fc <LL_ADC_IsEnabled>
 8002276:	4604      	mov	r4, r0
 8002278:	4862      	ldr	r0, [pc, #392]	; (8002404 <HAL_ADC_Init+0x294>)
 800227a:	f7ff ff3f 	bl	80020fc <LL_ADC_IsEnabled>
 800227e:	4603      	mov	r3, r0
 8002280:	4323      	orrs	r3, r4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4619      	mov	r1, r3
 800228c:	485e      	ldr	r0, [pc, #376]	; (8002408 <HAL_ADC_Init+0x298>)
 800228e:	f7ff fdcf 	bl	8001e30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7e5b      	ldrb	r3, [r3, #25]
 8002296:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800229c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022a2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022a8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d106      	bne.n	80022ce <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	3b01      	subs	r3, #1
 80022c6:	045b      	lsls	r3, r3, #17
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	4b46      	ldr	r3, [pc, #280]	; (800240c <HAL_ADC_Init+0x29c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	69b9      	ldr	r1, [r7, #24]
 80022fa:	430b      	orrs	r3, r1
 80022fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff0d 	bl	8002122 <LL_ADC_REG_IsConversionOngoing>
 8002308:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff1a 	bl	8002148 <LL_ADC_INJ_IsConversionOngoing>
 8002314:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d13d      	bne.n	8002398 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d13a      	bne.n	8002398 <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002326:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800232e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800233e:	f023 0302 	bic.w	r3, r3, #2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	430b      	orrs	r3, r1
 800234a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002352:	2b01      	cmp	r3, #1
 8002354:	d118      	bne.n	8002388 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002378:	430a      	orrs	r2, r1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	e007      	b.n	8002398 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10c      	bne.n	80023ba <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f023 010f 	bic.w	r1, r3, #15
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	1e5a      	subs	r2, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
 80023b8:	e007      	b.n	80023ca <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 020f 	bic.w	r2, r2, #15
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
 80023da:	e007      	b.n	80023ec <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	f043 0210 	orr.w	r2, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000
 80023fc:	053e2d63 	.word	0x053e2d63
 8002400:	50040000 	.word	0x50040000
 8002404:	50040100 	.word	0x50040100
 8002408:	50040300 	.word	0x50040300
 800240c:	fff0c007 	.word	0xfff0c007

08002410 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0b6      	sub	sp, #216	; 0xd8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x22>
 800242e:	2302      	movs	r3, #2
 8002430:	e3d5      	b.n	8002bde <HAL_ADC_ConfigChannel+0x7ce>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fe6f 	bl	8002122 <LL_ADC_REG_IsConversionOngoing>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 83ba 	bne.w	8002bc0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b05      	cmp	r3, #5
 8002452:	d824      	bhi.n	800249e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	3b02      	subs	r3, #2
 800245a:	2b03      	cmp	r3, #3
 800245c:	d81b      	bhi.n	8002496 <HAL_ADC_ConfigChannel+0x86>
 800245e:	a201      	add	r2, pc, #4	; (adr r2, 8002464 <HAL_ADC_ConfigChannel+0x54>)
 8002460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002464:	08002475 	.word	0x08002475
 8002468:	0800247d 	.word	0x0800247d
 800246c:	08002485 	.word	0x08002485
 8002470:	0800248d 	.word	0x0800248d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	220c      	movs	r2, #12
 8002478:	605a      	str	r2, [r3, #4]
          break;
 800247a:	e011      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2212      	movs	r2, #18
 8002480:	605a      	str	r2, [r3, #4]
          break;
 8002482:	e00d      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2218      	movs	r2, #24
 8002488:	605a      	str	r2, [r3, #4]
          break;
 800248a:	e009      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002492:	605a      	str	r2, [r3, #4]
          break;
 8002494:	e004      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2206      	movs	r2, #6
 800249a:	605a      	str	r2, [r3, #4]
          break;
 800249c:	e000      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800249e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	f7ff fd5b 	bl	8001f68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fe33 	bl	8002122 <LL_ADC_REG_IsConversionOngoing>
 80024bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fe3f 	bl	8002148 <LL_ADC_INJ_IsConversionOngoing>
 80024ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 81c1 	bne.w	800285a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 81bc 	bne.w	800285a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024ea:	d10f      	bne.n	800250c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2200      	movs	r2, #0
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7ff fd62 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fd1c 	bl	8001f42 <LL_ADC_SetSamplingTimeCommonConfig>
 800250a:	e00e      	b.n	800252a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	461a      	mov	r2, r3
 800251a:	f7ff fd51 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fd0c 	bl	8001f42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	2b04      	cmp	r3, #4
 800254a:	d00a      	beq.n	8002562 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6919      	ldr	r1, [r3, #16]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800255c:	f7ff fc9c 	bl	8001e98 <LL_ADC_SetOffset>
 8002560:	e17b      	b.n	800285a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fcb9 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_ADC_ConfigChannel+0x17e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fcae 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	e01e      	b.n	80025cc <HAL_ADC_ConfigChannel+0x1bc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fca3 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80025b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80025bc:	2320      	movs	r3, #32
 80025be:	e004      	b.n	80025ca <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80025c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x1d4>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	e018      	b.n	8002616 <HAL_ADC_ConfigChannel+0x206>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002600:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002608:	2320      	movs	r3, #32
 800260a:	e004      	b.n	8002616 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800260c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002616:	429a      	cmp	r2, r3
 8002618:	d106      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fc72 	bl	8001f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fc56 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 8002634:	4603      	mov	r3, r0
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10a      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x244>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fc4b 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 800264a:	4603      	mov	r3, r0
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	f003 021f 	and.w	r2, r3, #31
 8002652:	e01e      	b.n	8002692 <HAL_ADC_ConfigChannel+0x282>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fc40 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800267a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002682:	2320      	movs	r3, #32
 8002684:	e004      	b.n	8002690 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x29a>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0e9b      	lsrs	r3, r3, #26
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	e018      	b.n	80026dc <HAL_ADC_ConfigChannel+0x2cc>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80026be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80026c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80026ce:	2320      	movs	r3, #32
 80026d0:	e004      	b.n	80026dc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80026d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026dc:	429a      	cmp	r2, r3
 80026de:	d106      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2101      	movs	r1, #1
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fc0f 	bl	8001f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2102      	movs	r1, #2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fbf3 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <HAL_ADC_ConfigChannel+0x30a>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2102      	movs	r1, #2
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fbe8 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	0e9b      	lsrs	r3, r3, #26
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	e01e      	b.n	8002758 <HAL_ADC_ConfigChannel+0x348>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2102      	movs	r1, #2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fbdd 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002738:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800273c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002748:	2320      	movs	r3, #32
 800274a:	e004      	b.n	8002756 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800274c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x360>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	e016      	b.n	800279e <HAL_ADC_ConfigChannel+0x38e>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800277c:	fa93 f3a3 	rbit	r3, r3
 8002780:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002782:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e004      	b.n	800279e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800279e:	429a      	cmp	r2, r3
 80027a0:	d106      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fbae 	bl	8001f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2103      	movs	r1, #3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fb92 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 80027bc:	4603      	mov	r3, r0
 80027be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x3cc>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2103      	movs	r1, #3
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fb87 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 80027d2:	4603      	mov	r3, r0
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	f003 021f 	and.w	r2, r3, #31
 80027da:	e017      	b.n	800280c <HAL_ADC_ConfigChannel+0x3fc>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2103      	movs	r1, #3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fb7c 	bl	8001ee0 <LL_ADC_GetOffsetChannel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027f6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e003      	b.n	800280a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x414>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0e9b      	lsrs	r3, r3, #26
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	e011      	b.n	8002848 <HAL_ADC_ConfigChannel+0x438>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002834:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800283c:	2320      	movs	r3, #32
 800283e:	e003      	b.n	8002848 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002848:	429a      	cmp	r2, r3
 800284a:	d106      	bne.n	800285a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	2103      	movs	r1, #3
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fb59 	bl	8001f0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fc4c 	bl	80020fc <LL_ADC_IsEnabled>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 8140 	bne.w	8002aec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	461a      	mov	r2, r3
 800287a:	f7ff fbcd 	bl	8002018 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4a8f      	ldr	r2, [pc, #572]	; (8002ac0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	f040 8131 	bne.w	8002aec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10b      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x4a2>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	0e9b      	lsrs	r3, r3, #26
 80028a0:	3301      	adds	r3, #1
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2b09      	cmp	r3, #9
 80028a8:	bf94      	ite	ls
 80028aa:	2301      	movls	r3, #1
 80028ac:	2300      	movhi	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	e019      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x4d6>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80028c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80028c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e003      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80028ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2b09      	cmp	r3, #9
 80028de:	bf94      	ite	ls
 80028e0:	2301      	movls	r3, #1
 80028e2:	2300      	movhi	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d079      	beq.n	80029de <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d107      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x4f6>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	3301      	adds	r3, #1
 80028fe:	069b      	lsls	r3, r3, #26
 8002900:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002904:	e015      	b.n	8002932 <HAL_ADC_ConfigChannel+0x522>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002916:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e003      	b.n	800292a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3301      	adds	r3, #1
 800292c:	069b      	lsls	r3, r3, #26
 800292e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x542>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0e9b      	lsrs	r3, r3, #26
 8002944:	3301      	adds	r3, #1
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	e017      	b.n	8002982 <HAL_ADC_ConfigChannel+0x572>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002962:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e003      	b.n	8002976 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800296e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3301      	adds	r3, #1
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	ea42 0103 	orr.w	r1, r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x598>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	3301      	adds	r3, #1
 800299a:	f003 021f 	and.w	r2, r3, #31
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	051b      	lsls	r3, r3, #20
 80029a6:	e018      	b.n	80029da <HAL_ADC_ConfigChannel+0x5ca>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80029c0:	2320      	movs	r3, #32
 80029c2:	e003      	b.n	80029cc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f003 021f 	and.w	r2, r3, #31
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029da:	430b      	orrs	r3, r1
 80029dc:	e081      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d107      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x5ea>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	3301      	adds	r3, #1
 80029f2:	069b      	lsls	r3, r3, #26
 80029f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f8:	e015      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x616>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002a12:	2320      	movs	r3, #32
 8002a14:	e003      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	069b      	lsls	r3, r3, #26
 8002a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x636>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	e017      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x666>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	61fb      	str	r3, [r7, #28]
  return result;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002a5e:	2320      	movs	r3, #32
 8002a60:	e003      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2101      	movs	r1, #1
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	ea42 0103 	orr.w	r1, r2, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10d      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x692>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	0e9b      	lsrs	r3, r3, #26
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f003 021f 	and.w	r2, r3, #31
 8002a92:	4613      	mov	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4413      	add	r3, r2
 8002a98:	3b1e      	subs	r3, #30
 8002a9a:	051b      	lsls	r3, r3, #20
 8002a9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	e01e      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x6d0>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	613b      	str	r3, [r7, #16]
  return result;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d104      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002aba:	2320      	movs	r3, #32
 8002abc:	e006      	b.n	8002acc <HAL_ADC_ConfigChannel+0x6bc>
 8002abe:	bf00      	nop
 8002ac0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	f003 021f 	and.w	r2, r3, #31
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b1e      	subs	r3, #30
 8002ada:	051b      	lsls	r3, r3, #20
 8002adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	6892      	ldr	r2, [r2, #8]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f7ff fa6a 	bl	8001fc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b3d      	ldr	r3, [pc, #244]	; (8002be8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d06c      	beq.n	8002bd2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002af8:	483c      	ldr	r0, [pc, #240]	; (8002bec <HAL_ADC_ConfigChannel+0x7dc>)
 8002afa:	f7ff f9bf 	bl	8001e7c <LL_ADC_GetCommonPathInternalCh>
 8002afe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a3a      	ldr	r2, [pc, #232]	; (8002bf0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d127      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d121      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a35      	ldr	r2, [pc, #212]	; (8002bf4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d157      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	482f      	ldr	r0, [pc, #188]	; (8002bec <HAL_ADC_ConfigChannel+0x7dc>)
 8002b2e:	f7ff f992 	bl	8001e56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	4a30      	ldr	r2, [pc, #192]	; (8002bfc <HAL_ADC_ConfigChannel+0x7ec>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b4c:	e002      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f9      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5a:	e03a      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a27      	ldr	r2, [pc, #156]	; (8002c00 <HAL_ADC_ConfigChannel+0x7f0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d113      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x77e>
 8002b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10d      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d12a      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b84:	4619      	mov	r1, r3
 8002b86:	4819      	ldr	r0, [pc, #100]	; (8002bec <HAL_ADC_ConfigChannel+0x7dc>)
 8002b88:	f7ff f965 	bl	8001e56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b8c:	e021      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_ADC_ConfigChannel+0x7f4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d11c      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d111      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	480c      	ldr	r0, [pc, #48]	; (8002bec <HAL_ADC_ConfigChannel+0x7dc>)
 8002bba:	f7ff f94c 	bl	8001e56 <LL_ADC_SetCommonPathInternalCh>
 8002bbe:	e008      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bda:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	37d8      	adds	r7, #216	; 0xd8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	80080000 	.word	0x80080000
 8002bec:	50040300 	.word	0x50040300
 8002bf0:	c7520000 	.word	0xc7520000
 8002bf4:	50040000 	.word	0x50040000
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	053e2d63 	.word	0x053e2d63
 8002c00:	cb840000 	.word	0xcb840000
 8002c04:	80000001 	.word	0x80000001

08002c08 <LL_ADC_IsEnabled>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <LL_ADC_IsEnabled+0x18>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_ADC_IsEnabled+0x1a>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_REG_IsConversionOngoing>:
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d101      	bne.n	8002c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b09f      	sub	sp, #124	; 0x7c
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e089      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a42      	ldr	r2, [pc, #264]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d102      	bne.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c8c:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	e001      	b.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e068      	b.n	8002d86 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ffb9 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002cbc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ffb3 	bl	8002c2e <LL_ADC_REG_IsConversionOngoing>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d14a      	bne.n	8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d147      	bne.n	8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cd4:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002cd6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d027      	beq.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cf2:	035b      	lsls	r3, r3, #13
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cfc:	4824      	ldr	r0, [pc, #144]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002cfe:	f7ff ff83 	bl	8002c08 <LL_ADC_IsEnabled>
 8002d02:	4604      	mov	r4, r0
 8002d04:	4823      	ldr	r0, [pc, #140]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d06:	f7ff ff7f 	bl	8002c08 <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4323      	orrs	r3, r4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d132      	bne.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d1a:	f023 030f 	bic.w	r3, r3, #15
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	6811      	ldr	r1, [r2, #0]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	6892      	ldr	r2, [r2, #8]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d2e:	e023      	b.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d3c:	4814      	ldr	r0, [pc, #80]	; (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002d3e:	f7ff ff63 	bl	8002c08 <LL_ADC_IsEnabled>
 8002d42:	4604      	mov	r4, r0
 8002d44:	4813      	ldr	r0, [pc, #76]	; (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d46:	f7ff ff5f 	bl	8002c08 <LL_ADC_IsEnabled>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4323      	orrs	r3, r4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d112      	bne.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d5a:	f023 030f 	bic.w	r3, r3, #15
 8002d5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d60:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d62:	e009      	b.n	8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d76:	e000      	b.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d78:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	377c      	adds	r7, #124	; 0x7c
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd90      	pop	{r4, r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	50040000 	.word	0x50040000
 8002d94:	50040100 	.word	0x50040100
 8002d98:	50040300 	.word	0x50040300

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dce:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	60d3      	str	r3, [r2, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db0b      	blt.n	8002e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <__NVIC_EnableIRQ+0x38>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	fa00 f202 	lsl.w	r2, r0, r2
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	; (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	; (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	79fb      	ldrb	r3, [r7, #7]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	; 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	; 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff29 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff3e 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff8e 	bl	8002e90 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff5d 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff31 	bl	8002e00 <__NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffa2 	bl	8002ef8 <SysTick_Config>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e098      	b.n	8003104 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4b4d      	ldr	r3, [pc, #308]	; (8003110 <HAL_DMA_Init+0x150>)
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d80f      	bhi.n	8002ffe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_DMA_Init+0x154>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4a4b      	ldr	r2, [pc, #300]	; (8003118 <HAL_DMA_Init+0x158>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	009a      	lsls	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a48      	ldr	r2, [pc, #288]	; (800311c <HAL_DMA_Init+0x15c>)
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
 8002ffc:	e00e      	b.n	800301c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_DMA_Init+0x160>)
 8003006:	4413      	add	r3, r2
 8003008:	4a43      	ldr	r2, [pc, #268]	; (8003118 <HAL_DMA_Init+0x158>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	009a      	lsls	r2, r3, #2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a42      	ldr	r2, [pc, #264]	; (8003124 <HAL_DMA_Init+0x164>)
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800304c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003076:	d039      	beq.n	80030ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_DMA_Init+0x15c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d11a      	bne.n	80030b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_DMA_Init+0x168>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f003 031c 	and.w	r3, r3, #28
 800308e:	210f      	movs	r1, #15
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	4924      	ldr	r1, [pc, #144]	; (8003128 <HAL_DMA_Init+0x168>)
 8003098:	4013      	ands	r3, r2
 800309a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <HAL_DMA_Init+0x168>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f003 031c 	and.w	r3, r3, #28
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	491d      	ldr	r1, [pc, #116]	; (8003128 <HAL_DMA_Init+0x168>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
 80030b6:	e019      	b.n	80030ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030b8:	4b1c      	ldr	r3, [pc, #112]	; (800312c <HAL_DMA_Init+0x16c>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c0:	f003 031c 	and.w	r3, r3, #28
 80030c4:	210f      	movs	r1, #15
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	4917      	ldr	r1, [pc, #92]	; (800312c <HAL_DMA_Init+0x16c>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <HAL_DMA_Init+0x16c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f003 031c 	and.w	r3, r3, #28
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	4911      	ldr	r1, [pc, #68]	; (800312c <HAL_DMA_Init+0x16c>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40020407 	.word	0x40020407
 8003114:	bffdfff8 	.word	0xbffdfff8
 8003118:	cccccccd 	.word	0xcccccccd
 800311c:	40020000 	.word	0x40020000
 8003120:	bffdfbf8 	.word	0xbffdfbf8
 8003124:	40020400 	.word	0x40020400
 8003128:	400200a8 	.word	0x400200a8
 800312c:	400204a8 	.word	0x400204a8

08003130 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	f003 031c 	and.w	r3, r3, #28
 8003150:	2204      	movs	r2, #4
 8003152:	409a      	lsls	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4013      	ands	r3, r2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d026      	beq.n	80031aa <HAL_DMA_IRQHandler+0x7a>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d021      	beq.n	80031aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0204 	bic.w	r2, r2, #4
 8003182:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f003 021c 	and.w	r2, r3, #28
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	2104      	movs	r1, #4
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	2b00      	cmp	r3, #0
 800319e:	d071      	beq.n	8003284 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80031a8:	e06c      	b.n	8003284 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f003 031c 	and.w	r3, r3, #28
 80031b2:	2202      	movs	r2, #2
 80031b4:	409a      	lsls	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d02e      	beq.n	800321c <HAL_DMA_IRQHandler+0xec>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d029      	beq.n	800321c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020a 	bic.w	r2, r2, #10
 80031e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f003 021c 	and.w	r2, r3, #28
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	2102      	movs	r1, #2
 80031fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003200:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d038      	beq.n	8003284 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800321a:	e033      	b.n	8003284 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f003 031c 	and.w	r3, r3, #28
 8003224:	2208      	movs	r2, #8
 8003226:	409a      	lsls	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d02a      	beq.n	8003286 <HAL_DMA_IRQHandler+0x156>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d025      	beq.n	8003286 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 020e 	bic.w	r2, r2, #14
 8003248:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f003 021c 	and.w	r2, r3, #28
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003284:	bf00      	nop
 8003286:	bf00      	nop
}
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800329e:	e14e      	b.n	800353e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8140 	beq.w	8003538 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d005      	beq.n	80032d0 <HAL_GPIO_Init+0x40>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d130      	bne.n	8003332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003306:	2201      	movs	r2, #1
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 0201 	and.w	r2, r3, #1
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b03      	cmp	r3, #3
 800333c:	d017      	beq.n	800336e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2203      	movs	r2, #3
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d123      	bne.n	80033c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	08da      	lsrs	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3208      	adds	r2, #8
 8003382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	220f      	movs	r2, #15
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	08da      	lsrs	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3208      	adds	r2, #8
 80033bc:	6939      	ldr	r1, [r7, #16]
 80033be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2203      	movs	r2, #3
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0203 	and.w	r2, r3, #3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 809a 	beq.w	8003538 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003404:	4b55      	ldr	r3, [pc, #340]	; (800355c <HAL_GPIO_Init+0x2cc>)
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	4a54      	ldr	r2, [pc, #336]	; (800355c <HAL_GPIO_Init+0x2cc>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6613      	str	r3, [r2, #96]	; 0x60
 8003410:	4b52      	ldr	r3, [pc, #328]	; (800355c <HAL_GPIO_Init+0x2cc>)
 8003412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800341c:	4a50      	ldr	r2, [pc, #320]	; (8003560 <HAL_GPIO_Init+0x2d0>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	3302      	adds	r3, #2
 8003424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003446:	d013      	beq.n	8003470 <HAL_GPIO_Init+0x1e0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a46      	ldr	r2, [pc, #280]	; (8003564 <HAL_GPIO_Init+0x2d4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00d      	beq.n	800346c <HAL_GPIO_Init+0x1dc>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a45      	ldr	r2, [pc, #276]	; (8003568 <HAL_GPIO_Init+0x2d8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <HAL_GPIO_Init+0x1d8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a44      	ldr	r2, [pc, #272]	; (800356c <HAL_GPIO_Init+0x2dc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d101      	bne.n	8003464 <HAL_GPIO_Init+0x1d4>
 8003460:	2303      	movs	r3, #3
 8003462:	e006      	b.n	8003472 <HAL_GPIO_Init+0x1e2>
 8003464:	2307      	movs	r3, #7
 8003466:	e004      	b.n	8003472 <HAL_GPIO_Init+0x1e2>
 8003468:	2302      	movs	r3, #2
 800346a:	e002      	b.n	8003472 <HAL_GPIO_Init+0x1e2>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <HAL_GPIO_Init+0x1e2>
 8003470:	2300      	movs	r3, #0
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	f002 0203 	and.w	r2, r2, #3
 8003478:	0092      	lsls	r2, r2, #2
 800347a:	4093      	lsls	r3, r2
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003482:	4937      	ldr	r1, [pc, #220]	; (8003560 <HAL_GPIO_Init+0x2d0>)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003490:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	43db      	mvns	r3, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034b4:	4a2e      	ldr	r2, [pc, #184]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034de:	4a24      	ldr	r2, [pc, #144]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034e4:	4b22      	ldr	r3, [pc, #136]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003508:	4a19      	ldr	r2, [pc, #100]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800350e:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003532:	4a0f      	ldr	r2, [pc, #60]	; (8003570 <HAL_GPIO_Init+0x2e0>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3301      	adds	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f aea9 	bne.w	80032a0 <HAL_GPIO_Init+0x10>
  }
}
 800354e:	bf00      	nop
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40021000 	.word	0x40021000
 8003560:	40010000 	.word	0x40010000
 8003564:	48000400 	.word	0x48000400
 8003568:	48000800 	.word	0x48000800
 800356c:	48000c00 	.word	0x48000c00
 8003570:	40010400 	.word	0x40010400

08003574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
 8003580:	4613      	mov	r3, r2
 8003582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003584:	787b      	ldrb	r3, [r7, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003590:	e002      	b.n	8003598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e081      	b.n	80036ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fdec 	bl	80011a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2224      	movs	r2, #36	; 0x24
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003604:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	e006      	b.n	800362c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800362a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d104      	bne.n	800363e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800363c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800364c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003650:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003660:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69d9      	ldr	r1, [r3, #28]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d138      	bne.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e032      	b.n	800374c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2224      	movs	r2, #36	; 0x24
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003714:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6819      	ldr	r1, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b20      	cmp	r3, #32
 800376c:	d139      	bne.n	80037e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003778:	2302      	movs	r3, #2
 800377a:	e033      	b.n	80037e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <HAL_PWREx_GetVoltageRange+0x18>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40007000 	.word	0x40007000

0800380c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800381a:	d130      	bne.n	800387e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003828:	d038      	beq.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003832:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003838:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2232      	movs	r2, #50	; 0x32
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0c9b      	lsrs	r3, r3, #18
 800384c:	3301      	adds	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003850:	e002      	b.n	8003858 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b01      	subs	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d102      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f2      	bne.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003878:	d110      	bne.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e00f      	b.n	800389e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d007      	beq.n	800389c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003894:	4a05      	ldr	r2, [pc, #20]	; (80038ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000
 80038b0:	20000000 	.word	0x20000000
 80038b4:	431bde83 	.word	0x431bde83

080038b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f000 bc4f 	b.w	800416a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038cc:	4b97      	ldr	r3, [pc, #604]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d6:	4b95      	ldr	r3, [pc, #596]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0303 	and.w	r3, r3, #3
 80038de:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80e6 	beq.w	8003aba <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <HAL_RCC_OscConfig+0x4c>
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	f040 808d 	bne.w	8003a16 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	f040 8089 	bne.w	8003a16 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003904:	4b89      	ldr	r3, [pc, #548]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d006      	beq.n	800391e <HAL_RCC_OscConfig+0x66>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d102      	bne.n	800391e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	f000 bc26 	b.w	800416a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003922:	4b82      	ldr	r3, [pc, #520]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d004      	beq.n	8003938 <HAL_RCC_OscConfig+0x80>
 800392e:	4b7f      	ldr	r3, [pc, #508]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003936:	e005      	b.n	8003944 <HAL_RCC_OscConfig+0x8c>
 8003938:	4b7c      	ldr	r3, [pc, #496]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003944:	4293      	cmp	r3, r2
 8003946:	d224      	bcs.n	8003992 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fdd9 	bl	8004504 <RCC_SetFlashLatencyFromMSIRange>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f000 bc06 	b.w	800416a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800395e:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a72      	ldr	r2, [pc, #456]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003964:	f043 0308 	orr.w	r3, r3, #8
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b70      	ldr	r3, [pc, #448]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	496d      	ldr	r1, [pc, #436]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800397c:	4b6b      	ldr	r3, [pc, #428]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	4968      	ldr	r1, [pc, #416]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
 8003990:	e025      	b.n	80039de <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003992:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a65      	ldr	r2, [pc, #404]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003998:	f043 0308 	orr.w	r3, r3, #8
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	4960      	ldr	r1, [pc, #384]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b0:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	495b      	ldr	r1, [pc, #364]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fd98 	bl	8004504 <RCC_SetFlashLatencyFromMSIRange>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e3c5      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039de:	f000 fccd 	bl	800437c <HAL_RCC_GetSysClockFreq>
 80039e2:	4602      	mov	r2, r0
 80039e4:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	4950      	ldr	r1, [pc, #320]	; (8003b30 <HAL_RCC_OscConfig+0x278>)
 80039f0:	5ccb      	ldrb	r3, [r1, r3]
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	4a4e      	ldr	r2, [pc, #312]	; (8003b34 <HAL_RCC_OscConfig+0x27c>)
 80039fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039fe:	4b4e      	ldr	r3, [pc, #312]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe f994 	bl	8001d30 <HAL_InitTick>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d052      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	e3a9      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d032      	beq.n	8003a84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a1e:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a42      	ldr	r2, [pc, #264]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe f9d1 	bl	8001dd0 <HAL_GetTick>
 8003a2e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a32:	f7fe f9cd 	bl	8001dd0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e392      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a44:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a50:	4b36      	ldr	r3, [pc, #216]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a35      	ldr	r2, [pc, #212]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a56:	f043 0308 	orr.w	r3, r3, #8
 8003a5a:	6013      	str	r3, [r2, #0]
 8003a5c:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	4930      	ldr	r1, [pc, #192]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	492b      	ldr	r1, [pc, #172]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	604b      	str	r3, [r1, #4]
 8003a82:	e01a      	b.n	8003aba <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a84:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a28      	ldr	r2, [pc, #160]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a90:	f7fe f99e 	bl	8001dd0 <HAL_GetTick>
 8003a94:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a98:	f7fe f99a 	bl	8001dd0 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e35f      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1e0>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ab8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d073      	beq.n	8003bae <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x220>
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d10e      	bne.n	8003af0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d10b      	bne.n	8003af0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d063      	beq.n	8003bac <HAL_RCC_OscConfig+0x2f4>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d15f      	bne.n	8003bac <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e33c      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d106      	bne.n	8003b08 <HAL_RCC_OscConfig+0x250>
 8003afa:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e025      	b.n	8003b54 <HAL_RCC_OscConfig+0x29c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b10:	d114      	bne.n	8003b3c <HAL_RCC_OscConfig+0x284>
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a02      	ldr	r2, [pc, #8]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e013      	b.n	8003b54 <HAL_RCC_OscConfig+0x29c>
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	08008e68 	.word	0x08008e68
 8003b34:	20000000 	.word	0x20000000
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	4b8f      	ldr	r3, [pc, #572]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a8e      	ldr	r2, [pc, #568]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b8c      	ldr	r3, [pc, #560]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a8b      	ldr	r2, [pc, #556]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe f938 	bl	8001dd0 <HAL_GetTick>
 8003b60:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe f934 	bl	8001dd0 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e2f9      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b76:	4b81      	ldr	r3, [pc, #516]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x2ac>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe f924 	bl	8001dd0 <HAL_GetTick>
 8003b88:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f920 	bl	8001dd0 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e2e5      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b9e:	4b77      	ldr	r3, [pc, #476]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x2d4>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d060      	beq.n	8003c7c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_OscConfig+0x314>
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d119      	bne.n	8003bfa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d116      	bne.n	8003bfa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bcc:	4b6b      	ldr	r3, [pc, #428]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_OscConfig+0x32c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e2c2      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be4:	4b65      	ldr	r3, [pc, #404]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	4962      	ldr	r1, [pc, #392]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf8:	e040      	b.n	8003c7c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d023      	beq.n	8003c4a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c02:	4b5e      	ldr	r3, [pc, #376]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a5d      	ldr	r2, [pc, #372]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fe f8df 	bl	8001dd0 <HAL_GetTick>
 8003c12:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fe f8db 	bl	8001dd0 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e2a0      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c28:	4b54      	ldr	r3, [pc, #336]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b51      	ldr	r3, [pc, #324]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	494e      	ldr	r1, [pc, #312]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	604b      	str	r3, [r1, #4]
 8003c48:	e018      	b.n	8003c7c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4a:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fe f8bb 	bl	8001dd0 <HAL_GetTick>
 8003c5a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5e:	f7fe f8b7 	bl	8001dd0 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e27c      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c70:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8082 	beq.w	8003d8e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d05f      	beq.n	8003d52 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003c92:	4b3a      	ldr	r3, [pc, #232]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c98:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d037      	beq.n	8003d18 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e254      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01b      	beq.n	8003d02 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8003cca:	4b2c      	ldr	r3, [pc, #176]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd0:	4a2a      	ldr	r2, [pc, #168]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cda:	f7fe f879 	bl	8001dd0 <HAL_GetTick>
 8003cde:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fe f875 	bl	8001dd0 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b11      	cmp	r3, #17
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e23a      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf4:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ef      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003d02:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d08:	f023 0210 	bic.w	r2, r3, #16
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	491a      	ldr	r1, [pc, #104]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d18:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fe f852 	bl	8001dd0 <HAL_GetTick>
 8003d2c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fe f84e 	bl	8001dd0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b11      	cmp	r3, #17
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e213      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d42:	4b0e      	ldr	r3, [pc, #56]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ef      	beq.n	8003d30 <HAL_RCC_OscConfig+0x478>
 8003d50:	e01d      	b.n	8003d8e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d58:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fe f835 	bl	8001dd0 <HAL_GetTick>
 8003d66:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7fe f831 	bl	8001dd0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b11      	cmp	r3, #17
 8003d76:	d903      	bls.n	8003d80 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1f6      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
 8003d7c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d80:	4ba9      	ldr	r3, [pc, #676]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ed      	bne.n	8003d6a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80bd 	beq.w	8003f16 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003da2:	4ba1      	ldr	r3, [pc, #644]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10e      	bne.n	8003dcc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b9e      	ldr	r3, [pc, #632]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	4a9d      	ldr	r2, [pc, #628]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6593      	str	r3, [r2, #88]	; 0x58
 8003dba:	4b9b      	ldr	r3, [pc, #620]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dcc:	4b97      	ldr	r3, [pc, #604]	; (800402c <HAL_RCC_OscConfig+0x774>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d118      	bne.n	8003e0a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd8:	4b94      	ldr	r3, [pc, #592]	; (800402c <HAL_RCC_OscConfig+0x774>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a93      	ldr	r2, [pc, #588]	; (800402c <HAL_RCC_OscConfig+0x774>)
 8003dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de4:	f7fd fff4 	bl	8001dd0 <HAL_GetTick>
 8003de8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fd fff0 	bl	8001dd0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1b5      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfe:	4b8b      	ldr	r3, [pc, #556]	; (800402c <HAL_RCC_OscConfig+0x774>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d02c      	beq.n	8003e70 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003e16:	4b84      	ldr	r3, [pc, #528]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	497f      	ldr	r1, [pc, #508]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d010      	beq.n	8003e5e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e3c:	4b7a      	ldr	r3, [pc, #488]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	4a79      	ldr	r2, [pc, #484]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e44:	f043 0304 	orr.w	r3, r3, #4
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e4c:	4b76      	ldr	r3, [pc, #472]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	4a75      	ldr	r2, [pc, #468]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e5c:	e018      	b.n	8003e90 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e5e:	4b72      	ldr	r3, [pc, #456]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	4a70      	ldr	r2, [pc, #448]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e6e:	e00f      	b.n	8003e90 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e70:	4b6d      	ldr	r3, [pc, #436]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	4a6c      	ldr	r2, [pc, #432]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e80:	4b69      	ldr	r3, [pc, #420]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	4a68      	ldr	r2, [pc, #416]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003e88:	f023 0304 	bic.w	r3, r3, #4
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d016      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7fd ff9a 	bl	8001dd0 <HAL_GetTick>
 8003e9c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fd ff96 	bl	8001dd0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e159      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb6:	4b5c      	ldr	r3, [pc, #368]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ed      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x5e8>
 8003ec4:	e01d      	b.n	8003f02 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fd ff83 	bl	8001dd0 <HAL_GetTick>
 8003eca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fd ff7f 	bl	8001dd0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e142      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee4:	4b50      	ldr	r3, [pc, #320]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1ed      	bne.n	8003ece <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003ef2:	4b4d      	ldr	r3, [pc, #308]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	4a4b      	ldr	r2, [pc, #300]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003efe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4a46      	ldr	r2, [pc, #280]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d03c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01c      	beq.n	8003f64 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f2a:	4b3f      	ldr	r3, [pc, #252]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f30:	4a3d      	ldr	r2, [pc, #244]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3a:	f7fd ff49 	bl	8001dd0 <HAL_GetTick>
 8003f3e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f42:	f7fd ff45 	bl	8001dd0 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e10a      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0ef      	beq.n	8003f42 <HAL_RCC_OscConfig+0x68a>
 8003f62:	e01b      	b.n	8003f9c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f64:	4b30      	ldr	r3, [pc, #192]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fd ff2c 	bl	8001dd0 <HAL_GetTick>
 8003f78:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7c:	f7fd ff28 	bl	8001dd0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e0ed      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ef      	bne.n	8003f7c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80e1 	beq.w	8004168 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	f040 80b5 	bne.w	800411a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0203 	and.w	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d124      	bne.n	800400e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d11b      	bne.n	800400e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d113      	bne.n	800400e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d109      	bne.n	800400e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	3b01      	subs	r3, #1
 8004008:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d05f      	beq.n	80040ce <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d05a      	beq.n	80040ca <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a03      	ldr	r2, [pc, #12]	; (8004028 <HAL_RCC_OscConfig+0x770>)
 800401a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004020:	f7fd fed6 	bl	8001dd0 <HAL_GetTick>
 8004024:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004026:	e00c      	b.n	8004042 <HAL_RCC_OscConfig+0x78a>
 8004028:	40021000 	.word	0x40021000
 800402c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004030:	f7fd fece 	bl	8001dd0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e093      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800404e:	4b49      	ldr	r3, [pc, #292]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <HAL_RCC_OscConfig+0x8c0>)
 8004054:	4013      	ands	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800405e:	3a01      	subs	r2, #1
 8004060:	0112      	lsls	r2, r2, #4
 8004062:	4311      	orrs	r1, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004068:	0212      	lsls	r2, r2, #8
 800406a:	4311      	orrs	r1, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004070:	0852      	lsrs	r2, r2, #1
 8004072:	3a01      	subs	r2, #1
 8004074:	0552      	lsls	r2, r2, #21
 8004076:	4311      	orrs	r1, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800407c:	0852      	lsrs	r2, r2, #1
 800407e:	3a01      	subs	r2, #1
 8004080:	0652      	lsls	r2, r2, #25
 8004082:	430a      	orrs	r2, r1
 8004084:	493b      	ldr	r1, [pc, #236]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004086:	4313      	orrs	r3, r2
 8004088:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800408a:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a39      	ldr	r2, [pc, #228]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004094:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4a36      	ldr	r2, [pc, #216]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 800409c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040a2:	f7fd fe95 	bl	8001dd0 <HAL_GetTick>
 80040a6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fd fe91 	bl	8001dd0 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e056      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040bc:	4b2d      	ldr	r3, [pc, #180]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040c8:	e04e      	b.n	8004168 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e04d      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ce:	4b29      	ldr	r3, [pc, #164]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d146      	bne.n	8004168 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040da:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a25      	ldr	r2, [pc, #148]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 80040e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040e6:	4b23      	ldr	r3, [pc, #140]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	4a22      	ldr	r2, [pc, #136]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 80040ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040f2:	f7fd fe6d 	bl	8001dd0 <HAL_GetTick>
 80040f6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fa:	f7fd fe69 	bl	8001dd0 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e02e      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x842>
 8004118:	e026      	b.n	8004168 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d021      	beq.n	8004164 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a13      	ldr	r2, [pc, #76]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fd fe50 	bl	8001dd0 <HAL_GetTick>
 8004130:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004134:	f7fd fe4c 	bl	8001dd0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e011      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	4a07      	ldr	r2, [pc, #28]	; (8004174 <HAL_RCC_OscConfig+0x8bc>)
 8004158:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800415c:	f023 0303 	bic.w	r3, r3, #3
 8004160:	60d3      	str	r3, [r2, #12]
 8004162:	e001      	b.n	8004168 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3728      	adds	r7, #40	; 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	f99f808c 	.word	0xf99f808c

0800417c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e0e7      	b.n	8004360 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004190:	4b75      	ldr	r3, [pc, #468]	; (8004368 <HAL_RCC_ClockConfig+0x1ec>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d910      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419e:	4b72      	ldr	r3, [pc, #456]	; (8004368 <HAL_RCC_ClockConfig+0x1ec>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 0207 	bic.w	r2, r3, #7
 80041a6:	4970      	ldr	r1, [pc, #448]	; (8004368 <HAL_RCC_ClockConfig+0x1ec>)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b6e      	ldr	r3, [pc, #440]	; (8004368 <HAL_RCC_ClockConfig+0x1ec>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0cf      	b.n	8004360 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d010      	beq.n	80041ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	4b66      	ldr	r3, [pc, #408]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d8:	429a      	cmp	r2, r3
 80041da:	d908      	bls.n	80041ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b63      	ldr	r3, [pc, #396]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4960      	ldr	r1, [pc, #384]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d04c      	beq.n	8004294 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004202:	4b5a      	ldr	r3, [pc, #360]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d121      	bne.n	8004252 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0a6      	b.n	8004360 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d107      	bne.n	800422a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	4b54      	ldr	r3, [pc, #336]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d115      	bne.n	8004252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e09a      	b.n	8004360 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004232:	4b4e      	ldr	r3, [pc, #312]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e08e      	b.n	8004360 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004242:	4b4a      	ldr	r3, [pc, #296]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e086      	b.n	8004360 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004252:	4b46      	ldr	r3, [pc, #280]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 0203 	bic.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4943      	ldr	r1, [pc, #268]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	4313      	orrs	r3, r2
 8004262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004264:	f7fd fdb4 	bl	8001dd0 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426a:	e00a      	b.n	8004282 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426c:	f7fd fdb0 	bl	8001dd0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e06e      	b.n	8004360 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	4b3a      	ldr	r3, [pc, #232]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 020c 	and.w	r2, r3, #12
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	429a      	cmp	r2, r3
 8004292:	d1eb      	bne.n	800426c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d010      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d208      	bcs.n	80042c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b2e      	ldr	r3, [pc, #184]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	492b      	ldr	r1, [pc, #172]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c2:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_RCC_ClockConfig+0x1ec>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d210      	bcs.n	80042f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d0:	4b25      	ldr	r3, [pc, #148]	; (8004368 <HAL_RCC_ClockConfig+0x1ec>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f023 0207 	bic.w	r2, r3, #7
 80042d8:	4923      	ldr	r1, [pc, #140]	; (8004368 <HAL_RCC_ClockConfig+0x1ec>)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	4313      	orrs	r3, r2
 80042de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <HAL_RCC_ClockConfig+0x1ec>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e036      	b.n	8004360 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	4918      	ldr	r1, [pc, #96]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800431c:	4b13      	ldr	r3, [pc, #76]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4910      	ldr	r1, [pc, #64]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 800432c:	4313      	orrs	r3, r2
 800432e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004330:	f000 f824 	bl	800437c <HAL_RCC_GetSysClockFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <HAL_RCC_ClockConfig+0x1f0>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	490b      	ldr	r1, [pc, #44]	; (8004370 <HAL_RCC_ClockConfig+0x1f4>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
 800434c:	4a09      	ldr	r2, [pc, #36]	; (8004374 <HAL_RCC_ClockConfig+0x1f8>)
 800434e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCC_ClockConfig+0x1fc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7fd fceb 	bl	8001d30 <HAL_InitTick>
 800435a:	4603      	mov	r3, r0
 800435c:	72fb      	strb	r3, [r7, #11]

  return status;
 800435e:	7afb      	ldrb	r3, [r7, #11]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40022000 	.word	0x40022000
 800436c:	40021000 	.word	0x40021000
 8004370:	08008e68 	.word	0x08008e68
 8004374:	20000000 	.word	0x20000000
 8004378:	20000004 	.word	0x20000004

0800437c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800437c:	b480      	push	{r7}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800438a:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_RCC_GetSysClockFreq+0x108>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004394:	4b3b      	ldr	r3, [pc, #236]	; (8004484 <HAL_RCC_GetSysClockFreq+0x108>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x34>
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	d121      	bne.n	80043ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d11e      	bne.n	80043ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043b0:	4b34      	ldr	r3, [pc, #208]	; (8004484 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCC_GetSysClockFreq+0x108>)
 80043be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	e005      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043cc:	4b2d      	ldr	r3, [pc, #180]	; (8004484 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043d8:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b04      	cmp	r3, #4
 80043f2:	d102      	bne.n	80043fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043f4:	4b25      	ldr	r3, [pc, #148]	; (800448c <HAL_RCC_GetSysClockFreq+0x110>)
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e004      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004400:	4b23      	ldr	r3, [pc, #140]	; (8004490 <HAL_RCC_GetSysClockFreq+0x114>)
 8004402:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d134      	bne.n	8004474 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <HAL_RCC_GetSysClockFreq+0x108>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d003      	beq.n	8004422 <HAL_RCC_GetSysClockFreq+0xa6>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d003      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0xac>
 8004420:	e005      	b.n	800442e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004422:	4b1a      	ldr	r3, [pc, #104]	; (800448c <HAL_RCC_GetSysClockFreq+0x110>)
 8004424:	617b      	str	r3, [r7, #20]
      break;
 8004426:	e005      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_RCC_GetSysClockFreq+0x114>)
 800442a:	617b      	str	r3, [r7, #20]
      break;
 800442c:	e002      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	617b      	str	r3, [r7, #20]
      break;
 8004432:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004434:	4b13      	ldr	r3, [pc, #76]	; (8004484 <HAL_RCC_GetSysClockFreq+0x108>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	3301      	adds	r3, #1
 8004440:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <HAL_RCC_GetSysClockFreq+0x108>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	fb03 f202 	mul.w	r2, r3, r2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <HAL_RCC_GetSysClockFreq+0x108>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	0e5b      	lsrs	r3, r3, #25
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	3301      	adds	r3, #1
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004472:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004474:	69bb      	ldr	r3, [r7, #24]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3724      	adds	r7, #36	; 0x24
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000
 8004488:	08008e80 	.word	0x08008e80
 800448c:	00f42400 	.word	0x00f42400
 8004490:	007a1200 	.word	0x007a1200

08004494 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800449a:	681b      	ldr	r3, [r3, #0]
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000000 	.word	0x20000000

080044ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044b0:	f7ff fff0 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4904      	ldr	r1, [pc, #16]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	08008e78 	.word	0x08008e78

080044d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044dc:	f7ff ffda 	bl	8004494 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0adb      	lsrs	r3, r3, #11
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4904      	ldr	r1, [pc, #16]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40021000 	.word	0x40021000
 8004500:	08008e78 	.word	0x08008e78

08004504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004510:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800451c:	f7ff f968 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 8004520:	6178      	str	r0, [r7, #20]
 8004522:	e014      	b.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	4a24      	ldr	r2, [pc, #144]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452e:	6593      	str	r3, [r2, #88]	; 0x58
 8004530:	4b22      	ldr	r3, [pc, #136]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800453c:	f7ff f958 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 8004540:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004542:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004546:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004554:	d10b      	bne.n	800456e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b80      	cmp	r3, #128	; 0x80
 800455a:	d919      	bls.n	8004590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2ba0      	cmp	r3, #160	; 0xa0
 8004560:	d902      	bls.n	8004568 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004562:	2302      	movs	r3, #2
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	e013      	b.n	8004590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004568:	2301      	movs	r3, #1
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	e010      	b.n	8004590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d902      	bls.n	800457a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004574:	2303      	movs	r3, #3
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	e00a      	b.n	8004590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	d102      	bne.n	8004586 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004580:	2302      	movs	r3, #2
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	e004      	b.n	8004590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b70      	cmp	r3, #112	; 0x70
 800458a:	d101      	bne.n	8004590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800458c:	2301      	movs	r3, #1
 800458e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 0207 	bic.w	r2, r3, #7
 8004598:	4909      	ldr	r1, [pc, #36]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045a0:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d001      	beq.n	80045b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40022000 	.word	0x40022000

080045c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045cc:	2300      	movs	r3, #0
 80045ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045d0:	2300      	movs	r3, #0
 80045d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 809e 	beq.w	800471e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045e6:	4b46      	ldr	r3, [pc, #280]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00d      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fc:	4b40      	ldr	r3, [pc, #256]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	4a3f      	ldr	r2, [pc, #252]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004606:	6593      	str	r3, [r2, #88]	; 0x58
 8004608:	4b3d      	ldr	r3, [pc, #244]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800460a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004614:	2301      	movs	r3, #1
 8004616:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004618:	4b3a      	ldr	r3, [pc, #232]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a39      	ldr	r2, [pc, #228]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800461e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004622:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004624:	f7fd fbd4 	bl	8001dd0 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800462a:	e009      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462c:	f7fd fbd0 	bl	8001dd0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d902      	bls.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	74fb      	strb	r3, [r7, #19]
        break;
 800463e:	e005      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004640:	4b30      	ldr	r3, [pc, #192]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ef      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800464c:	7cfb      	ldrb	r3, [r7, #19]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d15a      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004652:	4b2b      	ldr	r3, [pc, #172]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01e      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	429a      	cmp	r2, r3
 800466c:	d019      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004678:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800467a:	4b21      	ldr	r3, [pc, #132]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004680:	4a1f      	ldr	r2, [pc, #124]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800468a:	4b1d      	ldr	r3, [pc, #116]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800469a:	4a19      	ldr	r2, [pc, #100]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d016      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fd fb90 	bl	8001dd0 <HAL_GetTick>
 80046b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b2:	e00b      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b4:	f7fd fb8c 	bl	8001dd0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d902      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	74fb      	strb	r3, [r7, #19]
            break;
 80046ca:	e006      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0ec      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	4904      	ldr	r1, [pc, #16]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046f6:	e009      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x148>
 80046fe:	bf00      	nop
 8004700:	40021000 	.word	0x40021000
 8004704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800470c:	7c7b      	ldrb	r3, [r7, #17]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d105      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004712:	4b6e      	ldr	r3, [pc, #440]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	4a6d      	ldr	r2, [pc, #436]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800471c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800472a:	4b68      	ldr	r3, [pc, #416]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f023 0203 	bic.w	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	4964      	ldr	r1, [pc, #400]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800474c:	4b5f      	ldr	r3, [pc, #380]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 020c 	bic.w	r2, r3, #12
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	495c      	ldr	r1, [pc, #368]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800476e:	4b57      	ldr	r3, [pc, #348]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4953      	ldr	r1, [pc, #332]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004790:	4b4e      	ldr	r3, [pc, #312]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	494b      	ldr	r1, [pc, #300]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b2:	4b46      	ldr	r3, [pc, #280]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	4942      	ldr	r1, [pc, #264]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047d4:	4b3d      	ldr	r3, [pc, #244]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	493a      	ldr	r1, [pc, #232]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047f6:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4931      	ldr	r1, [pc, #196]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004818:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	4929      	ldr	r1, [pc, #164]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4920      	ldr	r1, [pc, #128]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	4918      	ldr	r1, [pc, #96]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487a:	d105      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a12      	ldr	r2, [pc, #72]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004886:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d015      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004894:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	490a      	ldr	r1, [pc, #40]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80048ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000

080048d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e095      	b.n	8004a0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d108      	bne.n	80048fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f2:	d009      	beq.n	8004908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	61da      	str	r2, [r3, #28]
 80048fa:	e005      	b.n	8004908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fdb4 	bl	8001490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004948:	d902      	bls.n	8004950 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e002      	b.n	8004956 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004954:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800495e:	d007      	beq.n	8004970 <HAL_SPI_Init+0xa0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004968:	d002      	beq.n	8004970 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	ea42 0103 	orr.w	r1, r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	0c1b      	lsrs	r3, r3, #16
 80049cc:	f003 0204 	and.w	r2, r3, #4
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049ec:	ea42 0103 	orr.w	r1, r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e049      	b.n	8004abc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fc ffe1 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3304      	adds	r3, #4
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f000 fbdb 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e049      	b.n	8004b6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f841 	bl	8004b72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f000 fb84 	bl	8005210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <HAL_TIM_PWM_Start+0x24>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e03c      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d109      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0x3e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	bf14      	ite	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	2300      	moveq	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e02f      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d109      	bne.n	8004be0 <HAL_TIM_PWM_Start+0x58>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e022      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d109      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x72>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e015      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d109      	bne.n	8004c14 <HAL_TIM_PWM_Start+0x8c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e008      	b.n	8004c26 <HAL_TIM_PWM_Start+0x9e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e07e      	b.n	8004d2c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_PWM_Start+0xb6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c3c:	e023      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d104      	bne.n	8004c4e <HAL_TIM_PWM_Start+0xc6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c4c:	e01b      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d104      	bne.n	8004c5e <HAL_TIM_PWM_Start+0xd6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c5c:	e013      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b0c      	cmp	r3, #12
 8004c62:	d104      	bne.n	8004c6e <HAL_TIM_PWM_Start+0xe6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c6c:	e00b      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b10      	cmp	r3, #16
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_PWM_Start+0xf6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c7c:	e003      	b.n	8004c86 <HAL_TIM_PWM_Start+0xfe>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fe3a 	bl	8005908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <HAL_TIM_PWM_Start+0x1ac>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <HAL_TIM_PWM_Start+0x12a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a25      	ldr	r2, [pc, #148]	; (8004d38 <HAL_TIM_PWM_Start+0x1b0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_TIM_PWM_Start+0x12a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a23      	ldr	r2, [pc, #140]	; (8004d3c <HAL_TIM_PWM_Start+0x1b4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0x12e>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_PWM_Start+0x130>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_TIM_PWM_Start+0x1ac>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d009      	beq.n	8004cea <HAL_TIM_PWM_Start+0x162>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cde:	d004      	beq.n	8004cea <HAL_TIM_PWM_Start+0x162>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a14      	ldr	r2, [pc, #80]	; (8004d38 <HAL_TIM_PWM_Start+0x1b0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d115      	bne.n	8004d16 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <HAL_TIM_PWM_Start+0x1b8>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b06      	cmp	r3, #6
 8004cfa:	d015      	beq.n	8004d28 <HAL_TIM_PWM_Start+0x1a0>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d02:	d011      	beq.n	8004d28 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d14:	e008      	b.n	8004d28 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e000      	b.n	8004d2a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	00010007 	.word	0x00010007

08004d44 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fdd6 	bl	8005908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a39      	ldr	r2, [pc, #228]	; (8004e48 <HAL_TIM_PWM_Stop+0x104>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_TIM_PWM_Stop+0x36>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a38      	ldr	r2, [pc, #224]	; (8004e4c <HAL_TIM_PWM_Stop+0x108>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_TIM_PWM_Stop+0x36>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a36      	ldr	r2, [pc, #216]	; (8004e50 <HAL_TIM_PWM_Stop+0x10c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_PWM_Stop+0x3a>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <HAL_TIM_PWM_Stop+0x3c>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d017      	beq.n	8004db4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10f      	bne.n	8004db4 <HAL_TIM_PWM_Stop+0x70>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a1a      	ldr	r2, [r3, #32]
 8004d9a:	f240 4344 	movw	r3, #1092	; 0x444
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_PWM_Stop+0x70>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a1a      	ldr	r2, [r3, #32]
 8004dba:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10f      	bne.n	8004de4 <HAL_TIM_PWM_Stop+0xa0>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6a1a      	ldr	r2, [r3, #32]
 8004dca:	f240 4344 	movw	r3, #1092	; 0x444
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d107      	bne.n	8004de4 <HAL_TIM_PWM_Stop+0xa0>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0201 	bic.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <HAL_TIM_PWM_Stop+0xb0>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df2:	e023      	b.n	8004e3c <HAL_TIM_PWM_Stop+0xf8>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d104      	bne.n	8004e04 <HAL_TIM_PWM_Stop+0xc0>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e02:	e01b      	b.n	8004e3c <HAL_TIM_PWM_Stop+0xf8>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d104      	bne.n	8004e14 <HAL_TIM_PWM_Stop+0xd0>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e12:	e013      	b.n	8004e3c <HAL_TIM_PWM_Stop+0xf8>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b0c      	cmp	r3, #12
 8004e18:	d104      	bne.n	8004e24 <HAL_TIM_PWM_Stop+0xe0>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e22:	e00b      	b.n	8004e3c <HAL_TIM_PWM_Stop+0xf8>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d104      	bne.n	8004e34 <HAL_TIM_PWM_Stop+0xf0>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e32:	e003      	b.n	8004e3c <HAL_TIM_PWM_Stop+0xf8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40014000 	.word	0x40014000
 8004e50:	40014400 	.word	0x40014400

08004e54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e0ff      	b.n	8005072 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b14      	cmp	r3, #20
 8004e7e:	f200 80f0 	bhi.w	8005062 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004edd 	.word	0x08004edd
 8004e8c:	08005063 	.word	0x08005063
 8004e90:	08005063 	.word	0x08005063
 8004e94:	08005063 	.word	0x08005063
 8004e98:	08004f1d 	.word	0x08004f1d
 8004e9c:	08005063 	.word	0x08005063
 8004ea0:	08005063 	.word	0x08005063
 8004ea4:	08005063 	.word	0x08005063
 8004ea8:	08004f5f 	.word	0x08004f5f
 8004eac:	08005063 	.word	0x08005063
 8004eb0:	08005063 	.word	0x08005063
 8004eb4:	08005063 	.word	0x08005063
 8004eb8:	08004f9f 	.word	0x08004f9f
 8004ebc:	08005063 	.word	0x08005063
 8004ec0:	08005063 	.word	0x08005063
 8004ec4:	08005063 	.word	0x08005063
 8004ec8:	08004fe1 	.word	0x08004fe1
 8004ecc:	08005063 	.word	0x08005063
 8004ed0:	08005063 	.word	0x08005063
 8004ed4:	08005063 	.word	0x08005063
 8004ed8:	08005021 	.word	0x08005021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f9f8 	bl	80052d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0208 	orr.w	r2, r2, #8
 8004ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0204 	bic.w	r2, r2, #4
 8004f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6999      	ldr	r1, [r3, #24]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	619a      	str	r2, [r3, #24]
      break;
 8004f1a:	e0a5      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fa54 	bl	80053d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6999      	ldr	r1, [r3, #24]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	021a      	lsls	r2, r3, #8
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	619a      	str	r2, [r3, #24]
      break;
 8004f5c:	e084      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 faad 	bl	80054c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0208 	orr.w	r2, r2, #8
 8004f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0204 	bic.w	r2, r2, #4
 8004f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69d9      	ldr	r1, [r3, #28]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	61da      	str	r2, [r3, #28]
      break;
 8004f9c:	e064      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fb05 	bl	80055b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69d9      	ldr	r1, [r3, #28]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	021a      	lsls	r2, r3, #8
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	61da      	str	r2, [r3, #28]
      break;
 8004fde:	e043      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fb42 	bl	8005670 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0208 	orr.w	r2, r2, #8
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0204 	bic.w	r2, r2, #4
 800500a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800501e:	e023      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fb7a 	bl	8005720 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	021a      	lsls	r2, r3, #8
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005060:	e002      	b.n	8005068 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	75fb      	strb	r3, [r7, #23]
      break;
 8005066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005070:	7dfb      	ldrb	r3, [r7, #23]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop

0800507c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_TIM_ConfigClockSource+0x1c>
 8005094:	2302      	movs	r3, #2
 8005096:	e0b6      	b.n	8005206 <HAL_TIM_ConfigClockSource+0x18a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d4:	d03e      	beq.n	8005154 <HAL_TIM_ConfigClockSource+0xd8>
 80050d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050da:	f200 8087 	bhi.w	80051ec <HAL_TIM_ConfigClockSource+0x170>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e2:	f000 8086 	beq.w	80051f2 <HAL_TIM_ConfigClockSource+0x176>
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ea:	d87f      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x170>
 80050ec:	2b70      	cmp	r3, #112	; 0x70
 80050ee:	d01a      	beq.n	8005126 <HAL_TIM_ConfigClockSource+0xaa>
 80050f0:	2b70      	cmp	r3, #112	; 0x70
 80050f2:	d87b      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x170>
 80050f4:	2b60      	cmp	r3, #96	; 0x60
 80050f6:	d050      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x11e>
 80050f8:	2b60      	cmp	r3, #96	; 0x60
 80050fa:	d877      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x170>
 80050fc:	2b50      	cmp	r3, #80	; 0x50
 80050fe:	d03c      	beq.n	800517a <HAL_TIM_ConfigClockSource+0xfe>
 8005100:	2b50      	cmp	r3, #80	; 0x50
 8005102:	d873      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x170>
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d058      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x13e>
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	d86f      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x170>
 800510c:	2b30      	cmp	r3, #48	; 0x30
 800510e:	d064      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15e>
 8005110:	2b30      	cmp	r3, #48	; 0x30
 8005112:	d86b      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x170>
 8005114:	2b20      	cmp	r3, #32
 8005116:	d060      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15e>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d867      	bhi.n	80051ec <HAL_TIM_ConfigClockSource+0x170>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d05c      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15e>
 8005120:	2b10      	cmp	r3, #16
 8005122:	d05a      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x15e>
 8005124:	e062      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6899      	ldr	r1, [r3, #8]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f000 fbc7 	bl	80058c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	609a      	str	r2, [r3, #8]
      break;
 8005152:	e04f      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	6899      	ldr	r1, [r3, #8]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f000 fbb0 	bl	80058c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005176:	609a      	str	r2, [r3, #8]
      break;
 8005178:	e03c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	f000 fb24 	bl	80057d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2150      	movs	r1, #80	; 0x50
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fb7d 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 8005198:	e02c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fb43 	bl	8005832 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2160      	movs	r1, #96	; 0x60
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fb6d 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 80051b8:	e01c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 fb04 	bl	80057d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2140      	movs	r1, #64	; 0x40
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb5d 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 80051d8:	e00c      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f000 fb54 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 80051ea:	e003      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      break;
 80051f0:	e000      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80051f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a2a      	ldr	r2, [pc, #168]	; (80052cc <TIM_Base_SetConfig+0xbc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0x20>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d108      	bne.n	8005242 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a21      	ldr	r2, [pc, #132]	; (80052cc <TIM_Base_SetConfig+0xbc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00b      	beq.n	8005262 <TIM_Base_SetConfig+0x52>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d007      	beq.n	8005262 <TIM_Base_SetConfig+0x52>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <TIM_Base_SetConfig+0xc0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_Base_SetConfig+0x52>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <TIM_Base_SetConfig+0xc4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d108      	bne.n	8005274 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a0c      	ldr	r2, [pc, #48]	; (80052cc <TIM_Base_SetConfig+0xbc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0xa0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a0b      	ldr	r2, [pc, #44]	; (80052d0 <TIM_Base_SetConfig+0xc0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0xa0>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <TIM_Base_SetConfig+0xc4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40014000 	.word	0x40014000
 80052d4:	40014400 	.word	0x40014400

080052d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0201 	bic.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0303 	bic.w	r3, r3, #3
 8005312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f023 0302 	bic.w	r3, r3, #2
 8005324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a24      	ldr	r2, [pc, #144]	; (80053c4 <TIM_OC1_SetConfig+0xec>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_OC1_SetConfig+0x70>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a23      	ldr	r2, [pc, #140]	; (80053c8 <TIM_OC1_SetConfig+0xf0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_OC1_SetConfig+0x70>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a22      	ldr	r2, [pc, #136]	; (80053cc <TIM_OC1_SetConfig+0xf4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10c      	bne.n	8005362 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0308 	bic.w	r3, r3, #8
 800534e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 0304 	bic.w	r3, r3, #4
 8005360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a17      	ldr	r2, [pc, #92]	; (80053c4 <TIM_OC1_SetConfig+0xec>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d007      	beq.n	800537a <TIM_OC1_SetConfig+0xa2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <TIM_OC1_SetConfig+0xf0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d003      	beq.n	800537a <TIM_OC1_SetConfig+0xa2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a15      	ldr	r2, [pc, #84]	; (80053cc <TIM_OC1_SetConfig+0xf4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d111      	bne.n	800539e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	621a      	str	r2, [r3, #32]
}
 80053b8:	bf00      	nop
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40014400 	.word	0x40014400

080053d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f023 0210 	bic.w	r2, r3, #16
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f023 0320 	bic.w	r3, r3, #32
 800541e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a22      	ldr	r2, [pc, #136]	; (80054b8 <TIM_OC2_SetConfig+0xe8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d10d      	bne.n	8005450 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800543a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800544e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <TIM_OC2_SetConfig+0xe8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_OC2_SetConfig+0x98>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a18      	ldr	r2, [pc, #96]	; (80054bc <TIM_OC2_SetConfig+0xec>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC2_SetConfig+0x98>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <TIM_OC2_SetConfig+0xf0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d113      	bne.n	8005490 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800546e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40012c00 	.word	0x40012c00
 80054bc:	40014000 	.word	0x40014000
 80054c0:	40014400 	.word	0x40014400

080054c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0303 	bic.w	r3, r3, #3
 80054fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a21      	ldr	r2, [pc, #132]	; (80055a8 <TIM_OC3_SetConfig+0xe4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d10d      	bne.n	8005542 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800552c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <TIM_OC3_SetConfig+0xe4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d007      	beq.n	800555a <TIM_OC3_SetConfig+0x96>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a17      	ldr	r2, [pc, #92]	; (80055ac <TIM_OC3_SetConfig+0xe8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d003      	beq.n	800555a <TIM_OC3_SetConfig+0x96>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <TIM_OC3_SetConfig+0xec>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d113      	bne.n	8005582 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	621a      	str	r2, [r3, #32]
}
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	40012c00 	.word	0x40012c00
 80055ac:	40014000 	.word	0x40014000
 80055b0:	40014400 	.word	0x40014400

080055b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	031b      	lsls	r3, r3, #12
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a14      	ldr	r2, [pc, #80]	; (8005664 <TIM_OC4_SetConfig+0xb0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <TIM_OC4_SetConfig+0x74>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a13      	ldr	r2, [pc, #76]	; (8005668 <TIM_OC4_SetConfig+0xb4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_OC4_SetConfig+0x74>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a12      	ldr	r2, [pc, #72]	; (800566c <TIM_OC4_SetConfig+0xb8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d109      	bne.n	800563c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800562e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	019b      	lsls	r3, r3, #6
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40012c00 	.word	0x40012c00
 8005668:	40014000 	.word	0x40014000
 800566c:	40014400 	.word	0x40014400

08005670 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a13      	ldr	r2, [pc, #76]	; (8005714 <TIM_OC5_SetConfig+0xa4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_OC5_SetConfig+0x6a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a12      	ldr	r2, [pc, #72]	; (8005718 <TIM_OC5_SetConfig+0xa8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_OC5_SetConfig+0x6a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a11      	ldr	r2, [pc, #68]	; (800571c <TIM_OC5_SetConfig+0xac>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d109      	bne.n	80056ee <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	621a      	str	r2, [r3, #32]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400

08005720 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	051b      	lsls	r3, r3, #20
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a14      	ldr	r2, [pc, #80]	; (80057c8 <TIM_OC6_SetConfig+0xa8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d007      	beq.n	800578c <TIM_OC6_SetConfig+0x6c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <TIM_OC6_SetConfig+0xac>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC6_SetConfig+0x6c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a12      	ldr	r2, [pc, #72]	; (80057d0 <TIM_OC6_SetConfig+0xb0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d109      	bne.n	80057a0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005792:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	029b      	lsls	r3, r3, #10
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	621a      	str	r2, [r3, #32]
}
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40014400 	.word	0x40014400

080057d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 030a 	bic.w	r3, r3, #10
 8005810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005832:	b480      	push	{r7}
 8005834:	b087      	sub	sp, #28
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0210 	bic.w	r2, r3, #16
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800585c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	031b      	lsls	r3, r3, #12
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800586e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f043 0307 	orr.w	r3, r3, #7
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	609a      	str	r2, [r3, #8]
}
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	021a      	lsls	r2, r3, #8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2201      	movs	r2, #1
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	43db      	mvns	r3, r3
 800592a:	401a      	ands	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1a      	ldr	r2, [r3, #32]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 031f 	and.w	r3, r3, #31
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	fa01 f303 	lsl.w	r3, r1, r3
 8005940:	431a      	orrs	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	621a      	str	r2, [r3, #32]
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005968:	2302      	movs	r3, #2
 800596a:	e04f      	b.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d108      	bne.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800599c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d009      	beq.n	80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d4:	d004      	beq.n	80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a10      	ldr	r2, [pc, #64]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10c      	bne.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3714      	adds	r7, #20
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40014000 	.word	0x40014000

08005a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e060      	b.n	8005afe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d115      	bne.n	8005aec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	051b      	lsls	r3, r3, #20
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40012c00 	.word	0x40012c00

08005b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e040      	b.n	8005ba4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fc f850 	bl	8001bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2224      	movs	r2, #36	; 0x24
 8005b3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f82c 	bl	8005bac <UART_SetConfig>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e022      	b.n	8005ba4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa7a 	bl	8006060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fb01 	bl	80061a4 <UART_CheckIdleState>
 8005ba2:	4603      	mov	r3, r0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb0:	b08a      	sub	sp, #40	; 0x28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b9e      	ldr	r3, [pc, #632]	; (8005e54 <UART_SetConfig+0x2a8>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a93      	ldr	r2, [pc, #588]	; (8005e58 <UART_SetConfig+0x2ac>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c14:	4313      	orrs	r3, r2
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a8a      	ldr	r2, [pc, #552]	; (8005e5c <UART_SetConfig+0x2b0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d126      	bne.n	8005c84 <UART_SetConfig+0xd8>
 8005c36:	4b8a      	ldr	r3, [pc, #552]	; (8005e60 <UART_SetConfig+0x2b4>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	f003 0303 	and.w	r3, r3, #3
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d81b      	bhi.n	8005c7c <UART_SetConfig+0xd0>
 8005c44:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <UART_SetConfig+0xa0>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c5d 	.word	0x08005c5d
 8005c50:	08005c6d 	.word	0x08005c6d
 8005c54:	08005c65 	.word	0x08005c65
 8005c58:	08005c75 	.word	0x08005c75
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c62:	e0ab      	b.n	8005dbc <UART_SetConfig+0x210>
 8005c64:	2302      	movs	r3, #2
 8005c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c6a:	e0a7      	b.n	8005dbc <UART_SetConfig+0x210>
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c72:	e0a3      	b.n	8005dbc <UART_SetConfig+0x210>
 8005c74:	2308      	movs	r3, #8
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7a:	e09f      	b.n	8005dbc <UART_SetConfig+0x210>
 8005c7c:	2310      	movs	r3, #16
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c82:	e09b      	b.n	8005dbc <UART_SetConfig+0x210>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a76      	ldr	r2, [pc, #472]	; (8005e64 <UART_SetConfig+0x2b8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d138      	bne.n	8005d00 <UART_SetConfig+0x154>
 8005c8e:	4b74      	ldr	r3, [pc, #464]	; (8005e60 <UART_SetConfig+0x2b4>)
 8005c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c94:	f003 030c 	and.w	r3, r3, #12
 8005c98:	2b0c      	cmp	r3, #12
 8005c9a:	d82d      	bhi.n	8005cf8 <UART_SetConfig+0x14c>
 8005c9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <UART_SetConfig+0xf8>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005cd9 	.word	0x08005cd9
 8005ca8:	08005cf9 	.word	0x08005cf9
 8005cac:	08005cf9 	.word	0x08005cf9
 8005cb0:	08005cf9 	.word	0x08005cf9
 8005cb4:	08005ce9 	.word	0x08005ce9
 8005cb8:	08005cf9 	.word	0x08005cf9
 8005cbc:	08005cf9 	.word	0x08005cf9
 8005cc0:	08005cf9 	.word	0x08005cf9
 8005cc4:	08005ce1 	.word	0x08005ce1
 8005cc8:	08005cf9 	.word	0x08005cf9
 8005ccc:	08005cf9 	.word	0x08005cf9
 8005cd0:	08005cf9 	.word	0x08005cf9
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cde:	e06d      	b.n	8005dbc <UART_SetConfig+0x210>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ce6:	e069      	b.n	8005dbc <UART_SetConfig+0x210>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cee:	e065      	b.n	8005dbc <UART_SetConfig+0x210>
 8005cf0:	2308      	movs	r3, #8
 8005cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cf6:	e061      	b.n	8005dbc <UART_SetConfig+0x210>
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cfe:	e05d      	b.n	8005dbc <UART_SetConfig+0x210>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a58      	ldr	r2, [pc, #352]	; (8005e68 <UART_SetConfig+0x2bc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d125      	bne.n	8005d56 <UART_SetConfig+0x1aa>
 8005d0a:	4b55      	ldr	r3, [pc, #340]	; (8005e60 <UART_SetConfig+0x2b4>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d14:	2b30      	cmp	r3, #48	; 0x30
 8005d16:	d016      	beq.n	8005d46 <UART_SetConfig+0x19a>
 8005d18:	2b30      	cmp	r3, #48	; 0x30
 8005d1a:	d818      	bhi.n	8005d4e <UART_SetConfig+0x1a2>
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d00a      	beq.n	8005d36 <UART_SetConfig+0x18a>
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d814      	bhi.n	8005d4e <UART_SetConfig+0x1a2>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <UART_SetConfig+0x182>
 8005d28:	2b10      	cmp	r3, #16
 8005d2a:	d008      	beq.n	8005d3e <UART_SetConfig+0x192>
 8005d2c:	e00f      	b.n	8005d4e <UART_SetConfig+0x1a2>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d34:	e042      	b.n	8005dbc <UART_SetConfig+0x210>
 8005d36:	2302      	movs	r3, #2
 8005d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3c:	e03e      	b.n	8005dbc <UART_SetConfig+0x210>
 8005d3e:	2304      	movs	r3, #4
 8005d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d44:	e03a      	b.n	8005dbc <UART_SetConfig+0x210>
 8005d46:	2308      	movs	r3, #8
 8005d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d4c:	e036      	b.n	8005dbc <UART_SetConfig+0x210>
 8005d4e:	2310      	movs	r3, #16
 8005d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d54:	e032      	b.n	8005dbc <UART_SetConfig+0x210>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a3f      	ldr	r2, [pc, #252]	; (8005e58 <UART_SetConfig+0x2ac>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d12a      	bne.n	8005db6 <UART_SetConfig+0x20a>
 8005d60:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <UART_SetConfig+0x2b4>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d6e:	d01a      	beq.n	8005da6 <UART_SetConfig+0x1fa>
 8005d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d74:	d81b      	bhi.n	8005dae <UART_SetConfig+0x202>
 8005d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7a:	d00c      	beq.n	8005d96 <UART_SetConfig+0x1ea>
 8005d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d80:	d815      	bhi.n	8005dae <UART_SetConfig+0x202>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <UART_SetConfig+0x1e2>
 8005d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8a:	d008      	beq.n	8005d9e <UART_SetConfig+0x1f2>
 8005d8c:	e00f      	b.n	8005dae <UART_SetConfig+0x202>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d94:	e012      	b.n	8005dbc <UART_SetConfig+0x210>
 8005d96:	2302      	movs	r3, #2
 8005d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9c:	e00e      	b.n	8005dbc <UART_SetConfig+0x210>
 8005d9e:	2304      	movs	r3, #4
 8005da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da4:	e00a      	b.n	8005dbc <UART_SetConfig+0x210>
 8005da6:	2308      	movs	r3, #8
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dac:	e006      	b.n	8005dbc <UART_SetConfig+0x210>
 8005dae:	2310      	movs	r3, #16
 8005db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005db4:	e002      	b.n	8005dbc <UART_SetConfig+0x210>
 8005db6:	2310      	movs	r3, #16
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a25      	ldr	r2, [pc, #148]	; (8005e58 <UART_SetConfig+0x2ac>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	f040 808a 	bne.w	8005edc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d824      	bhi.n	8005e1a <UART_SetConfig+0x26e>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <UART_SetConfig+0x22c>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005dfd 	.word	0x08005dfd
 8005ddc:	08005e1b 	.word	0x08005e1b
 8005de0:	08005e05 	.word	0x08005e05
 8005de4:	08005e1b 	.word	0x08005e1b
 8005de8:	08005e0b 	.word	0x08005e0b
 8005dec:	08005e1b 	.word	0x08005e1b
 8005df0:	08005e1b 	.word	0x08005e1b
 8005df4:	08005e1b 	.word	0x08005e1b
 8005df8:	08005e13 	.word	0x08005e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dfc:	f7fe fb56 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8005e00:	61f8      	str	r0, [r7, #28]
        break;
 8005e02:	e010      	b.n	8005e26 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e04:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <UART_SetConfig+0x2c0>)
 8005e06:	61fb      	str	r3, [r7, #28]
        break;
 8005e08:	e00d      	b.n	8005e26 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e0a:	f7fe fab7 	bl	800437c <HAL_RCC_GetSysClockFreq>
 8005e0e:	61f8      	str	r0, [r7, #28]
        break;
 8005e10:	e009      	b.n	8005e26 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e16:	61fb      	str	r3, [r7, #28]
        break;
 8005e18:	e005      	b.n	8005e26 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8109 	beq.w	8006040 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4413      	add	r3, r2
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d305      	bcc.n	8005e4a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d912      	bls.n	8005e70 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e50:	e0f6      	b.n	8006040 <UART_SetConfig+0x494>
 8005e52:	bf00      	nop
 8005e54:	efff69f3 	.word	0xefff69f3
 8005e58:	40008000 	.word	0x40008000
 8005e5c:	40013800 	.word	0x40013800
 8005e60:	40021000 	.word	0x40021000
 8005e64:	40004400 	.word	0x40004400
 8005e68:	40004800 	.word	0x40004800
 8005e6c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	2200      	movs	r2, #0
 8005e74:	461c      	mov	r4, r3
 8005e76:	4615      	mov	r5, r2
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	022b      	lsls	r3, r5, #8
 8005e82:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e86:	0222      	lsls	r2, r4, #8
 8005e88:	68f9      	ldr	r1, [r7, #12]
 8005e8a:	6849      	ldr	r1, [r1, #4]
 8005e8c:	0849      	lsrs	r1, r1, #1
 8005e8e:	2000      	movs	r0, #0
 8005e90:	4688      	mov	r8, r1
 8005e92:	4681      	mov	r9, r0
 8005e94:	eb12 0a08 	adds.w	sl, r2, r8
 8005e98:	eb43 0b09 	adc.w	fp, r3, r9
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eaa:	4650      	mov	r0, sl
 8005eac:	4659      	mov	r1, fp
 8005eae:	f7fa fe7b 	bl	8000ba8 <__aeabi_uldivmod>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ec0:	d308      	bcc.n	8005ed4 <UART_SetConfig+0x328>
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec8:	d204      	bcs.n	8005ed4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	60da      	str	r2, [r3, #12]
 8005ed2:	e0b5      	b.n	8006040 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005eda:	e0b1      	b.n	8006040 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee4:	d15d      	bne.n	8005fa2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d827      	bhi.n	8005f3e <UART_SetConfig+0x392>
 8005eee:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <UART_SetConfig+0x348>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f2f 	.word	0x08005f2f
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f3f 	.word	0x08005f3f
 8005f10:	08005f3f 	.word	0x08005f3f
 8005f14:	08005f37 	.word	0x08005f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fe fac8 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e014      	b.n	8005f4a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7fe fada 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8005f24:	61f8      	str	r0, [r7, #28]
        break;
 8005f26:	e010      	b.n	8005f4a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b4c      	ldr	r3, [pc, #304]	; (800605c <UART_SetConfig+0x4b0>)
 8005f2a:	61fb      	str	r3, [r7, #28]
        break;
 8005f2c:	e00d      	b.n	8005f4a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fe fa25 	bl	800437c <HAL_RCC_GetSysClockFreq>
 8005f32:	61f8      	str	r0, [r7, #28]
        break;
 8005f34:	e009      	b.n	8005f4a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3a:	61fb      	str	r3, [r7, #28]
        break;
 8005f3c:	e005      	b.n	8005f4a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d077      	beq.n	8006040 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	005a      	lsls	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b0f      	cmp	r3, #15
 8005f6a:	d916      	bls.n	8005f9a <UART_SetConfig+0x3ee>
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f72:	d212      	bcs.n	8005f9a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f023 030f 	bic.w	r3, r3, #15
 8005f7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	8afb      	ldrh	r3, [r7, #22]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	8afa      	ldrh	r2, [r7, #22]
 8005f96:	60da      	str	r2, [r3, #12]
 8005f98:	e052      	b.n	8006040 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fa0:	e04e      	b.n	8006040 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d827      	bhi.n	8005ffa <UART_SetConfig+0x44e>
 8005faa:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <UART_SetConfig+0x404>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fdd 	.word	0x08005fdd
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	08005ffb 	.word	0x08005ffb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005ffb 	.word	0x08005ffb
 8005fc8:	08005ffb 	.word	0x08005ffb
 8005fcc:	08005ffb 	.word	0x08005ffb
 8005fd0:	08005ff3 	.word	0x08005ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe fa6a 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e014      	b.n	8006006 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7fe fa7c 	bl	80044d8 <HAL_RCC_GetPCLK2Freq>
 8005fe0:	61f8      	str	r0, [r7, #28]
        break;
 8005fe2:	e010      	b.n	8006006 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <UART_SetConfig+0x4b0>)
 8005fe6:	61fb      	str	r3, [r7, #28]
        break;
 8005fe8:	e00d      	b.n	8006006 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fea:	f7fe f9c7 	bl	800437c <HAL_RCC_GetSysClockFreq>
 8005fee:	61f8      	str	r0, [r7, #28]
        break;
 8005ff0:	e009      	b.n	8006006 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ff6:	61fb      	str	r3, [r7, #28]
        break;
 8005ff8:	e005      	b.n	8006006 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006004:	bf00      	nop
    }

    if (pclk != 0U)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d019      	beq.n	8006040 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	085a      	lsrs	r2, r3, #1
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	441a      	add	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	d909      	bls.n	800603a <UART_SetConfig+0x48e>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602c:	d205      	bcs.n	800603a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60da      	str	r2, [r3, #12]
 8006038:	e002      	b.n	8006040 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800604c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	; 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605a:	bf00      	nop
 800605c:	00f42400 	.word	0x00f42400

08006060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00a      	beq.n	8006112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01a      	beq.n	8006176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800615e:	d10a      	bne.n	8006176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	605a      	str	r2, [r3, #4]
  }
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b4:	f7fb fe0c 	bl	8001dd0 <HAL_GetTick>
 80061b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d10e      	bne.n	80061e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f82d 	bl	8006236 <UART_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e023      	b.n	800622e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d10e      	bne.n	8006212 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f817 	bl	8006236 <UART_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e00d      	b.n	800622e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b09c      	sub	sp, #112	; 0x70
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006246:	e0a5      	b.n	8006394 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624e:	f000 80a1 	beq.w	8006394 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006252:	f7fb fdbd 	bl	8001dd0 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800625e:	429a      	cmp	r2, r3
 8006260:	d302      	bcc.n	8006268 <UART_WaitOnFlagUntilTimeout+0x32>
 8006262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006264:	2b00      	cmp	r3, #0
 8006266:	d13e      	bne.n	80062e6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800627c:	667b      	str	r3, [r7, #100]	; 0x64
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006288:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800628c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e6      	bne.n	8006268 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3308      	adds	r3, #8
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	663b      	str	r3, [r7, #96]	; 0x60
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80062bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e5      	bne.n	800629a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e067      	b.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d04f      	beq.n	8006394 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006302:	d147      	bne.n	8006394 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800630c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
 800632e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e6      	bne.n	800630e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	613b      	str	r3, [r7, #16]
   return(result);
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	66bb      	str	r3, [r7, #104]	; 0x68
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3308      	adds	r3, #8
 800635e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006360:	623a      	str	r2, [r7, #32]
 8006362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	69f9      	ldr	r1, [r7, #28]
 8006366:	6a3a      	ldr	r2, [r7, #32]
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	61bb      	str	r3, [r7, #24]
   return(result);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e5      	bne.n	8006340 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e010      	b.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69da      	ldr	r2, [r3, #28]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4013      	ands	r3, r2
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	f43f af4a 	beq.w	8006248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3770      	adds	r7, #112	; 0x70
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <__errno>:
 80063c0:	4b01      	ldr	r3, [pc, #4]	; (80063c8 <__errno+0x8>)
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	2000000c 	.word	0x2000000c

080063cc <__libc_init_array>:
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	4d0d      	ldr	r5, [pc, #52]	; (8006404 <__libc_init_array+0x38>)
 80063d0:	4c0d      	ldr	r4, [pc, #52]	; (8006408 <__libc_init_array+0x3c>)
 80063d2:	1b64      	subs	r4, r4, r5
 80063d4:	10a4      	asrs	r4, r4, #2
 80063d6:	2600      	movs	r6, #0
 80063d8:	42a6      	cmp	r6, r4
 80063da:	d109      	bne.n	80063f0 <__libc_init_array+0x24>
 80063dc:	4d0b      	ldr	r5, [pc, #44]	; (800640c <__libc_init_array+0x40>)
 80063de:	4c0c      	ldr	r4, [pc, #48]	; (8006410 <__libc_init_array+0x44>)
 80063e0:	f002 fd36 	bl	8008e50 <_init>
 80063e4:	1b64      	subs	r4, r4, r5
 80063e6:	10a4      	asrs	r4, r4, #2
 80063e8:	2600      	movs	r6, #0
 80063ea:	42a6      	cmp	r6, r4
 80063ec:	d105      	bne.n	80063fa <__libc_init_array+0x2e>
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f4:	4798      	blx	r3
 80063f6:	3601      	adds	r6, #1
 80063f8:	e7ee      	b.n	80063d8 <__libc_init_array+0xc>
 80063fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fe:	4798      	blx	r3
 8006400:	3601      	adds	r6, #1
 8006402:	e7f2      	b.n	80063ea <__libc_init_array+0x1e>
 8006404:	08009294 	.word	0x08009294
 8006408:	08009294 	.word	0x08009294
 800640c:	08009294 	.word	0x08009294
 8006410:	08009298 	.word	0x08009298

08006414 <memset>:
 8006414:	4402      	add	r2, r0
 8006416:	4603      	mov	r3, r0
 8006418:	4293      	cmp	r3, r2
 800641a:	d100      	bne.n	800641e <memset+0xa>
 800641c:	4770      	bx	lr
 800641e:	f803 1b01 	strb.w	r1, [r3], #1
 8006422:	e7f9      	b.n	8006418 <memset+0x4>

08006424 <__cvt>:
 8006424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006428:	ec55 4b10 	vmov	r4, r5, d0
 800642c:	2d00      	cmp	r5, #0
 800642e:	460e      	mov	r6, r1
 8006430:	4619      	mov	r1, r3
 8006432:	462b      	mov	r3, r5
 8006434:	bfbb      	ittet	lt
 8006436:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800643a:	461d      	movlt	r5, r3
 800643c:	2300      	movge	r3, #0
 800643e:	232d      	movlt	r3, #45	; 0x2d
 8006440:	700b      	strb	r3, [r1, #0]
 8006442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006444:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006448:	4691      	mov	r9, r2
 800644a:	f023 0820 	bic.w	r8, r3, #32
 800644e:	bfbc      	itt	lt
 8006450:	4622      	movlt	r2, r4
 8006452:	4614      	movlt	r4, r2
 8006454:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006458:	d005      	beq.n	8006466 <__cvt+0x42>
 800645a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800645e:	d100      	bne.n	8006462 <__cvt+0x3e>
 8006460:	3601      	adds	r6, #1
 8006462:	2102      	movs	r1, #2
 8006464:	e000      	b.n	8006468 <__cvt+0x44>
 8006466:	2103      	movs	r1, #3
 8006468:	ab03      	add	r3, sp, #12
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	ab02      	add	r3, sp, #8
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	ec45 4b10 	vmov	d0, r4, r5
 8006474:	4653      	mov	r3, sl
 8006476:	4632      	mov	r2, r6
 8006478:	f000 fcca 	bl	8006e10 <_dtoa_r>
 800647c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006480:	4607      	mov	r7, r0
 8006482:	d102      	bne.n	800648a <__cvt+0x66>
 8006484:	f019 0f01 	tst.w	r9, #1
 8006488:	d022      	beq.n	80064d0 <__cvt+0xac>
 800648a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800648e:	eb07 0906 	add.w	r9, r7, r6
 8006492:	d110      	bne.n	80064b6 <__cvt+0x92>
 8006494:	783b      	ldrb	r3, [r7, #0]
 8006496:	2b30      	cmp	r3, #48	; 0x30
 8006498:	d10a      	bne.n	80064b0 <__cvt+0x8c>
 800649a:	2200      	movs	r2, #0
 800649c:	2300      	movs	r3, #0
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7fa fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a6:	b918      	cbnz	r0, 80064b0 <__cvt+0x8c>
 80064a8:	f1c6 0601 	rsb	r6, r6, #1
 80064ac:	f8ca 6000 	str.w	r6, [sl]
 80064b0:	f8da 3000 	ldr.w	r3, [sl]
 80064b4:	4499      	add	r9, r3
 80064b6:	2200      	movs	r2, #0
 80064b8:	2300      	movs	r3, #0
 80064ba:	4620      	mov	r0, r4
 80064bc:	4629      	mov	r1, r5
 80064be:	f7fa fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80064c2:	b108      	cbz	r0, 80064c8 <__cvt+0xa4>
 80064c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80064c8:	2230      	movs	r2, #48	; 0x30
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	454b      	cmp	r3, r9
 80064ce:	d307      	bcc.n	80064e0 <__cvt+0xbc>
 80064d0:	9b03      	ldr	r3, [sp, #12]
 80064d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d4:	1bdb      	subs	r3, r3, r7
 80064d6:	4638      	mov	r0, r7
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	b004      	add	sp, #16
 80064dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e0:	1c59      	adds	r1, r3, #1
 80064e2:	9103      	str	r1, [sp, #12]
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e7f0      	b.n	80064ca <__cvt+0xa6>

080064e8 <__exponent>:
 80064e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ea:	4603      	mov	r3, r0
 80064ec:	2900      	cmp	r1, #0
 80064ee:	bfb8      	it	lt
 80064f0:	4249      	neglt	r1, r1
 80064f2:	f803 2b02 	strb.w	r2, [r3], #2
 80064f6:	bfb4      	ite	lt
 80064f8:	222d      	movlt	r2, #45	; 0x2d
 80064fa:	222b      	movge	r2, #43	; 0x2b
 80064fc:	2909      	cmp	r1, #9
 80064fe:	7042      	strb	r2, [r0, #1]
 8006500:	dd2a      	ble.n	8006558 <__exponent+0x70>
 8006502:	f10d 0407 	add.w	r4, sp, #7
 8006506:	46a4      	mov	ip, r4
 8006508:	270a      	movs	r7, #10
 800650a:	46a6      	mov	lr, r4
 800650c:	460a      	mov	r2, r1
 800650e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006512:	fb07 1516 	mls	r5, r7, r6, r1
 8006516:	3530      	adds	r5, #48	; 0x30
 8006518:	2a63      	cmp	r2, #99	; 0x63
 800651a:	f104 34ff 	add.w	r4, r4, #4294967295
 800651e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006522:	4631      	mov	r1, r6
 8006524:	dcf1      	bgt.n	800650a <__exponent+0x22>
 8006526:	3130      	adds	r1, #48	; 0x30
 8006528:	f1ae 0502 	sub.w	r5, lr, #2
 800652c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006530:	1c44      	adds	r4, r0, #1
 8006532:	4629      	mov	r1, r5
 8006534:	4561      	cmp	r1, ip
 8006536:	d30a      	bcc.n	800654e <__exponent+0x66>
 8006538:	f10d 0209 	add.w	r2, sp, #9
 800653c:	eba2 020e 	sub.w	r2, r2, lr
 8006540:	4565      	cmp	r5, ip
 8006542:	bf88      	it	hi
 8006544:	2200      	movhi	r2, #0
 8006546:	4413      	add	r3, r2
 8006548:	1a18      	subs	r0, r3, r0
 800654a:	b003      	add	sp, #12
 800654c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800654e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006552:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006556:	e7ed      	b.n	8006534 <__exponent+0x4c>
 8006558:	2330      	movs	r3, #48	; 0x30
 800655a:	3130      	adds	r1, #48	; 0x30
 800655c:	7083      	strb	r3, [r0, #2]
 800655e:	70c1      	strb	r1, [r0, #3]
 8006560:	1d03      	adds	r3, r0, #4
 8006562:	e7f1      	b.n	8006548 <__exponent+0x60>

08006564 <_printf_float>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	ed2d 8b02 	vpush	{d8}
 800656c:	b08d      	sub	sp, #52	; 0x34
 800656e:	460c      	mov	r4, r1
 8006570:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006574:	4616      	mov	r6, r2
 8006576:	461f      	mov	r7, r3
 8006578:	4605      	mov	r5, r0
 800657a:	f001 fa37 	bl	80079ec <_localeconv_r>
 800657e:	f8d0 a000 	ldr.w	sl, [r0]
 8006582:	4650      	mov	r0, sl
 8006584:	f7f9 fe24 	bl	80001d0 <strlen>
 8006588:	2300      	movs	r3, #0
 800658a:	930a      	str	r3, [sp, #40]	; 0x28
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	9305      	str	r3, [sp, #20]
 8006590:	f8d8 3000 	ldr.w	r3, [r8]
 8006594:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006598:	3307      	adds	r3, #7
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	f103 0208 	add.w	r2, r3, #8
 80065a2:	f8c8 2000 	str.w	r2, [r8]
 80065a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065b6:	9307      	str	r3, [sp, #28]
 80065b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80065bc:	ee08 0a10 	vmov	s16, r0
 80065c0:	4b9f      	ldr	r3, [pc, #636]	; (8006840 <_printf_float+0x2dc>)
 80065c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ca:	f7fa faaf 	bl	8000b2c <__aeabi_dcmpun>
 80065ce:	bb88      	cbnz	r0, 8006634 <_printf_float+0xd0>
 80065d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065d4:	4b9a      	ldr	r3, [pc, #616]	; (8006840 <_printf_float+0x2dc>)
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	f7fa fa89 	bl	8000af0 <__aeabi_dcmple>
 80065de:	bb48      	cbnz	r0, 8006634 <_printf_float+0xd0>
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	4640      	mov	r0, r8
 80065e6:	4649      	mov	r1, r9
 80065e8:	f7fa fa78 	bl	8000adc <__aeabi_dcmplt>
 80065ec:	b110      	cbz	r0, 80065f4 <_printf_float+0x90>
 80065ee:	232d      	movs	r3, #45	; 0x2d
 80065f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f4:	4b93      	ldr	r3, [pc, #588]	; (8006844 <_printf_float+0x2e0>)
 80065f6:	4894      	ldr	r0, [pc, #592]	; (8006848 <_printf_float+0x2e4>)
 80065f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065fc:	bf94      	ite	ls
 80065fe:	4698      	movls	r8, r3
 8006600:	4680      	movhi	r8, r0
 8006602:	2303      	movs	r3, #3
 8006604:	6123      	str	r3, [r4, #16]
 8006606:	9b05      	ldr	r3, [sp, #20]
 8006608:	f023 0204 	bic.w	r2, r3, #4
 800660c:	6022      	str	r2, [r4, #0]
 800660e:	f04f 0900 	mov.w	r9, #0
 8006612:	9700      	str	r7, [sp, #0]
 8006614:	4633      	mov	r3, r6
 8006616:	aa0b      	add	r2, sp, #44	; 0x2c
 8006618:	4621      	mov	r1, r4
 800661a:	4628      	mov	r0, r5
 800661c:	f000 f9d8 	bl	80069d0 <_printf_common>
 8006620:	3001      	adds	r0, #1
 8006622:	f040 8090 	bne.w	8006746 <_printf_float+0x1e2>
 8006626:	f04f 30ff 	mov.w	r0, #4294967295
 800662a:	b00d      	add	sp, #52	; 0x34
 800662c:	ecbd 8b02 	vpop	{d8}
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	4640      	mov	r0, r8
 800663a:	4649      	mov	r1, r9
 800663c:	f7fa fa76 	bl	8000b2c <__aeabi_dcmpun>
 8006640:	b140      	cbz	r0, 8006654 <_printf_float+0xf0>
 8006642:	464b      	mov	r3, r9
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfbc      	itt	lt
 8006648:	232d      	movlt	r3, #45	; 0x2d
 800664a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800664e:	487f      	ldr	r0, [pc, #508]	; (800684c <_printf_float+0x2e8>)
 8006650:	4b7f      	ldr	r3, [pc, #508]	; (8006850 <_printf_float+0x2ec>)
 8006652:	e7d1      	b.n	80065f8 <_printf_float+0x94>
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800665a:	9206      	str	r2, [sp, #24]
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	d13f      	bne.n	80066e0 <_printf_float+0x17c>
 8006660:	2306      	movs	r3, #6
 8006662:	6063      	str	r3, [r4, #4]
 8006664:	9b05      	ldr	r3, [sp, #20]
 8006666:	6861      	ldr	r1, [r4, #4]
 8006668:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800666c:	2300      	movs	r3, #0
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	ab0a      	add	r3, sp, #40	; 0x28
 8006672:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006676:	ab09      	add	r3, sp, #36	; 0x24
 8006678:	ec49 8b10 	vmov	d0, r8, r9
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	6022      	str	r2, [r4, #0]
 8006680:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006684:	4628      	mov	r0, r5
 8006686:	f7ff fecd 	bl	8006424 <__cvt>
 800668a:	9b06      	ldr	r3, [sp, #24]
 800668c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800668e:	2b47      	cmp	r3, #71	; 0x47
 8006690:	4680      	mov	r8, r0
 8006692:	d108      	bne.n	80066a6 <_printf_float+0x142>
 8006694:	1cc8      	adds	r0, r1, #3
 8006696:	db02      	blt.n	800669e <_printf_float+0x13a>
 8006698:	6863      	ldr	r3, [r4, #4]
 800669a:	4299      	cmp	r1, r3
 800669c:	dd41      	ble.n	8006722 <_printf_float+0x1be>
 800669e:	f1ab 0b02 	sub.w	fp, fp, #2
 80066a2:	fa5f fb8b 	uxtb.w	fp, fp
 80066a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066aa:	d820      	bhi.n	80066ee <_printf_float+0x18a>
 80066ac:	3901      	subs	r1, #1
 80066ae:	465a      	mov	r2, fp
 80066b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066b4:	9109      	str	r1, [sp, #36]	; 0x24
 80066b6:	f7ff ff17 	bl	80064e8 <__exponent>
 80066ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066bc:	1813      	adds	r3, r2, r0
 80066be:	2a01      	cmp	r2, #1
 80066c0:	4681      	mov	r9, r0
 80066c2:	6123      	str	r3, [r4, #16]
 80066c4:	dc02      	bgt.n	80066cc <_printf_float+0x168>
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	07d2      	lsls	r2, r2, #31
 80066ca:	d501      	bpl.n	80066d0 <_printf_float+0x16c>
 80066cc:	3301      	adds	r3, #1
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d09c      	beq.n	8006612 <_printf_float+0xae>
 80066d8:	232d      	movs	r3, #45	; 0x2d
 80066da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066de:	e798      	b.n	8006612 <_printf_float+0xae>
 80066e0:	9a06      	ldr	r2, [sp, #24]
 80066e2:	2a47      	cmp	r2, #71	; 0x47
 80066e4:	d1be      	bne.n	8006664 <_printf_float+0x100>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1bc      	bne.n	8006664 <_printf_float+0x100>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e7b9      	b.n	8006662 <_printf_float+0xfe>
 80066ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066f2:	d118      	bne.n	8006726 <_printf_float+0x1c2>
 80066f4:	2900      	cmp	r1, #0
 80066f6:	6863      	ldr	r3, [r4, #4]
 80066f8:	dd0b      	ble.n	8006712 <_printf_float+0x1ae>
 80066fa:	6121      	str	r1, [r4, #16]
 80066fc:	b913      	cbnz	r3, 8006704 <_printf_float+0x1a0>
 80066fe:	6822      	ldr	r2, [r4, #0]
 8006700:	07d0      	lsls	r0, r2, #31
 8006702:	d502      	bpl.n	800670a <_printf_float+0x1a6>
 8006704:	3301      	adds	r3, #1
 8006706:	440b      	add	r3, r1
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	65a1      	str	r1, [r4, #88]	; 0x58
 800670c:	f04f 0900 	mov.w	r9, #0
 8006710:	e7de      	b.n	80066d0 <_printf_float+0x16c>
 8006712:	b913      	cbnz	r3, 800671a <_printf_float+0x1b6>
 8006714:	6822      	ldr	r2, [r4, #0]
 8006716:	07d2      	lsls	r2, r2, #31
 8006718:	d501      	bpl.n	800671e <_printf_float+0x1ba>
 800671a:	3302      	adds	r3, #2
 800671c:	e7f4      	b.n	8006708 <_printf_float+0x1a4>
 800671e:	2301      	movs	r3, #1
 8006720:	e7f2      	b.n	8006708 <_printf_float+0x1a4>
 8006722:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006728:	4299      	cmp	r1, r3
 800672a:	db05      	blt.n	8006738 <_printf_float+0x1d4>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	6121      	str	r1, [r4, #16]
 8006730:	07d8      	lsls	r0, r3, #31
 8006732:	d5ea      	bpl.n	800670a <_printf_float+0x1a6>
 8006734:	1c4b      	adds	r3, r1, #1
 8006736:	e7e7      	b.n	8006708 <_printf_float+0x1a4>
 8006738:	2900      	cmp	r1, #0
 800673a:	bfd4      	ite	le
 800673c:	f1c1 0202 	rsble	r2, r1, #2
 8006740:	2201      	movgt	r2, #1
 8006742:	4413      	add	r3, r2
 8006744:	e7e0      	b.n	8006708 <_printf_float+0x1a4>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	055a      	lsls	r2, r3, #21
 800674a:	d407      	bmi.n	800675c <_printf_float+0x1f8>
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	4642      	mov	r2, r8
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	d12c      	bne.n	80067b4 <_printf_float+0x250>
 800675a:	e764      	b.n	8006626 <_printf_float+0xc2>
 800675c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006760:	f240 80e0 	bls.w	8006924 <_printf_float+0x3c0>
 8006764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006768:	2200      	movs	r2, #0
 800676a:	2300      	movs	r3, #0
 800676c:	f7fa f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006770:	2800      	cmp	r0, #0
 8006772:	d034      	beq.n	80067de <_printf_float+0x27a>
 8006774:	4a37      	ldr	r2, [pc, #220]	; (8006854 <_printf_float+0x2f0>)
 8006776:	2301      	movs	r3, #1
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f43f af51 	beq.w	8006626 <_printf_float+0xc2>
 8006784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006788:	429a      	cmp	r2, r3
 800678a:	db02      	blt.n	8006792 <_printf_float+0x22e>
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	07d8      	lsls	r0, r3, #31
 8006790:	d510      	bpl.n	80067b4 <_printf_float+0x250>
 8006792:	ee18 3a10 	vmov	r3, s16
 8006796:	4652      	mov	r2, sl
 8006798:	4631      	mov	r1, r6
 800679a:	4628      	mov	r0, r5
 800679c:	47b8      	blx	r7
 800679e:	3001      	adds	r0, #1
 80067a0:	f43f af41 	beq.w	8006626 <_printf_float+0xc2>
 80067a4:	f04f 0800 	mov.w	r8, #0
 80067a8:	f104 091a 	add.w	r9, r4, #26
 80067ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ae:	3b01      	subs	r3, #1
 80067b0:	4543      	cmp	r3, r8
 80067b2:	dc09      	bgt.n	80067c8 <_printf_float+0x264>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	079b      	lsls	r3, r3, #30
 80067b8:	f100 8105 	bmi.w	80069c6 <_printf_float+0x462>
 80067bc:	68e0      	ldr	r0, [r4, #12]
 80067be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c0:	4298      	cmp	r0, r3
 80067c2:	bfb8      	it	lt
 80067c4:	4618      	movlt	r0, r3
 80067c6:	e730      	b.n	800662a <_printf_float+0xc6>
 80067c8:	2301      	movs	r3, #1
 80067ca:	464a      	mov	r2, r9
 80067cc:	4631      	mov	r1, r6
 80067ce:	4628      	mov	r0, r5
 80067d0:	47b8      	blx	r7
 80067d2:	3001      	adds	r0, #1
 80067d4:	f43f af27 	beq.w	8006626 <_printf_float+0xc2>
 80067d8:	f108 0801 	add.w	r8, r8, #1
 80067dc:	e7e6      	b.n	80067ac <_printf_float+0x248>
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	dc39      	bgt.n	8006858 <_printf_float+0x2f4>
 80067e4:	4a1b      	ldr	r2, [pc, #108]	; (8006854 <_printf_float+0x2f0>)
 80067e6:	2301      	movs	r3, #1
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f af19 	beq.w	8006626 <_printf_float+0xc2>
 80067f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d102      	bne.n	8006802 <_printf_float+0x29e>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	07d9      	lsls	r1, r3, #31
 8006800:	d5d8      	bpl.n	80067b4 <_printf_float+0x250>
 8006802:	ee18 3a10 	vmov	r3, s16
 8006806:	4652      	mov	r2, sl
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f43f af09 	beq.w	8006626 <_printf_float+0xc2>
 8006814:	f04f 0900 	mov.w	r9, #0
 8006818:	f104 0a1a 	add.w	sl, r4, #26
 800681c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681e:	425b      	negs	r3, r3
 8006820:	454b      	cmp	r3, r9
 8006822:	dc01      	bgt.n	8006828 <_printf_float+0x2c4>
 8006824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006826:	e792      	b.n	800674e <_printf_float+0x1ea>
 8006828:	2301      	movs	r3, #1
 800682a:	4652      	mov	r2, sl
 800682c:	4631      	mov	r1, r6
 800682e:	4628      	mov	r0, r5
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	f43f aef7 	beq.w	8006626 <_printf_float+0xc2>
 8006838:	f109 0901 	add.w	r9, r9, #1
 800683c:	e7ee      	b.n	800681c <_printf_float+0x2b8>
 800683e:	bf00      	nop
 8006840:	7fefffff 	.word	0x7fefffff
 8006844:	08008eb4 	.word	0x08008eb4
 8006848:	08008eb8 	.word	0x08008eb8
 800684c:	08008ec0 	.word	0x08008ec0
 8006850:	08008ebc 	.word	0x08008ebc
 8006854:	08008ec4 	.word	0x08008ec4
 8006858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800685a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800685c:	429a      	cmp	r2, r3
 800685e:	bfa8      	it	ge
 8006860:	461a      	movge	r2, r3
 8006862:	2a00      	cmp	r2, #0
 8006864:	4691      	mov	r9, r2
 8006866:	dc37      	bgt.n	80068d8 <_printf_float+0x374>
 8006868:	f04f 0b00 	mov.w	fp, #0
 800686c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006870:	f104 021a 	add.w	r2, r4, #26
 8006874:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006876:	9305      	str	r3, [sp, #20]
 8006878:	eba3 0309 	sub.w	r3, r3, r9
 800687c:	455b      	cmp	r3, fp
 800687e:	dc33      	bgt.n	80068e8 <_printf_float+0x384>
 8006880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006884:	429a      	cmp	r2, r3
 8006886:	db3b      	blt.n	8006900 <_printf_float+0x39c>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07da      	lsls	r2, r3, #31
 800688c:	d438      	bmi.n	8006900 <_printf_float+0x39c>
 800688e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006890:	9a05      	ldr	r2, [sp, #20]
 8006892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006894:	1a9a      	subs	r2, r3, r2
 8006896:	eba3 0901 	sub.w	r9, r3, r1
 800689a:	4591      	cmp	r9, r2
 800689c:	bfa8      	it	ge
 800689e:	4691      	movge	r9, r2
 80068a0:	f1b9 0f00 	cmp.w	r9, #0
 80068a4:	dc35      	bgt.n	8006912 <_printf_float+0x3ae>
 80068a6:	f04f 0800 	mov.w	r8, #0
 80068aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068ae:	f104 0a1a 	add.w	sl, r4, #26
 80068b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068b6:	1a9b      	subs	r3, r3, r2
 80068b8:	eba3 0309 	sub.w	r3, r3, r9
 80068bc:	4543      	cmp	r3, r8
 80068be:	f77f af79 	ble.w	80067b4 <_printf_float+0x250>
 80068c2:	2301      	movs	r3, #1
 80068c4:	4652      	mov	r2, sl
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f aeaa 	beq.w	8006626 <_printf_float+0xc2>
 80068d2:	f108 0801 	add.w	r8, r8, #1
 80068d6:	e7ec      	b.n	80068b2 <_printf_float+0x34e>
 80068d8:	4613      	mov	r3, r2
 80068da:	4631      	mov	r1, r6
 80068dc:	4642      	mov	r2, r8
 80068de:	4628      	mov	r0, r5
 80068e0:	47b8      	blx	r7
 80068e2:	3001      	adds	r0, #1
 80068e4:	d1c0      	bne.n	8006868 <_printf_float+0x304>
 80068e6:	e69e      	b.n	8006626 <_printf_float+0xc2>
 80068e8:	2301      	movs	r3, #1
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	9205      	str	r2, [sp, #20]
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	f43f ae97 	beq.w	8006626 <_printf_float+0xc2>
 80068f8:	9a05      	ldr	r2, [sp, #20]
 80068fa:	f10b 0b01 	add.w	fp, fp, #1
 80068fe:	e7b9      	b.n	8006874 <_printf_float+0x310>
 8006900:	ee18 3a10 	vmov	r3, s16
 8006904:	4652      	mov	r2, sl
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	d1be      	bne.n	800688e <_printf_float+0x32a>
 8006910:	e689      	b.n	8006626 <_printf_float+0xc2>
 8006912:	9a05      	ldr	r2, [sp, #20]
 8006914:	464b      	mov	r3, r9
 8006916:	4442      	add	r2, r8
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	d1c1      	bne.n	80068a6 <_printf_float+0x342>
 8006922:	e680      	b.n	8006626 <_printf_float+0xc2>
 8006924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006926:	2a01      	cmp	r2, #1
 8006928:	dc01      	bgt.n	800692e <_printf_float+0x3ca>
 800692a:	07db      	lsls	r3, r3, #31
 800692c:	d538      	bpl.n	80069a0 <_printf_float+0x43c>
 800692e:	2301      	movs	r3, #1
 8006930:	4642      	mov	r2, r8
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	f43f ae74 	beq.w	8006626 <_printf_float+0xc2>
 800693e:	ee18 3a10 	vmov	r3, s16
 8006942:	4652      	mov	r2, sl
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f ae6b 	beq.w	8006626 <_printf_float+0xc2>
 8006950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006954:	2200      	movs	r2, #0
 8006956:	2300      	movs	r3, #0
 8006958:	f7fa f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800695c:	b9d8      	cbnz	r0, 8006996 <_printf_float+0x432>
 800695e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006960:	f108 0201 	add.w	r2, r8, #1
 8006964:	3b01      	subs	r3, #1
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	d10e      	bne.n	800698e <_printf_float+0x42a>
 8006970:	e659      	b.n	8006626 <_printf_float+0xc2>
 8006972:	2301      	movs	r3, #1
 8006974:	4652      	mov	r2, sl
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	f43f ae52 	beq.w	8006626 <_printf_float+0xc2>
 8006982:	f108 0801 	add.w	r8, r8, #1
 8006986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006988:	3b01      	subs	r3, #1
 800698a:	4543      	cmp	r3, r8
 800698c:	dcf1      	bgt.n	8006972 <_printf_float+0x40e>
 800698e:	464b      	mov	r3, r9
 8006990:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006994:	e6dc      	b.n	8006750 <_printf_float+0x1ec>
 8006996:	f04f 0800 	mov.w	r8, #0
 800699a:	f104 0a1a 	add.w	sl, r4, #26
 800699e:	e7f2      	b.n	8006986 <_printf_float+0x422>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4642      	mov	r2, r8
 80069a4:	e7df      	b.n	8006966 <_printf_float+0x402>
 80069a6:	2301      	movs	r3, #1
 80069a8:	464a      	mov	r2, r9
 80069aa:	4631      	mov	r1, r6
 80069ac:	4628      	mov	r0, r5
 80069ae:	47b8      	blx	r7
 80069b0:	3001      	adds	r0, #1
 80069b2:	f43f ae38 	beq.w	8006626 <_printf_float+0xc2>
 80069b6:	f108 0801 	add.w	r8, r8, #1
 80069ba:	68e3      	ldr	r3, [r4, #12]
 80069bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069be:	1a5b      	subs	r3, r3, r1
 80069c0:	4543      	cmp	r3, r8
 80069c2:	dcf0      	bgt.n	80069a6 <_printf_float+0x442>
 80069c4:	e6fa      	b.n	80067bc <_printf_float+0x258>
 80069c6:	f04f 0800 	mov.w	r8, #0
 80069ca:	f104 0919 	add.w	r9, r4, #25
 80069ce:	e7f4      	b.n	80069ba <_printf_float+0x456>

080069d0 <_printf_common>:
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	4616      	mov	r6, r2
 80069d6:	4699      	mov	r9, r3
 80069d8:	688a      	ldr	r2, [r1, #8]
 80069da:	690b      	ldr	r3, [r1, #16]
 80069dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bfb8      	it	lt
 80069e4:	4613      	movlt	r3, r2
 80069e6:	6033      	str	r3, [r6, #0]
 80069e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069ec:	4607      	mov	r7, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	b10a      	cbz	r2, 80069f6 <_printf_common+0x26>
 80069f2:	3301      	adds	r3, #1
 80069f4:	6033      	str	r3, [r6, #0]
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	0699      	lsls	r1, r3, #26
 80069fa:	bf42      	ittt	mi
 80069fc:	6833      	ldrmi	r3, [r6, #0]
 80069fe:	3302      	addmi	r3, #2
 8006a00:	6033      	strmi	r3, [r6, #0]
 8006a02:	6825      	ldr	r5, [r4, #0]
 8006a04:	f015 0506 	ands.w	r5, r5, #6
 8006a08:	d106      	bne.n	8006a18 <_printf_common+0x48>
 8006a0a:	f104 0a19 	add.w	sl, r4, #25
 8006a0e:	68e3      	ldr	r3, [r4, #12]
 8006a10:	6832      	ldr	r2, [r6, #0]
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	42ab      	cmp	r3, r5
 8006a16:	dc26      	bgt.n	8006a66 <_printf_common+0x96>
 8006a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a1c:	1e13      	subs	r3, r2, #0
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	bf18      	it	ne
 8006a22:	2301      	movne	r3, #1
 8006a24:	0692      	lsls	r2, r2, #26
 8006a26:	d42b      	bmi.n	8006a80 <_printf_common+0xb0>
 8006a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	4638      	mov	r0, r7
 8006a30:	47c0      	blx	r8
 8006a32:	3001      	adds	r0, #1
 8006a34:	d01e      	beq.n	8006a74 <_printf_common+0xa4>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	68e5      	ldr	r5, [r4, #12]
 8006a3a:	6832      	ldr	r2, [r6, #0]
 8006a3c:	f003 0306 	and.w	r3, r3, #6
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	bf08      	it	eq
 8006a44:	1aad      	subeq	r5, r5, r2
 8006a46:	68a3      	ldr	r3, [r4, #8]
 8006a48:	6922      	ldr	r2, [r4, #16]
 8006a4a:	bf0c      	ite	eq
 8006a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a50:	2500      	movne	r5, #0
 8006a52:	4293      	cmp	r3, r2
 8006a54:	bfc4      	itt	gt
 8006a56:	1a9b      	subgt	r3, r3, r2
 8006a58:	18ed      	addgt	r5, r5, r3
 8006a5a:	2600      	movs	r6, #0
 8006a5c:	341a      	adds	r4, #26
 8006a5e:	42b5      	cmp	r5, r6
 8006a60:	d11a      	bne.n	8006a98 <_printf_common+0xc8>
 8006a62:	2000      	movs	r0, #0
 8006a64:	e008      	b.n	8006a78 <_printf_common+0xa8>
 8006a66:	2301      	movs	r3, #1
 8006a68:	4652      	mov	r2, sl
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	47c0      	blx	r8
 8006a70:	3001      	adds	r0, #1
 8006a72:	d103      	bne.n	8006a7c <_printf_common+0xac>
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	e7c6      	b.n	8006a0e <_printf_common+0x3e>
 8006a80:	18e1      	adds	r1, r4, r3
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	2030      	movs	r0, #48	; 0x30
 8006a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a8a:	4422      	add	r2, r4
 8006a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a94:	3302      	adds	r3, #2
 8006a96:	e7c7      	b.n	8006a28 <_printf_common+0x58>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c0      	blx	r8
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d0e6      	beq.n	8006a74 <_printf_common+0xa4>
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7d9      	b.n	8006a5e <_printf_common+0x8e>
	...

08006aac <_printf_i>:
 8006aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	7e0f      	ldrb	r7, [r1, #24]
 8006ab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ab4:	2f78      	cmp	r7, #120	; 0x78
 8006ab6:	4691      	mov	r9, r2
 8006ab8:	4680      	mov	r8, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	469a      	mov	sl, r3
 8006abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ac2:	d807      	bhi.n	8006ad4 <_printf_i+0x28>
 8006ac4:	2f62      	cmp	r7, #98	; 0x62
 8006ac6:	d80a      	bhi.n	8006ade <_printf_i+0x32>
 8006ac8:	2f00      	cmp	r7, #0
 8006aca:	f000 80d8 	beq.w	8006c7e <_printf_i+0x1d2>
 8006ace:	2f58      	cmp	r7, #88	; 0x58
 8006ad0:	f000 80a3 	beq.w	8006c1a <_printf_i+0x16e>
 8006ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006adc:	e03a      	b.n	8006b54 <_printf_i+0xa8>
 8006ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ae2:	2b15      	cmp	r3, #21
 8006ae4:	d8f6      	bhi.n	8006ad4 <_printf_i+0x28>
 8006ae6:	a101      	add	r1, pc, #4	; (adr r1, 8006aec <_printf_i+0x40>)
 8006ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aec:	08006b45 	.word	0x08006b45
 8006af0:	08006b59 	.word	0x08006b59
 8006af4:	08006ad5 	.word	0x08006ad5
 8006af8:	08006ad5 	.word	0x08006ad5
 8006afc:	08006ad5 	.word	0x08006ad5
 8006b00:	08006ad5 	.word	0x08006ad5
 8006b04:	08006b59 	.word	0x08006b59
 8006b08:	08006ad5 	.word	0x08006ad5
 8006b0c:	08006ad5 	.word	0x08006ad5
 8006b10:	08006ad5 	.word	0x08006ad5
 8006b14:	08006ad5 	.word	0x08006ad5
 8006b18:	08006c65 	.word	0x08006c65
 8006b1c:	08006b89 	.word	0x08006b89
 8006b20:	08006c47 	.word	0x08006c47
 8006b24:	08006ad5 	.word	0x08006ad5
 8006b28:	08006ad5 	.word	0x08006ad5
 8006b2c:	08006c87 	.word	0x08006c87
 8006b30:	08006ad5 	.word	0x08006ad5
 8006b34:	08006b89 	.word	0x08006b89
 8006b38:	08006ad5 	.word	0x08006ad5
 8006b3c:	08006ad5 	.word	0x08006ad5
 8006b40:	08006c4f 	.word	0x08006c4f
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	1d1a      	adds	r2, r3, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	602a      	str	r2, [r5, #0]
 8006b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b54:	2301      	movs	r3, #1
 8006b56:	e0a3      	b.n	8006ca0 <_printf_i+0x1f4>
 8006b58:	6820      	ldr	r0, [r4, #0]
 8006b5a:	6829      	ldr	r1, [r5, #0]
 8006b5c:	0606      	lsls	r6, r0, #24
 8006b5e:	f101 0304 	add.w	r3, r1, #4
 8006b62:	d50a      	bpl.n	8006b7a <_printf_i+0xce>
 8006b64:	680e      	ldr	r6, [r1, #0]
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	2e00      	cmp	r6, #0
 8006b6a:	da03      	bge.n	8006b74 <_printf_i+0xc8>
 8006b6c:	232d      	movs	r3, #45	; 0x2d
 8006b6e:	4276      	negs	r6, r6
 8006b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b74:	485e      	ldr	r0, [pc, #376]	; (8006cf0 <_printf_i+0x244>)
 8006b76:	230a      	movs	r3, #10
 8006b78:	e019      	b.n	8006bae <_printf_i+0x102>
 8006b7a:	680e      	ldr	r6, [r1, #0]
 8006b7c:	602b      	str	r3, [r5, #0]
 8006b7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b82:	bf18      	it	ne
 8006b84:	b236      	sxthne	r6, r6
 8006b86:	e7ef      	b.n	8006b68 <_printf_i+0xbc>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	6820      	ldr	r0, [r4, #0]
 8006b8c:	1d19      	adds	r1, r3, #4
 8006b8e:	6029      	str	r1, [r5, #0]
 8006b90:	0601      	lsls	r1, r0, #24
 8006b92:	d501      	bpl.n	8006b98 <_printf_i+0xec>
 8006b94:	681e      	ldr	r6, [r3, #0]
 8006b96:	e002      	b.n	8006b9e <_printf_i+0xf2>
 8006b98:	0646      	lsls	r6, r0, #25
 8006b9a:	d5fb      	bpl.n	8006b94 <_printf_i+0xe8>
 8006b9c:	881e      	ldrh	r6, [r3, #0]
 8006b9e:	4854      	ldr	r0, [pc, #336]	; (8006cf0 <_printf_i+0x244>)
 8006ba0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ba2:	bf0c      	ite	eq
 8006ba4:	2308      	moveq	r3, #8
 8006ba6:	230a      	movne	r3, #10
 8006ba8:	2100      	movs	r1, #0
 8006baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bae:	6865      	ldr	r5, [r4, #4]
 8006bb0:	60a5      	str	r5, [r4, #8]
 8006bb2:	2d00      	cmp	r5, #0
 8006bb4:	bfa2      	ittt	ge
 8006bb6:	6821      	ldrge	r1, [r4, #0]
 8006bb8:	f021 0104 	bicge.w	r1, r1, #4
 8006bbc:	6021      	strge	r1, [r4, #0]
 8006bbe:	b90e      	cbnz	r6, 8006bc4 <_printf_i+0x118>
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	d04d      	beq.n	8006c60 <_printf_i+0x1b4>
 8006bc4:	4615      	mov	r5, r2
 8006bc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bca:	fb03 6711 	mls	r7, r3, r1, r6
 8006bce:	5dc7      	ldrb	r7, [r0, r7]
 8006bd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bd4:	4637      	mov	r7, r6
 8006bd6:	42bb      	cmp	r3, r7
 8006bd8:	460e      	mov	r6, r1
 8006bda:	d9f4      	bls.n	8006bc6 <_printf_i+0x11a>
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d10b      	bne.n	8006bf8 <_printf_i+0x14c>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	07de      	lsls	r6, r3, #31
 8006be4:	d508      	bpl.n	8006bf8 <_printf_i+0x14c>
 8006be6:	6923      	ldr	r3, [r4, #16]
 8006be8:	6861      	ldr	r1, [r4, #4]
 8006bea:	4299      	cmp	r1, r3
 8006bec:	bfde      	ittt	le
 8006bee:	2330      	movle	r3, #48	; 0x30
 8006bf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bf8:	1b52      	subs	r2, r2, r5
 8006bfa:	6122      	str	r2, [r4, #16]
 8006bfc:	f8cd a000 	str.w	sl, [sp]
 8006c00:	464b      	mov	r3, r9
 8006c02:	aa03      	add	r2, sp, #12
 8006c04:	4621      	mov	r1, r4
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7ff fee2 	bl	80069d0 <_printf_common>
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d14c      	bne.n	8006caa <_printf_i+0x1fe>
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	b004      	add	sp, #16
 8006c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1a:	4835      	ldr	r0, [pc, #212]	; (8006cf0 <_printf_i+0x244>)
 8006c1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c20:	6829      	ldr	r1, [r5, #0]
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c28:	6029      	str	r1, [r5, #0]
 8006c2a:	061d      	lsls	r5, r3, #24
 8006c2c:	d514      	bpl.n	8006c58 <_printf_i+0x1ac>
 8006c2e:	07df      	lsls	r7, r3, #31
 8006c30:	bf44      	itt	mi
 8006c32:	f043 0320 	orrmi.w	r3, r3, #32
 8006c36:	6023      	strmi	r3, [r4, #0]
 8006c38:	b91e      	cbnz	r6, 8006c42 <_printf_i+0x196>
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	f023 0320 	bic.w	r3, r3, #32
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	2310      	movs	r3, #16
 8006c44:	e7b0      	b.n	8006ba8 <_printf_i+0xfc>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	f043 0320 	orr.w	r3, r3, #32
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	2378      	movs	r3, #120	; 0x78
 8006c50:	4828      	ldr	r0, [pc, #160]	; (8006cf4 <_printf_i+0x248>)
 8006c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c56:	e7e3      	b.n	8006c20 <_printf_i+0x174>
 8006c58:	0659      	lsls	r1, r3, #25
 8006c5a:	bf48      	it	mi
 8006c5c:	b2b6      	uxthmi	r6, r6
 8006c5e:	e7e6      	b.n	8006c2e <_printf_i+0x182>
 8006c60:	4615      	mov	r5, r2
 8006c62:	e7bb      	b.n	8006bdc <_printf_i+0x130>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	6826      	ldr	r6, [r4, #0]
 8006c68:	6961      	ldr	r1, [r4, #20]
 8006c6a:	1d18      	adds	r0, r3, #4
 8006c6c:	6028      	str	r0, [r5, #0]
 8006c6e:	0635      	lsls	r5, r6, #24
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	d501      	bpl.n	8006c78 <_printf_i+0x1cc>
 8006c74:	6019      	str	r1, [r3, #0]
 8006c76:	e002      	b.n	8006c7e <_printf_i+0x1d2>
 8006c78:	0670      	lsls	r0, r6, #25
 8006c7a:	d5fb      	bpl.n	8006c74 <_printf_i+0x1c8>
 8006c7c:	8019      	strh	r1, [r3, #0]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	4615      	mov	r5, r2
 8006c84:	e7ba      	b.n	8006bfc <_printf_i+0x150>
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	1d1a      	adds	r2, r3, #4
 8006c8a:	602a      	str	r2, [r5, #0]
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	2100      	movs	r1, #0
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7f9 faa4 	bl	80001e0 <memchr>
 8006c98:	b108      	cbz	r0, 8006c9e <_printf_i+0x1f2>
 8006c9a:	1b40      	subs	r0, r0, r5
 8006c9c:	6060      	str	r0, [r4, #4]
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	6123      	str	r3, [r4, #16]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca8:	e7a8      	b.n	8006bfc <_printf_i+0x150>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	462a      	mov	r2, r5
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	47d0      	blx	sl
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d0ab      	beq.n	8006c10 <_printf_i+0x164>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	079b      	lsls	r3, r3, #30
 8006cbc:	d413      	bmi.n	8006ce6 <_printf_i+0x23a>
 8006cbe:	68e0      	ldr	r0, [r4, #12]
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	4298      	cmp	r0, r3
 8006cc4:	bfb8      	it	lt
 8006cc6:	4618      	movlt	r0, r3
 8006cc8:	e7a4      	b.n	8006c14 <_printf_i+0x168>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4632      	mov	r2, r6
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	47d0      	blx	sl
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d09b      	beq.n	8006c10 <_printf_i+0x164>
 8006cd8:	3501      	adds	r5, #1
 8006cda:	68e3      	ldr	r3, [r4, #12]
 8006cdc:	9903      	ldr	r1, [sp, #12]
 8006cde:	1a5b      	subs	r3, r3, r1
 8006ce0:	42ab      	cmp	r3, r5
 8006ce2:	dcf2      	bgt.n	8006cca <_printf_i+0x21e>
 8006ce4:	e7eb      	b.n	8006cbe <_printf_i+0x212>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	f104 0619 	add.w	r6, r4, #25
 8006cec:	e7f5      	b.n	8006cda <_printf_i+0x22e>
 8006cee:	bf00      	nop
 8006cf0:	08008ec6 	.word	0x08008ec6
 8006cf4:	08008ed7 	.word	0x08008ed7

08006cf8 <quorem>:
 8006cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	6903      	ldr	r3, [r0, #16]
 8006cfe:	690c      	ldr	r4, [r1, #16]
 8006d00:	42a3      	cmp	r3, r4
 8006d02:	4607      	mov	r7, r0
 8006d04:	f2c0 8081 	blt.w	8006e0a <quorem+0x112>
 8006d08:	3c01      	subs	r4, #1
 8006d0a:	f101 0814 	add.w	r8, r1, #20
 8006d0e:	f100 0514 	add.w	r5, r0, #20
 8006d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d16:	9301      	str	r3, [sp, #4]
 8006d18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d20:	3301      	adds	r3, #1
 8006d22:	429a      	cmp	r2, r3
 8006d24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d30:	d331      	bcc.n	8006d96 <quorem+0x9e>
 8006d32:	f04f 0e00 	mov.w	lr, #0
 8006d36:	4640      	mov	r0, r8
 8006d38:	46ac      	mov	ip, r5
 8006d3a:	46f2      	mov	sl, lr
 8006d3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d40:	b293      	uxth	r3, r2
 8006d42:	fb06 e303 	mla	r3, r6, r3, lr
 8006d46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d50:	f8dc a000 	ldr.w	sl, [ip]
 8006d54:	0c12      	lsrs	r2, r2, #16
 8006d56:	fa13 f38a 	uxtah	r3, r3, sl
 8006d5a:	fb06 e202 	mla	r2, r6, r2, lr
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	9b00      	ldr	r3, [sp, #0]
 8006d62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d66:	b292      	uxth	r2, r2
 8006d68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d70:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d74:	4581      	cmp	r9, r0
 8006d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d7a:	f84c 3b04 	str.w	r3, [ip], #4
 8006d7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d82:	d2db      	bcs.n	8006d3c <quorem+0x44>
 8006d84:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d88:	b92b      	cbnz	r3, 8006d96 <quorem+0x9e>
 8006d8a:	9b01      	ldr	r3, [sp, #4]
 8006d8c:	3b04      	subs	r3, #4
 8006d8e:	429d      	cmp	r5, r3
 8006d90:	461a      	mov	r2, r3
 8006d92:	d32e      	bcc.n	8006df2 <quorem+0xfa>
 8006d94:	613c      	str	r4, [r7, #16]
 8006d96:	4638      	mov	r0, r7
 8006d98:	f001 f8c4 	bl	8007f24 <__mcmp>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	db24      	blt.n	8006dea <quorem+0xf2>
 8006da0:	3601      	adds	r6, #1
 8006da2:	4628      	mov	r0, r5
 8006da4:	f04f 0c00 	mov.w	ip, #0
 8006da8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dac:	f8d0 e000 	ldr.w	lr, [r0]
 8006db0:	b293      	uxth	r3, r2
 8006db2:	ebac 0303 	sub.w	r3, ip, r3
 8006db6:	0c12      	lsrs	r2, r2, #16
 8006db8:	fa13 f38e 	uxtah	r3, r3, lr
 8006dbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dca:	45c1      	cmp	r9, r8
 8006dcc:	f840 3b04 	str.w	r3, [r0], #4
 8006dd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006dd4:	d2e8      	bcs.n	8006da8 <quorem+0xb0>
 8006dd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dde:	b922      	cbnz	r2, 8006dea <quorem+0xf2>
 8006de0:	3b04      	subs	r3, #4
 8006de2:	429d      	cmp	r5, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	d30a      	bcc.n	8006dfe <quorem+0x106>
 8006de8:	613c      	str	r4, [r7, #16]
 8006dea:	4630      	mov	r0, r6
 8006dec:	b003      	add	sp, #12
 8006dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	3b04      	subs	r3, #4
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	d1cc      	bne.n	8006d94 <quorem+0x9c>
 8006dfa:	3c01      	subs	r4, #1
 8006dfc:	e7c7      	b.n	8006d8e <quorem+0x96>
 8006dfe:	6812      	ldr	r2, [r2, #0]
 8006e00:	3b04      	subs	r3, #4
 8006e02:	2a00      	cmp	r2, #0
 8006e04:	d1f0      	bne.n	8006de8 <quorem+0xf0>
 8006e06:	3c01      	subs	r4, #1
 8006e08:	e7eb      	b.n	8006de2 <quorem+0xea>
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	e7ee      	b.n	8006dec <quorem+0xf4>
	...

08006e10 <_dtoa_r>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	ed2d 8b04 	vpush	{d8-d9}
 8006e18:	ec57 6b10 	vmov	r6, r7, d0
 8006e1c:	b093      	sub	sp, #76	; 0x4c
 8006e1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e24:	9106      	str	r1, [sp, #24]
 8006e26:	ee10 aa10 	vmov	sl, s0
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e30:	46bb      	mov	fp, r7
 8006e32:	b975      	cbnz	r5, 8006e52 <_dtoa_r+0x42>
 8006e34:	2010      	movs	r0, #16
 8006e36:	f000 fddd 	bl	80079f4 <malloc>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8006e3e:	b920      	cbnz	r0, 8006e4a <_dtoa_r+0x3a>
 8006e40:	4ba7      	ldr	r3, [pc, #668]	; (80070e0 <_dtoa_r+0x2d0>)
 8006e42:	21ea      	movs	r1, #234	; 0xea
 8006e44:	48a7      	ldr	r0, [pc, #668]	; (80070e4 <_dtoa_r+0x2d4>)
 8006e46:	f001 fa75 	bl	8008334 <__assert_func>
 8006e4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e4e:	6005      	str	r5, [r0, #0]
 8006e50:	60c5      	str	r5, [r0, #12]
 8006e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e54:	6819      	ldr	r1, [r3, #0]
 8006e56:	b151      	cbz	r1, 8006e6e <_dtoa_r+0x5e>
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	604a      	str	r2, [r1, #4]
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	4093      	lsls	r3, r2
 8006e60:	608b      	str	r3, [r1, #8]
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fe1c 	bl	8007aa0 <_Bfree>
 8006e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	1e3b      	subs	r3, r7, #0
 8006e70:	bfaa      	itet	ge
 8006e72:	2300      	movge	r3, #0
 8006e74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006e78:	f8c8 3000 	strge.w	r3, [r8]
 8006e7c:	4b9a      	ldr	r3, [pc, #616]	; (80070e8 <_dtoa_r+0x2d8>)
 8006e7e:	bfbc      	itt	lt
 8006e80:	2201      	movlt	r2, #1
 8006e82:	f8c8 2000 	strlt.w	r2, [r8]
 8006e86:	ea33 030b 	bics.w	r3, r3, fp
 8006e8a:	d11b      	bne.n	8006ec4 <_dtoa_r+0xb4>
 8006e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e92:	6013      	str	r3, [r2, #0]
 8006e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e98:	4333      	orrs	r3, r6
 8006e9a:	f000 8592 	beq.w	80079c2 <_dtoa_r+0xbb2>
 8006e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ea0:	b963      	cbnz	r3, 8006ebc <_dtoa_r+0xac>
 8006ea2:	4b92      	ldr	r3, [pc, #584]	; (80070ec <_dtoa_r+0x2dc>)
 8006ea4:	e022      	b.n	8006eec <_dtoa_r+0xdc>
 8006ea6:	4b92      	ldr	r3, [pc, #584]	; (80070f0 <_dtoa_r+0x2e0>)
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	9801      	ldr	r0, [sp, #4]
 8006eb2:	b013      	add	sp, #76	; 0x4c
 8006eb4:	ecbd 8b04 	vpop	{d8-d9}
 8006eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ebc:	4b8b      	ldr	r3, [pc, #556]	; (80070ec <_dtoa_r+0x2dc>)
 8006ebe:	9301      	str	r3, [sp, #4]
 8006ec0:	3303      	adds	r3, #3
 8006ec2:	e7f3      	b.n	8006eac <_dtoa_r+0x9c>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	4650      	mov	r0, sl
 8006eca:	4659      	mov	r1, fp
 8006ecc:	f7f9 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ed0:	ec4b ab19 	vmov	d9, sl, fp
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	b158      	cbz	r0, 8006ef0 <_dtoa_r+0xe0>
 8006ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eda:	2301      	movs	r3, #1
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 856b 	beq.w	80079bc <_dtoa_r+0xbac>
 8006ee6:	4883      	ldr	r0, [pc, #524]	; (80070f4 <_dtoa_r+0x2e4>)
 8006ee8:	6018      	str	r0, [r3, #0]
 8006eea:	1e43      	subs	r3, r0, #1
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	e7df      	b.n	8006eb0 <_dtoa_r+0xa0>
 8006ef0:	ec4b ab10 	vmov	d0, sl, fp
 8006ef4:	aa10      	add	r2, sp, #64	; 0x40
 8006ef6:	a911      	add	r1, sp, #68	; 0x44
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f001 f8b9 	bl	8008070 <__d2b>
 8006efe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006f02:	ee08 0a10 	vmov	s16, r0
 8006f06:	2d00      	cmp	r5, #0
 8006f08:	f000 8084 	beq.w	8007014 <_dtoa_r+0x204>
 8006f0c:	ee19 3a90 	vmov	r3, s19
 8006f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f18:	4656      	mov	r6, sl
 8006f1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006f26:	4b74      	ldr	r3, [pc, #464]	; (80070f8 <_dtoa_r+0x2e8>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	f7f9 f9ab 	bl	8000288 <__aeabi_dsub>
 8006f32:	a365      	add	r3, pc, #404	; (adr r3, 80070c8 <_dtoa_r+0x2b8>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 fb5e 	bl	80005f8 <__aeabi_dmul>
 8006f3c:	a364      	add	r3, pc, #400	; (adr r3, 80070d0 <_dtoa_r+0x2c0>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	f7f9 f9a3 	bl	800028c <__adddf3>
 8006f46:	4606      	mov	r6, r0
 8006f48:	4628      	mov	r0, r5
 8006f4a:	460f      	mov	r7, r1
 8006f4c:	f7f9 faea 	bl	8000524 <__aeabi_i2d>
 8006f50:	a361      	add	r3, pc, #388	; (adr r3, 80070d8 <_dtoa_r+0x2c8>)
 8006f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f56:	f7f9 fb4f 	bl	80005f8 <__aeabi_dmul>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4630      	mov	r0, r6
 8006f60:	4639      	mov	r1, r7
 8006f62:	f7f9 f993 	bl	800028c <__adddf3>
 8006f66:	4606      	mov	r6, r0
 8006f68:	460f      	mov	r7, r1
 8006f6a:	f7f9 fdf5 	bl	8000b58 <__aeabi_d2iz>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	9000      	str	r0, [sp, #0]
 8006f72:	2300      	movs	r3, #0
 8006f74:	4630      	mov	r0, r6
 8006f76:	4639      	mov	r1, r7
 8006f78:	f7f9 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8006f7c:	b150      	cbz	r0, 8006f94 <_dtoa_r+0x184>
 8006f7e:	9800      	ldr	r0, [sp, #0]
 8006f80:	f7f9 fad0 	bl	8000524 <__aeabi_i2d>
 8006f84:	4632      	mov	r2, r6
 8006f86:	463b      	mov	r3, r7
 8006f88:	f7f9 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f8c:	b910      	cbnz	r0, 8006f94 <_dtoa_r+0x184>
 8006f8e:	9b00      	ldr	r3, [sp, #0]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	9b00      	ldr	r3, [sp, #0]
 8006f96:	2b16      	cmp	r3, #22
 8006f98:	d85a      	bhi.n	8007050 <_dtoa_r+0x240>
 8006f9a:	9a00      	ldr	r2, [sp, #0]
 8006f9c:	4b57      	ldr	r3, [pc, #348]	; (80070fc <_dtoa_r+0x2ec>)
 8006f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	ec51 0b19 	vmov	r0, r1, d9
 8006faa:	f7f9 fd97 	bl	8000adc <__aeabi_dcmplt>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d050      	beq.n	8007054 <_dtoa_r+0x244>
 8006fb2:	9b00      	ldr	r3, [sp, #0]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fbe:	1b5d      	subs	r5, r3, r5
 8006fc0:	1e6b      	subs	r3, r5, #1
 8006fc2:	9305      	str	r3, [sp, #20]
 8006fc4:	bf45      	ittet	mi
 8006fc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006fca:	9304      	strmi	r3, [sp, #16]
 8006fcc:	2300      	movpl	r3, #0
 8006fce:	2300      	movmi	r3, #0
 8006fd0:	bf4c      	ite	mi
 8006fd2:	9305      	strmi	r3, [sp, #20]
 8006fd4:	9304      	strpl	r3, [sp, #16]
 8006fd6:	9b00      	ldr	r3, [sp, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	db3d      	blt.n	8007058 <_dtoa_r+0x248>
 8006fdc:	9b05      	ldr	r3, [sp, #20]
 8006fde:	9a00      	ldr	r2, [sp, #0]
 8006fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8006fe2:	4413      	add	r3, r2
 8006fe4:	9305      	str	r3, [sp, #20]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	9307      	str	r3, [sp, #28]
 8006fea:	9b06      	ldr	r3, [sp, #24]
 8006fec:	2b09      	cmp	r3, #9
 8006fee:	f200 8089 	bhi.w	8007104 <_dtoa_r+0x2f4>
 8006ff2:	2b05      	cmp	r3, #5
 8006ff4:	bfc4      	itt	gt
 8006ff6:	3b04      	subgt	r3, #4
 8006ff8:	9306      	strgt	r3, [sp, #24]
 8006ffa:	9b06      	ldr	r3, [sp, #24]
 8006ffc:	f1a3 0302 	sub.w	r3, r3, #2
 8007000:	bfcc      	ite	gt
 8007002:	2500      	movgt	r5, #0
 8007004:	2501      	movle	r5, #1
 8007006:	2b03      	cmp	r3, #3
 8007008:	f200 8087 	bhi.w	800711a <_dtoa_r+0x30a>
 800700c:	e8df f003 	tbb	[pc, r3]
 8007010:	59383a2d 	.word	0x59383a2d
 8007014:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007018:	441d      	add	r5, r3
 800701a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800701e:	2b20      	cmp	r3, #32
 8007020:	bfc1      	itttt	gt
 8007022:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007026:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800702a:	fa0b f303 	lslgt.w	r3, fp, r3
 800702e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007032:	bfda      	itte	le
 8007034:	f1c3 0320 	rsble	r3, r3, #32
 8007038:	fa06 f003 	lslle.w	r0, r6, r3
 800703c:	4318      	orrgt	r0, r3
 800703e:	f7f9 fa61 	bl	8000504 <__aeabi_ui2d>
 8007042:	2301      	movs	r3, #1
 8007044:	4606      	mov	r6, r0
 8007046:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800704a:	3d01      	subs	r5, #1
 800704c:	930e      	str	r3, [sp, #56]	; 0x38
 800704e:	e76a      	b.n	8006f26 <_dtoa_r+0x116>
 8007050:	2301      	movs	r3, #1
 8007052:	e7b2      	b.n	8006fba <_dtoa_r+0x1aa>
 8007054:	900b      	str	r0, [sp, #44]	; 0x2c
 8007056:	e7b1      	b.n	8006fbc <_dtoa_r+0x1ac>
 8007058:	9b04      	ldr	r3, [sp, #16]
 800705a:	9a00      	ldr	r2, [sp, #0]
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	9304      	str	r3, [sp, #16]
 8007060:	4253      	negs	r3, r2
 8007062:	9307      	str	r3, [sp, #28]
 8007064:	2300      	movs	r3, #0
 8007066:	930a      	str	r3, [sp, #40]	; 0x28
 8007068:	e7bf      	b.n	8006fea <_dtoa_r+0x1da>
 800706a:	2300      	movs	r3, #0
 800706c:	9308      	str	r3, [sp, #32]
 800706e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007070:	2b00      	cmp	r3, #0
 8007072:	dc55      	bgt.n	8007120 <_dtoa_r+0x310>
 8007074:	2301      	movs	r3, #1
 8007076:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800707a:	461a      	mov	r2, r3
 800707c:	9209      	str	r2, [sp, #36]	; 0x24
 800707e:	e00c      	b.n	800709a <_dtoa_r+0x28a>
 8007080:	2301      	movs	r3, #1
 8007082:	e7f3      	b.n	800706c <_dtoa_r+0x25c>
 8007084:	2300      	movs	r3, #0
 8007086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007088:	9308      	str	r3, [sp, #32]
 800708a:	9b00      	ldr	r3, [sp, #0]
 800708c:	4413      	add	r3, r2
 800708e:	9302      	str	r3, [sp, #8]
 8007090:	3301      	adds	r3, #1
 8007092:	2b01      	cmp	r3, #1
 8007094:	9303      	str	r3, [sp, #12]
 8007096:	bfb8      	it	lt
 8007098:	2301      	movlt	r3, #1
 800709a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800709c:	2200      	movs	r2, #0
 800709e:	6042      	str	r2, [r0, #4]
 80070a0:	2204      	movs	r2, #4
 80070a2:	f102 0614 	add.w	r6, r2, #20
 80070a6:	429e      	cmp	r6, r3
 80070a8:	6841      	ldr	r1, [r0, #4]
 80070aa:	d93d      	bls.n	8007128 <_dtoa_r+0x318>
 80070ac:	4620      	mov	r0, r4
 80070ae:	f000 fcb7 	bl	8007a20 <_Balloc>
 80070b2:	9001      	str	r0, [sp, #4]
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d13b      	bne.n	8007130 <_dtoa_r+0x320>
 80070b8:	4b11      	ldr	r3, [pc, #68]	; (8007100 <_dtoa_r+0x2f0>)
 80070ba:	4602      	mov	r2, r0
 80070bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80070c0:	e6c0      	b.n	8006e44 <_dtoa_r+0x34>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e7df      	b.n	8007086 <_dtoa_r+0x276>
 80070c6:	bf00      	nop
 80070c8:	636f4361 	.word	0x636f4361
 80070cc:	3fd287a7 	.word	0x3fd287a7
 80070d0:	8b60c8b3 	.word	0x8b60c8b3
 80070d4:	3fc68a28 	.word	0x3fc68a28
 80070d8:	509f79fb 	.word	0x509f79fb
 80070dc:	3fd34413 	.word	0x3fd34413
 80070e0:	08008ef5 	.word	0x08008ef5
 80070e4:	08008f0c 	.word	0x08008f0c
 80070e8:	7ff00000 	.word	0x7ff00000
 80070ec:	08008ef1 	.word	0x08008ef1
 80070f0:	08008ee8 	.word	0x08008ee8
 80070f4:	08008ec5 	.word	0x08008ec5
 80070f8:	3ff80000 	.word	0x3ff80000
 80070fc:	08009000 	.word	0x08009000
 8007100:	08008f67 	.word	0x08008f67
 8007104:	2501      	movs	r5, #1
 8007106:	2300      	movs	r3, #0
 8007108:	9306      	str	r3, [sp, #24]
 800710a:	9508      	str	r5, [sp, #32]
 800710c:	f04f 33ff 	mov.w	r3, #4294967295
 8007110:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	2312      	movs	r3, #18
 8007118:	e7b0      	b.n	800707c <_dtoa_r+0x26c>
 800711a:	2301      	movs	r3, #1
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	e7f5      	b.n	800710c <_dtoa_r+0x2fc>
 8007120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007122:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007126:	e7b8      	b.n	800709a <_dtoa_r+0x28a>
 8007128:	3101      	adds	r1, #1
 800712a:	6041      	str	r1, [r0, #4]
 800712c:	0052      	lsls	r2, r2, #1
 800712e:	e7b8      	b.n	80070a2 <_dtoa_r+0x292>
 8007130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007132:	9a01      	ldr	r2, [sp, #4]
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	9b03      	ldr	r3, [sp, #12]
 8007138:	2b0e      	cmp	r3, #14
 800713a:	f200 809d 	bhi.w	8007278 <_dtoa_r+0x468>
 800713e:	2d00      	cmp	r5, #0
 8007140:	f000 809a 	beq.w	8007278 <_dtoa_r+0x468>
 8007144:	9b00      	ldr	r3, [sp, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	dd32      	ble.n	80071b0 <_dtoa_r+0x3a0>
 800714a:	4ab7      	ldr	r2, [pc, #732]	; (8007428 <_dtoa_r+0x618>)
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007158:	9b00      	ldr	r3, [sp, #0]
 800715a:	05d8      	lsls	r0, r3, #23
 800715c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007160:	d516      	bpl.n	8007190 <_dtoa_r+0x380>
 8007162:	4bb2      	ldr	r3, [pc, #712]	; (800742c <_dtoa_r+0x61c>)
 8007164:	ec51 0b19 	vmov	r0, r1, d9
 8007168:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800716c:	f7f9 fb6e 	bl	800084c <__aeabi_ddiv>
 8007170:	f007 070f 	and.w	r7, r7, #15
 8007174:	4682      	mov	sl, r0
 8007176:	468b      	mov	fp, r1
 8007178:	2503      	movs	r5, #3
 800717a:	4eac      	ldr	r6, [pc, #688]	; (800742c <_dtoa_r+0x61c>)
 800717c:	b957      	cbnz	r7, 8007194 <_dtoa_r+0x384>
 800717e:	4642      	mov	r2, r8
 8007180:	464b      	mov	r3, r9
 8007182:	4650      	mov	r0, sl
 8007184:	4659      	mov	r1, fp
 8007186:	f7f9 fb61 	bl	800084c <__aeabi_ddiv>
 800718a:	4682      	mov	sl, r0
 800718c:	468b      	mov	fp, r1
 800718e:	e028      	b.n	80071e2 <_dtoa_r+0x3d2>
 8007190:	2502      	movs	r5, #2
 8007192:	e7f2      	b.n	800717a <_dtoa_r+0x36a>
 8007194:	07f9      	lsls	r1, r7, #31
 8007196:	d508      	bpl.n	80071aa <_dtoa_r+0x39a>
 8007198:	4640      	mov	r0, r8
 800719a:	4649      	mov	r1, r9
 800719c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071a0:	f7f9 fa2a 	bl	80005f8 <__aeabi_dmul>
 80071a4:	3501      	adds	r5, #1
 80071a6:	4680      	mov	r8, r0
 80071a8:	4689      	mov	r9, r1
 80071aa:	107f      	asrs	r7, r7, #1
 80071ac:	3608      	adds	r6, #8
 80071ae:	e7e5      	b.n	800717c <_dtoa_r+0x36c>
 80071b0:	f000 809b 	beq.w	80072ea <_dtoa_r+0x4da>
 80071b4:	9b00      	ldr	r3, [sp, #0]
 80071b6:	4f9d      	ldr	r7, [pc, #628]	; (800742c <_dtoa_r+0x61c>)
 80071b8:	425e      	negs	r6, r3
 80071ba:	4b9b      	ldr	r3, [pc, #620]	; (8007428 <_dtoa_r+0x618>)
 80071bc:	f006 020f 	and.w	r2, r6, #15
 80071c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	ec51 0b19 	vmov	r0, r1, d9
 80071cc:	f7f9 fa14 	bl	80005f8 <__aeabi_dmul>
 80071d0:	1136      	asrs	r6, r6, #4
 80071d2:	4682      	mov	sl, r0
 80071d4:	468b      	mov	fp, r1
 80071d6:	2300      	movs	r3, #0
 80071d8:	2502      	movs	r5, #2
 80071da:	2e00      	cmp	r6, #0
 80071dc:	d17a      	bne.n	80072d4 <_dtoa_r+0x4c4>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1d3      	bne.n	800718a <_dtoa_r+0x37a>
 80071e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8082 	beq.w	80072ee <_dtoa_r+0x4de>
 80071ea:	4b91      	ldr	r3, [pc, #580]	; (8007430 <_dtoa_r+0x620>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	4650      	mov	r0, sl
 80071f0:	4659      	mov	r1, fp
 80071f2:	f7f9 fc73 	bl	8000adc <__aeabi_dcmplt>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d079      	beq.n	80072ee <_dtoa_r+0x4de>
 80071fa:	9b03      	ldr	r3, [sp, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d076      	beq.n	80072ee <_dtoa_r+0x4de>
 8007200:	9b02      	ldr	r3, [sp, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd36      	ble.n	8007274 <_dtoa_r+0x464>
 8007206:	9b00      	ldr	r3, [sp, #0]
 8007208:	4650      	mov	r0, sl
 800720a:	4659      	mov	r1, fp
 800720c:	1e5f      	subs	r7, r3, #1
 800720e:	2200      	movs	r2, #0
 8007210:	4b88      	ldr	r3, [pc, #544]	; (8007434 <_dtoa_r+0x624>)
 8007212:	f7f9 f9f1 	bl	80005f8 <__aeabi_dmul>
 8007216:	9e02      	ldr	r6, [sp, #8]
 8007218:	4682      	mov	sl, r0
 800721a:	468b      	mov	fp, r1
 800721c:	3501      	adds	r5, #1
 800721e:	4628      	mov	r0, r5
 8007220:	f7f9 f980 	bl	8000524 <__aeabi_i2d>
 8007224:	4652      	mov	r2, sl
 8007226:	465b      	mov	r3, fp
 8007228:	f7f9 f9e6 	bl	80005f8 <__aeabi_dmul>
 800722c:	4b82      	ldr	r3, [pc, #520]	; (8007438 <_dtoa_r+0x628>)
 800722e:	2200      	movs	r2, #0
 8007230:	f7f9 f82c 	bl	800028c <__adddf3>
 8007234:	46d0      	mov	r8, sl
 8007236:	46d9      	mov	r9, fp
 8007238:	4682      	mov	sl, r0
 800723a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800723e:	2e00      	cmp	r6, #0
 8007240:	d158      	bne.n	80072f4 <_dtoa_r+0x4e4>
 8007242:	4b7e      	ldr	r3, [pc, #504]	; (800743c <_dtoa_r+0x62c>)
 8007244:	2200      	movs	r2, #0
 8007246:	4640      	mov	r0, r8
 8007248:	4649      	mov	r1, r9
 800724a:	f7f9 f81d 	bl	8000288 <__aeabi_dsub>
 800724e:	4652      	mov	r2, sl
 8007250:	465b      	mov	r3, fp
 8007252:	4680      	mov	r8, r0
 8007254:	4689      	mov	r9, r1
 8007256:	f7f9 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800725a:	2800      	cmp	r0, #0
 800725c:	f040 8295 	bne.w	800778a <_dtoa_r+0x97a>
 8007260:	4652      	mov	r2, sl
 8007262:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007266:	4640      	mov	r0, r8
 8007268:	4649      	mov	r1, r9
 800726a:	f7f9 fc37 	bl	8000adc <__aeabi_dcmplt>
 800726e:	2800      	cmp	r0, #0
 8007270:	f040 8289 	bne.w	8007786 <_dtoa_r+0x976>
 8007274:	ec5b ab19 	vmov	sl, fp, d9
 8007278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800727a:	2b00      	cmp	r3, #0
 800727c:	f2c0 8148 	blt.w	8007510 <_dtoa_r+0x700>
 8007280:	9a00      	ldr	r2, [sp, #0]
 8007282:	2a0e      	cmp	r2, #14
 8007284:	f300 8144 	bgt.w	8007510 <_dtoa_r+0x700>
 8007288:	4b67      	ldr	r3, [pc, #412]	; (8007428 <_dtoa_r+0x618>)
 800728a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800728e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	f280 80d5 	bge.w	8007444 <_dtoa_r+0x634>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	f300 80d1 	bgt.w	8007444 <_dtoa_r+0x634>
 80072a2:	f040 826f 	bne.w	8007784 <_dtoa_r+0x974>
 80072a6:	4b65      	ldr	r3, [pc, #404]	; (800743c <_dtoa_r+0x62c>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	4640      	mov	r0, r8
 80072ac:	4649      	mov	r1, r9
 80072ae:	f7f9 f9a3 	bl	80005f8 <__aeabi_dmul>
 80072b2:	4652      	mov	r2, sl
 80072b4:	465b      	mov	r3, fp
 80072b6:	f7f9 fc25 	bl	8000b04 <__aeabi_dcmpge>
 80072ba:	9e03      	ldr	r6, [sp, #12]
 80072bc:	4637      	mov	r7, r6
 80072be:	2800      	cmp	r0, #0
 80072c0:	f040 8245 	bne.w	800774e <_dtoa_r+0x93e>
 80072c4:	9d01      	ldr	r5, [sp, #4]
 80072c6:	2331      	movs	r3, #49	; 0x31
 80072c8:	f805 3b01 	strb.w	r3, [r5], #1
 80072cc:	9b00      	ldr	r3, [sp, #0]
 80072ce:	3301      	adds	r3, #1
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	e240      	b.n	8007756 <_dtoa_r+0x946>
 80072d4:	07f2      	lsls	r2, r6, #31
 80072d6:	d505      	bpl.n	80072e4 <_dtoa_r+0x4d4>
 80072d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072dc:	f7f9 f98c 	bl	80005f8 <__aeabi_dmul>
 80072e0:	3501      	adds	r5, #1
 80072e2:	2301      	movs	r3, #1
 80072e4:	1076      	asrs	r6, r6, #1
 80072e6:	3708      	adds	r7, #8
 80072e8:	e777      	b.n	80071da <_dtoa_r+0x3ca>
 80072ea:	2502      	movs	r5, #2
 80072ec:	e779      	b.n	80071e2 <_dtoa_r+0x3d2>
 80072ee:	9f00      	ldr	r7, [sp, #0]
 80072f0:	9e03      	ldr	r6, [sp, #12]
 80072f2:	e794      	b.n	800721e <_dtoa_r+0x40e>
 80072f4:	9901      	ldr	r1, [sp, #4]
 80072f6:	4b4c      	ldr	r3, [pc, #304]	; (8007428 <_dtoa_r+0x618>)
 80072f8:	4431      	add	r1, r6
 80072fa:	910d      	str	r1, [sp, #52]	; 0x34
 80072fc:	9908      	ldr	r1, [sp, #32]
 80072fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007306:	2900      	cmp	r1, #0
 8007308:	d043      	beq.n	8007392 <_dtoa_r+0x582>
 800730a:	494d      	ldr	r1, [pc, #308]	; (8007440 <_dtoa_r+0x630>)
 800730c:	2000      	movs	r0, #0
 800730e:	f7f9 fa9d 	bl	800084c <__aeabi_ddiv>
 8007312:	4652      	mov	r2, sl
 8007314:	465b      	mov	r3, fp
 8007316:	f7f8 ffb7 	bl	8000288 <__aeabi_dsub>
 800731a:	9d01      	ldr	r5, [sp, #4]
 800731c:	4682      	mov	sl, r0
 800731e:	468b      	mov	fp, r1
 8007320:	4649      	mov	r1, r9
 8007322:	4640      	mov	r0, r8
 8007324:	f7f9 fc18 	bl	8000b58 <__aeabi_d2iz>
 8007328:	4606      	mov	r6, r0
 800732a:	f7f9 f8fb 	bl	8000524 <__aeabi_i2d>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4640      	mov	r0, r8
 8007334:	4649      	mov	r1, r9
 8007336:	f7f8 ffa7 	bl	8000288 <__aeabi_dsub>
 800733a:	3630      	adds	r6, #48	; 0x30
 800733c:	f805 6b01 	strb.w	r6, [r5], #1
 8007340:	4652      	mov	r2, sl
 8007342:	465b      	mov	r3, fp
 8007344:	4680      	mov	r8, r0
 8007346:	4689      	mov	r9, r1
 8007348:	f7f9 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800734c:	2800      	cmp	r0, #0
 800734e:	d163      	bne.n	8007418 <_dtoa_r+0x608>
 8007350:	4642      	mov	r2, r8
 8007352:	464b      	mov	r3, r9
 8007354:	4936      	ldr	r1, [pc, #216]	; (8007430 <_dtoa_r+0x620>)
 8007356:	2000      	movs	r0, #0
 8007358:	f7f8 ff96 	bl	8000288 <__aeabi_dsub>
 800735c:	4652      	mov	r2, sl
 800735e:	465b      	mov	r3, fp
 8007360:	f7f9 fbbc 	bl	8000adc <__aeabi_dcmplt>
 8007364:	2800      	cmp	r0, #0
 8007366:	f040 80b5 	bne.w	80074d4 <_dtoa_r+0x6c4>
 800736a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800736c:	429d      	cmp	r5, r3
 800736e:	d081      	beq.n	8007274 <_dtoa_r+0x464>
 8007370:	4b30      	ldr	r3, [pc, #192]	; (8007434 <_dtoa_r+0x624>)
 8007372:	2200      	movs	r2, #0
 8007374:	4650      	mov	r0, sl
 8007376:	4659      	mov	r1, fp
 8007378:	f7f9 f93e 	bl	80005f8 <__aeabi_dmul>
 800737c:	4b2d      	ldr	r3, [pc, #180]	; (8007434 <_dtoa_r+0x624>)
 800737e:	4682      	mov	sl, r0
 8007380:	468b      	mov	fp, r1
 8007382:	4640      	mov	r0, r8
 8007384:	4649      	mov	r1, r9
 8007386:	2200      	movs	r2, #0
 8007388:	f7f9 f936 	bl	80005f8 <__aeabi_dmul>
 800738c:	4680      	mov	r8, r0
 800738e:	4689      	mov	r9, r1
 8007390:	e7c6      	b.n	8007320 <_dtoa_r+0x510>
 8007392:	4650      	mov	r0, sl
 8007394:	4659      	mov	r1, fp
 8007396:	f7f9 f92f 	bl	80005f8 <__aeabi_dmul>
 800739a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800739c:	9d01      	ldr	r5, [sp, #4]
 800739e:	930f      	str	r3, [sp, #60]	; 0x3c
 80073a0:	4682      	mov	sl, r0
 80073a2:	468b      	mov	fp, r1
 80073a4:	4649      	mov	r1, r9
 80073a6:	4640      	mov	r0, r8
 80073a8:	f7f9 fbd6 	bl	8000b58 <__aeabi_d2iz>
 80073ac:	4606      	mov	r6, r0
 80073ae:	f7f9 f8b9 	bl	8000524 <__aeabi_i2d>
 80073b2:	3630      	adds	r6, #48	; 0x30
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4640      	mov	r0, r8
 80073ba:	4649      	mov	r1, r9
 80073bc:	f7f8 ff64 	bl	8000288 <__aeabi_dsub>
 80073c0:	f805 6b01 	strb.w	r6, [r5], #1
 80073c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073c6:	429d      	cmp	r5, r3
 80073c8:	4680      	mov	r8, r0
 80073ca:	4689      	mov	r9, r1
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	d124      	bne.n	800741c <_dtoa_r+0x60c>
 80073d2:	4b1b      	ldr	r3, [pc, #108]	; (8007440 <_dtoa_r+0x630>)
 80073d4:	4650      	mov	r0, sl
 80073d6:	4659      	mov	r1, fp
 80073d8:	f7f8 ff58 	bl	800028c <__adddf3>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4640      	mov	r0, r8
 80073e2:	4649      	mov	r1, r9
 80073e4:	f7f9 fb98 	bl	8000b18 <__aeabi_dcmpgt>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d173      	bne.n	80074d4 <_dtoa_r+0x6c4>
 80073ec:	4652      	mov	r2, sl
 80073ee:	465b      	mov	r3, fp
 80073f0:	4913      	ldr	r1, [pc, #76]	; (8007440 <_dtoa_r+0x630>)
 80073f2:	2000      	movs	r0, #0
 80073f4:	f7f8 ff48 	bl	8000288 <__aeabi_dsub>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4640      	mov	r0, r8
 80073fe:	4649      	mov	r1, r9
 8007400:	f7f9 fb6c 	bl	8000adc <__aeabi_dcmplt>
 8007404:	2800      	cmp	r0, #0
 8007406:	f43f af35 	beq.w	8007274 <_dtoa_r+0x464>
 800740a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800740c:	1e6b      	subs	r3, r5, #1
 800740e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007410:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007414:	2b30      	cmp	r3, #48	; 0x30
 8007416:	d0f8      	beq.n	800740a <_dtoa_r+0x5fa>
 8007418:	9700      	str	r7, [sp, #0]
 800741a:	e049      	b.n	80074b0 <_dtoa_r+0x6a0>
 800741c:	4b05      	ldr	r3, [pc, #20]	; (8007434 <_dtoa_r+0x624>)
 800741e:	f7f9 f8eb 	bl	80005f8 <__aeabi_dmul>
 8007422:	4680      	mov	r8, r0
 8007424:	4689      	mov	r9, r1
 8007426:	e7bd      	b.n	80073a4 <_dtoa_r+0x594>
 8007428:	08009000 	.word	0x08009000
 800742c:	08008fd8 	.word	0x08008fd8
 8007430:	3ff00000 	.word	0x3ff00000
 8007434:	40240000 	.word	0x40240000
 8007438:	401c0000 	.word	0x401c0000
 800743c:	40140000 	.word	0x40140000
 8007440:	3fe00000 	.word	0x3fe00000
 8007444:	9d01      	ldr	r5, [sp, #4]
 8007446:	4656      	mov	r6, sl
 8007448:	465f      	mov	r7, fp
 800744a:	4642      	mov	r2, r8
 800744c:	464b      	mov	r3, r9
 800744e:	4630      	mov	r0, r6
 8007450:	4639      	mov	r1, r7
 8007452:	f7f9 f9fb 	bl	800084c <__aeabi_ddiv>
 8007456:	f7f9 fb7f 	bl	8000b58 <__aeabi_d2iz>
 800745a:	4682      	mov	sl, r0
 800745c:	f7f9 f862 	bl	8000524 <__aeabi_i2d>
 8007460:	4642      	mov	r2, r8
 8007462:	464b      	mov	r3, r9
 8007464:	f7f9 f8c8 	bl	80005f8 <__aeabi_dmul>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4630      	mov	r0, r6
 800746e:	4639      	mov	r1, r7
 8007470:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007474:	f7f8 ff08 	bl	8000288 <__aeabi_dsub>
 8007478:	f805 6b01 	strb.w	r6, [r5], #1
 800747c:	9e01      	ldr	r6, [sp, #4]
 800747e:	9f03      	ldr	r7, [sp, #12]
 8007480:	1bae      	subs	r6, r5, r6
 8007482:	42b7      	cmp	r7, r6
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	d135      	bne.n	80074f6 <_dtoa_r+0x6e6>
 800748a:	f7f8 feff 	bl	800028c <__adddf3>
 800748e:	4642      	mov	r2, r8
 8007490:	464b      	mov	r3, r9
 8007492:	4606      	mov	r6, r0
 8007494:	460f      	mov	r7, r1
 8007496:	f7f9 fb3f 	bl	8000b18 <__aeabi_dcmpgt>
 800749a:	b9d0      	cbnz	r0, 80074d2 <_dtoa_r+0x6c2>
 800749c:	4642      	mov	r2, r8
 800749e:	464b      	mov	r3, r9
 80074a0:	4630      	mov	r0, r6
 80074a2:	4639      	mov	r1, r7
 80074a4:	f7f9 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 80074a8:	b110      	cbz	r0, 80074b0 <_dtoa_r+0x6a0>
 80074aa:	f01a 0f01 	tst.w	sl, #1
 80074ae:	d110      	bne.n	80074d2 <_dtoa_r+0x6c2>
 80074b0:	4620      	mov	r0, r4
 80074b2:	ee18 1a10 	vmov	r1, s16
 80074b6:	f000 faf3 	bl	8007aa0 <_Bfree>
 80074ba:	2300      	movs	r3, #0
 80074bc:	9800      	ldr	r0, [sp, #0]
 80074be:	702b      	strb	r3, [r5, #0]
 80074c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074c2:	3001      	adds	r0, #1
 80074c4:	6018      	str	r0, [r3, #0]
 80074c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f43f acf1 	beq.w	8006eb0 <_dtoa_r+0xa0>
 80074ce:	601d      	str	r5, [r3, #0]
 80074d0:	e4ee      	b.n	8006eb0 <_dtoa_r+0xa0>
 80074d2:	9f00      	ldr	r7, [sp, #0]
 80074d4:	462b      	mov	r3, r5
 80074d6:	461d      	mov	r5, r3
 80074d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074dc:	2a39      	cmp	r2, #57	; 0x39
 80074de:	d106      	bne.n	80074ee <_dtoa_r+0x6de>
 80074e0:	9a01      	ldr	r2, [sp, #4]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d1f7      	bne.n	80074d6 <_dtoa_r+0x6c6>
 80074e6:	9901      	ldr	r1, [sp, #4]
 80074e8:	2230      	movs	r2, #48	; 0x30
 80074ea:	3701      	adds	r7, #1
 80074ec:	700a      	strb	r2, [r1, #0]
 80074ee:	781a      	ldrb	r2, [r3, #0]
 80074f0:	3201      	adds	r2, #1
 80074f2:	701a      	strb	r2, [r3, #0]
 80074f4:	e790      	b.n	8007418 <_dtoa_r+0x608>
 80074f6:	4ba6      	ldr	r3, [pc, #664]	; (8007790 <_dtoa_r+0x980>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	f7f9 f87d 	bl	80005f8 <__aeabi_dmul>
 80074fe:	2200      	movs	r2, #0
 8007500:	2300      	movs	r3, #0
 8007502:	4606      	mov	r6, r0
 8007504:	460f      	mov	r7, r1
 8007506:	f7f9 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800750a:	2800      	cmp	r0, #0
 800750c:	d09d      	beq.n	800744a <_dtoa_r+0x63a>
 800750e:	e7cf      	b.n	80074b0 <_dtoa_r+0x6a0>
 8007510:	9a08      	ldr	r2, [sp, #32]
 8007512:	2a00      	cmp	r2, #0
 8007514:	f000 80d7 	beq.w	80076c6 <_dtoa_r+0x8b6>
 8007518:	9a06      	ldr	r2, [sp, #24]
 800751a:	2a01      	cmp	r2, #1
 800751c:	f300 80ba 	bgt.w	8007694 <_dtoa_r+0x884>
 8007520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007522:	2a00      	cmp	r2, #0
 8007524:	f000 80b2 	beq.w	800768c <_dtoa_r+0x87c>
 8007528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800752c:	9e07      	ldr	r6, [sp, #28]
 800752e:	9d04      	ldr	r5, [sp, #16]
 8007530:	9a04      	ldr	r2, [sp, #16]
 8007532:	441a      	add	r2, r3
 8007534:	9204      	str	r2, [sp, #16]
 8007536:	9a05      	ldr	r2, [sp, #20]
 8007538:	2101      	movs	r1, #1
 800753a:	441a      	add	r2, r3
 800753c:	4620      	mov	r0, r4
 800753e:	9205      	str	r2, [sp, #20]
 8007540:	f000 fb66 	bl	8007c10 <__i2b>
 8007544:	4607      	mov	r7, r0
 8007546:	2d00      	cmp	r5, #0
 8007548:	dd0c      	ble.n	8007564 <_dtoa_r+0x754>
 800754a:	9b05      	ldr	r3, [sp, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	dd09      	ble.n	8007564 <_dtoa_r+0x754>
 8007550:	42ab      	cmp	r3, r5
 8007552:	9a04      	ldr	r2, [sp, #16]
 8007554:	bfa8      	it	ge
 8007556:	462b      	movge	r3, r5
 8007558:	1ad2      	subs	r2, r2, r3
 800755a:	9204      	str	r2, [sp, #16]
 800755c:	9a05      	ldr	r2, [sp, #20]
 800755e:	1aed      	subs	r5, r5, r3
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	9305      	str	r3, [sp, #20]
 8007564:	9b07      	ldr	r3, [sp, #28]
 8007566:	b31b      	cbz	r3, 80075b0 <_dtoa_r+0x7a0>
 8007568:	9b08      	ldr	r3, [sp, #32]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80af 	beq.w	80076ce <_dtoa_r+0x8be>
 8007570:	2e00      	cmp	r6, #0
 8007572:	dd13      	ble.n	800759c <_dtoa_r+0x78c>
 8007574:	4639      	mov	r1, r7
 8007576:	4632      	mov	r2, r6
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fc09 	bl	8007d90 <__pow5mult>
 800757e:	ee18 2a10 	vmov	r2, s16
 8007582:	4601      	mov	r1, r0
 8007584:	4607      	mov	r7, r0
 8007586:	4620      	mov	r0, r4
 8007588:	f000 fb58 	bl	8007c3c <__multiply>
 800758c:	ee18 1a10 	vmov	r1, s16
 8007590:	4680      	mov	r8, r0
 8007592:	4620      	mov	r0, r4
 8007594:	f000 fa84 	bl	8007aa0 <_Bfree>
 8007598:	ee08 8a10 	vmov	s16, r8
 800759c:	9b07      	ldr	r3, [sp, #28]
 800759e:	1b9a      	subs	r2, r3, r6
 80075a0:	d006      	beq.n	80075b0 <_dtoa_r+0x7a0>
 80075a2:	ee18 1a10 	vmov	r1, s16
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 fbf2 	bl	8007d90 <__pow5mult>
 80075ac:	ee08 0a10 	vmov	s16, r0
 80075b0:	2101      	movs	r1, #1
 80075b2:	4620      	mov	r0, r4
 80075b4:	f000 fb2c 	bl	8007c10 <__i2b>
 80075b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	4606      	mov	r6, r0
 80075be:	f340 8088 	ble.w	80076d2 <_dtoa_r+0x8c2>
 80075c2:	461a      	mov	r2, r3
 80075c4:	4601      	mov	r1, r0
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 fbe2 	bl	8007d90 <__pow5mult>
 80075cc:	9b06      	ldr	r3, [sp, #24]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	4606      	mov	r6, r0
 80075d2:	f340 8081 	ble.w	80076d8 <_dtoa_r+0x8c8>
 80075d6:	f04f 0800 	mov.w	r8, #0
 80075da:	6933      	ldr	r3, [r6, #16]
 80075dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80075e0:	6918      	ldr	r0, [r3, #16]
 80075e2:	f000 fac5 	bl	8007b70 <__hi0bits>
 80075e6:	f1c0 0020 	rsb	r0, r0, #32
 80075ea:	9b05      	ldr	r3, [sp, #20]
 80075ec:	4418      	add	r0, r3
 80075ee:	f010 001f 	ands.w	r0, r0, #31
 80075f2:	f000 8092 	beq.w	800771a <_dtoa_r+0x90a>
 80075f6:	f1c0 0320 	rsb	r3, r0, #32
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	f340 808a 	ble.w	8007714 <_dtoa_r+0x904>
 8007600:	f1c0 001c 	rsb	r0, r0, #28
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	4403      	add	r3, r0
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	4403      	add	r3, r0
 800760e:	4405      	add	r5, r0
 8007610:	9305      	str	r3, [sp, #20]
 8007612:	9b04      	ldr	r3, [sp, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd07      	ble.n	8007628 <_dtoa_r+0x818>
 8007618:	ee18 1a10 	vmov	r1, s16
 800761c:	461a      	mov	r2, r3
 800761e:	4620      	mov	r0, r4
 8007620:	f000 fc10 	bl	8007e44 <__lshift>
 8007624:	ee08 0a10 	vmov	s16, r0
 8007628:	9b05      	ldr	r3, [sp, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	dd05      	ble.n	800763a <_dtoa_r+0x82a>
 800762e:	4631      	mov	r1, r6
 8007630:	461a      	mov	r2, r3
 8007632:	4620      	mov	r0, r4
 8007634:	f000 fc06 	bl	8007e44 <__lshift>
 8007638:	4606      	mov	r6, r0
 800763a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d06e      	beq.n	800771e <_dtoa_r+0x90e>
 8007640:	ee18 0a10 	vmov	r0, s16
 8007644:	4631      	mov	r1, r6
 8007646:	f000 fc6d 	bl	8007f24 <__mcmp>
 800764a:	2800      	cmp	r0, #0
 800764c:	da67      	bge.n	800771e <_dtoa_r+0x90e>
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	3b01      	subs	r3, #1
 8007652:	ee18 1a10 	vmov	r1, s16
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	220a      	movs	r2, #10
 800765a:	2300      	movs	r3, #0
 800765c:	4620      	mov	r0, r4
 800765e:	f000 fa41 	bl	8007ae4 <__multadd>
 8007662:	9b08      	ldr	r3, [sp, #32]
 8007664:	ee08 0a10 	vmov	s16, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 81b1 	beq.w	80079d0 <_dtoa_r+0xbc0>
 800766e:	2300      	movs	r3, #0
 8007670:	4639      	mov	r1, r7
 8007672:	220a      	movs	r2, #10
 8007674:	4620      	mov	r0, r4
 8007676:	f000 fa35 	bl	8007ae4 <__multadd>
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	4607      	mov	r7, r0
 8007680:	f300 808e 	bgt.w	80077a0 <_dtoa_r+0x990>
 8007684:	9b06      	ldr	r3, [sp, #24]
 8007686:	2b02      	cmp	r3, #2
 8007688:	dc51      	bgt.n	800772e <_dtoa_r+0x91e>
 800768a:	e089      	b.n	80077a0 <_dtoa_r+0x990>
 800768c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800768e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007692:	e74b      	b.n	800752c <_dtoa_r+0x71c>
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	1e5e      	subs	r6, r3, #1
 8007698:	9b07      	ldr	r3, [sp, #28]
 800769a:	42b3      	cmp	r3, r6
 800769c:	bfbf      	itttt	lt
 800769e:	9b07      	ldrlt	r3, [sp, #28]
 80076a0:	9607      	strlt	r6, [sp, #28]
 80076a2:	1af2      	sublt	r2, r6, r3
 80076a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80076a6:	bfb6      	itet	lt
 80076a8:	189b      	addlt	r3, r3, r2
 80076aa:	1b9e      	subge	r6, r3, r6
 80076ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80076ae:	9b03      	ldr	r3, [sp, #12]
 80076b0:	bfb8      	it	lt
 80076b2:	2600      	movlt	r6, #0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bfb7      	itett	lt
 80076b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80076bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80076c0:	1a9d      	sublt	r5, r3, r2
 80076c2:	2300      	movlt	r3, #0
 80076c4:	e734      	b.n	8007530 <_dtoa_r+0x720>
 80076c6:	9e07      	ldr	r6, [sp, #28]
 80076c8:	9d04      	ldr	r5, [sp, #16]
 80076ca:	9f08      	ldr	r7, [sp, #32]
 80076cc:	e73b      	b.n	8007546 <_dtoa_r+0x736>
 80076ce:	9a07      	ldr	r2, [sp, #28]
 80076d0:	e767      	b.n	80075a2 <_dtoa_r+0x792>
 80076d2:	9b06      	ldr	r3, [sp, #24]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	dc18      	bgt.n	800770a <_dtoa_r+0x8fa>
 80076d8:	f1ba 0f00 	cmp.w	sl, #0
 80076dc:	d115      	bne.n	800770a <_dtoa_r+0x8fa>
 80076de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076e2:	b993      	cbnz	r3, 800770a <_dtoa_r+0x8fa>
 80076e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076e8:	0d1b      	lsrs	r3, r3, #20
 80076ea:	051b      	lsls	r3, r3, #20
 80076ec:	b183      	cbz	r3, 8007710 <_dtoa_r+0x900>
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	3301      	adds	r3, #1
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	9b05      	ldr	r3, [sp, #20]
 80076f6:	3301      	adds	r3, #1
 80076f8:	9305      	str	r3, [sp, #20]
 80076fa:	f04f 0801 	mov.w	r8, #1
 80076fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007700:	2b00      	cmp	r3, #0
 8007702:	f47f af6a 	bne.w	80075da <_dtoa_r+0x7ca>
 8007706:	2001      	movs	r0, #1
 8007708:	e76f      	b.n	80075ea <_dtoa_r+0x7da>
 800770a:	f04f 0800 	mov.w	r8, #0
 800770e:	e7f6      	b.n	80076fe <_dtoa_r+0x8ee>
 8007710:	4698      	mov	r8, r3
 8007712:	e7f4      	b.n	80076fe <_dtoa_r+0x8ee>
 8007714:	f43f af7d 	beq.w	8007612 <_dtoa_r+0x802>
 8007718:	4618      	mov	r0, r3
 800771a:	301c      	adds	r0, #28
 800771c:	e772      	b.n	8007604 <_dtoa_r+0x7f4>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	dc37      	bgt.n	8007794 <_dtoa_r+0x984>
 8007724:	9b06      	ldr	r3, [sp, #24]
 8007726:	2b02      	cmp	r3, #2
 8007728:	dd34      	ble.n	8007794 <_dtoa_r+0x984>
 800772a:	9b03      	ldr	r3, [sp, #12]
 800772c:	9302      	str	r3, [sp, #8]
 800772e:	9b02      	ldr	r3, [sp, #8]
 8007730:	b96b      	cbnz	r3, 800774e <_dtoa_r+0x93e>
 8007732:	4631      	mov	r1, r6
 8007734:	2205      	movs	r2, #5
 8007736:	4620      	mov	r0, r4
 8007738:	f000 f9d4 	bl	8007ae4 <__multadd>
 800773c:	4601      	mov	r1, r0
 800773e:	4606      	mov	r6, r0
 8007740:	ee18 0a10 	vmov	r0, s16
 8007744:	f000 fbee 	bl	8007f24 <__mcmp>
 8007748:	2800      	cmp	r0, #0
 800774a:	f73f adbb 	bgt.w	80072c4 <_dtoa_r+0x4b4>
 800774e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007750:	9d01      	ldr	r5, [sp, #4]
 8007752:	43db      	mvns	r3, r3
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	4631      	mov	r1, r6
 800775c:	4620      	mov	r0, r4
 800775e:	f000 f99f 	bl	8007aa0 <_Bfree>
 8007762:	2f00      	cmp	r7, #0
 8007764:	f43f aea4 	beq.w	80074b0 <_dtoa_r+0x6a0>
 8007768:	f1b8 0f00 	cmp.w	r8, #0
 800776c:	d005      	beq.n	800777a <_dtoa_r+0x96a>
 800776e:	45b8      	cmp	r8, r7
 8007770:	d003      	beq.n	800777a <_dtoa_r+0x96a>
 8007772:	4641      	mov	r1, r8
 8007774:	4620      	mov	r0, r4
 8007776:	f000 f993 	bl	8007aa0 <_Bfree>
 800777a:	4639      	mov	r1, r7
 800777c:	4620      	mov	r0, r4
 800777e:	f000 f98f 	bl	8007aa0 <_Bfree>
 8007782:	e695      	b.n	80074b0 <_dtoa_r+0x6a0>
 8007784:	2600      	movs	r6, #0
 8007786:	4637      	mov	r7, r6
 8007788:	e7e1      	b.n	800774e <_dtoa_r+0x93e>
 800778a:	9700      	str	r7, [sp, #0]
 800778c:	4637      	mov	r7, r6
 800778e:	e599      	b.n	80072c4 <_dtoa_r+0x4b4>
 8007790:	40240000 	.word	0x40240000
 8007794:	9b08      	ldr	r3, [sp, #32]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 80ca 	beq.w	8007930 <_dtoa_r+0xb20>
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	9302      	str	r3, [sp, #8]
 80077a0:	2d00      	cmp	r5, #0
 80077a2:	dd05      	ble.n	80077b0 <_dtoa_r+0x9a0>
 80077a4:	4639      	mov	r1, r7
 80077a6:	462a      	mov	r2, r5
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 fb4b 	bl	8007e44 <__lshift>
 80077ae:	4607      	mov	r7, r0
 80077b0:	f1b8 0f00 	cmp.w	r8, #0
 80077b4:	d05b      	beq.n	800786e <_dtoa_r+0xa5e>
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 f931 	bl	8007a20 <_Balloc>
 80077be:	4605      	mov	r5, r0
 80077c0:	b928      	cbnz	r0, 80077ce <_dtoa_r+0x9be>
 80077c2:	4b87      	ldr	r3, [pc, #540]	; (80079e0 <_dtoa_r+0xbd0>)
 80077c4:	4602      	mov	r2, r0
 80077c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80077ca:	f7ff bb3b 	b.w	8006e44 <_dtoa_r+0x34>
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	3202      	adds	r2, #2
 80077d2:	0092      	lsls	r2, r2, #2
 80077d4:	f107 010c 	add.w	r1, r7, #12
 80077d8:	300c      	adds	r0, #12
 80077da:	f000 f913 	bl	8007a04 <memcpy>
 80077de:	2201      	movs	r2, #1
 80077e0:	4629      	mov	r1, r5
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 fb2e 	bl	8007e44 <__lshift>
 80077e8:	9b01      	ldr	r3, [sp, #4]
 80077ea:	f103 0901 	add.w	r9, r3, #1
 80077ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80077f2:	4413      	add	r3, r2
 80077f4:	9305      	str	r3, [sp, #20]
 80077f6:	f00a 0301 	and.w	r3, sl, #1
 80077fa:	46b8      	mov	r8, r7
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	4607      	mov	r7, r0
 8007800:	4631      	mov	r1, r6
 8007802:	ee18 0a10 	vmov	r0, s16
 8007806:	f7ff fa77 	bl	8006cf8 <quorem>
 800780a:	4641      	mov	r1, r8
 800780c:	9002      	str	r0, [sp, #8]
 800780e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007812:	ee18 0a10 	vmov	r0, s16
 8007816:	f000 fb85 	bl	8007f24 <__mcmp>
 800781a:	463a      	mov	r2, r7
 800781c:	9003      	str	r0, [sp, #12]
 800781e:	4631      	mov	r1, r6
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fb9b 	bl	8007f5c <__mdiff>
 8007826:	68c2      	ldr	r2, [r0, #12]
 8007828:	f109 3bff 	add.w	fp, r9, #4294967295
 800782c:	4605      	mov	r5, r0
 800782e:	bb02      	cbnz	r2, 8007872 <_dtoa_r+0xa62>
 8007830:	4601      	mov	r1, r0
 8007832:	ee18 0a10 	vmov	r0, s16
 8007836:	f000 fb75 	bl	8007f24 <__mcmp>
 800783a:	4602      	mov	r2, r0
 800783c:	4629      	mov	r1, r5
 800783e:	4620      	mov	r0, r4
 8007840:	9207      	str	r2, [sp, #28]
 8007842:	f000 f92d 	bl	8007aa0 <_Bfree>
 8007846:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800784a:	ea43 0102 	orr.w	r1, r3, r2
 800784e:	9b04      	ldr	r3, [sp, #16]
 8007850:	430b      	orrs	r3, r1
 8007852:	464d      	mov	r5, r9
 8007854:	d10f      	bne.n	8007876 <_dtoa_r+0xa66>
 8007856:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800785a:	d02a      	beq.n	80078b2 <_dtoa_r+0xaa2>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	dd02      	ble.n	8007868 <_dtoa_r+0xa58>
 8007862:	9b02      	ldr	r3, [sp, #8]
 8007864:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007868:	f88b a000 	strb.w	sl, [fp]
 800786c:	e775      	b.n	800775a <_dtoa_r+0x94a>
 800786e:	4638      	mov	r0, r7
 8007870:	e7ba      	b.n	80077e8 <_dtoa_r+0x9d8>
 8007872:	2201      	movs	r2, #1
 8007874:	e7e2      	b.n	800783c <_dtoa_r+0xa2c>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	db04      	blt.n	8007886 <_dtoa_r+0xa76>
 800787c:	9906      	ldr	r1, [sp, #24]
 800787e:	430b      	orrs	r3, r1
 8007880:	9904      	ldr	r1, [sp, #16]
 8007882:	430b      	orrs	r3, r1
 8007884:	d122      	bne.n	80078cc <_dtoa_r+0xabc>
 8007886:	2a00      	cmp	r2, #0
 8007888:	ddee      	ble.n	8007868 <_dtoa_r+0xa58>
 800788a:	ee18 1a10 	vmov	r1, s16
 800788e:	2201      	movs	r2, #1
 8007890:	4620      	mov	r0, r4
 8007892:	f000 fad7 	bl	8007e44 <__lshift>
 8007896:	4631      	mov	r1, r6
 8007898:	ee08 0a10 	vmov	s16, r0
 800789c:	f000 fb42 	bl	8007f24 <__mcmp>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	dc03      	bgt.n	80078ac <_dtoa_r+0xa9c>
 80078a4:	d1e0      	bne.n	8007868 <_dtoa_r+0xa58>
 80078a6:	f01a 0f01 	tst.w	sl, #1
 80078aa:	d0dd      	beq.n	8007868 <_dtoa_r+0xa58>
 80078ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80078b0:	d1d7      	bne.n	8007862 <_dtoa_r+0xa52>
 80078b2:	2339      	movs	r3, #57	; 0x39
 80078b4:	f88b 3000 	strb.w	r3, [fp]
 80078b8:	462b      	mov	r3, r5
 80078ba:	461d      	mov	r5, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078c2:	2a39      	cmp	r2, #57	; 0x39
 80078c4:	d071      	beq.n	80079aa <_dtoa_r+0xb9a>
 80078c6:	3201      	adds	r2, #1
 80078c8:	701a      	strb	r2, [r3, #0]
 80078ca:	e746      	b.n	800775a <_dtoa_r+0x94a>
 80078cc:	2a00      	cmp	r2, #0
 80078ce:	dd07      	ble.n	80078e0 <_dtoa_r+0xad0>
 80078d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80078d4:	d0ed      	beq.n	80078b2 <_dtoa_r+0xaa2>
 80078d6:	f10a 0301 	add.w	r3, sl, #1
 80078da:	f88b 3000 	strb.w	r3, [fp]
 80078de:	e73c      	b.n	800775a <_dtoa_r+0x94a>
 80078e0:	9b05      	ldr	r3, [sp, #20]
 80078e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80078e6:	4599      	cmp	r9, r3
 80078e8:	d047      	beq.n	800797a <_dtoa_r+0xb6a>
 80078ea:	ee18 1a10 	vmov	r1, s16
 80078ee:	2300      	movs	r3, #0
 80078f0:	220a      	movs	r2, #10
 80078f2:	4620      	mov	r0, r4
 80078f4:	f000 f8f6 	bl	8007ae4 <__multadd>
 80078f8:	45b8      	cmp	r8, r7
 80078fa:	ee08 0a10 	vmov	s16, r0
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	f04f 020a 	mov.w	r2, #10
 8007906:	4641      	mov	r1, r8
 8007908:	4620      	mov	r0, r4
 800790a:	d106      	bne.n	800791a <_dtoa_r+0xb0a>
 800790c:	f000 f8ea 	bl	8007ae4 <__multadd>
 8007910:	4680      	mov	r8, r0
 8007912:	4607      	mov	r7, r0
 8007914:	f109 0901 	add.w	r9, r9, #1
 8007918:	e772      	b.n	8007800 <_dtoa_r+0x9f0>
 800791a:	f000 f8e3 	bl	8007ae4 <__multadd>
 800791e:	4639      	mov	r1, r7
 8007920:	4680      	mov	r8, r0
 8007922:	2300      	movs	r3, #0
 8007924:	220a      	movs	r2, #10
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f8dc 	bl	8007ae4 <__multadd>
 800792c:	4607      	mov	r7, r0
 800792e:	e7f1      	b.n	8007914 <_dtoa_r+0xb04>
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	9302      	str	r3, [sp, #8]
 8007934:	9d01      	ldr	r5, [sp, #4]
 8007936:	ee18 0a10 	vmov	r0, s16
 800793a:	4631      	mov	r1, r6
 800793c:	f7ff f9dc 	bl	8006cf8 <quorem>
 8007940:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007944:	9b01      	ldr	r3, [sp, #4]
 8007946:	f805 ab01 	strb.w	sl, [r5], #1
 800794a:	1aea      	subs	r2, r5, r3
 800794c:	9b02      	ldr	r3, [sp, #8]
 800794e:	4293      	cmp	r3, r2
 8007950:	dd09      	ble.n	8007966 <_dtoa_r+0xb56>
 8007952:	ee18 1a10 	vmov	r1, s16
 8007956:	2300      	movs	r3, #0
 8007958:	220a      	movs	r2, #10
 800795a:	4620      	mov	r0, r4
 800795c:	f000 f8c2 	bl	8007ae4 <__multadd>
 8007960:	ee08 0a10 	vmov	s16, r0
 8007964:	e7e7      	b.n	8007936 <_dtoa_r+0xb26>
 8007966:	9b02      	ldr	r3, [sp, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	bfc8      	it	gt
 800796c:	461d      	movgt	r5, r3
 800796e:	9b01      	ldr	r3, [sp, #4]
 8007970:	bfd8      	it	le
 8007972:	2501      	movle	r5, #1
 8007974:	441d      	add	r5, r3
 8007976:	f04f 0800 	mov.w	r8, #0
 800797a:	ee18 1a10 	vmov	r1, s16
 800797e:	2201      	movs	r2, #1
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fa5f 	bl	8007e44 <__lshift>
 8007986:	4631      	mov	r1, r6
 8007988:	ee08 0a10 	vmov	s16, r0
 800798c:	f000 faca 	bl	8007f24 <__mcmp>
 8007990:	2800      	cmp	r0, #0
 8007992:	dc91      	bgt.n	80078b8 <_dtoa_r+0xaa8>
 8007994:	d102      	bne.n	800799c <_dtoa_r+0xb8c>
 8007996:	f01a 0f01 	tst.w	sl, #1
 800799a:	d18d      	bne.n	80078b8 <_dtoa_r+0xaa8>
 800799c:	462b      	mov	r3, r5
 800799e:	461d      	mov	r5, r3
 80079a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079a4:	2a30      	cmp	r2, #48	; 0x30
 80079a6:	d0fa      	beq.n	800799e <_dtoa_r+0xb8e>
 80079a8:	e6d7      	b.n	800775a <_dtoa_r+0x94a>
 80079aa:	9a01      	ldr	r2, [sp, #4]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d184      	bne.n	80078ba <_dtoa_r+0xaaa>
 80079b0:	9b00      	ldr	r3, [sp, #0]
 80079b2:	3301      	adds	r3, #1
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	2331      	movs	r3, #49	; 0x31
 80079b8:	7013      	strb	r3, [r2, #0]
 80079ba:	e6ce      	b.n	800775a <_dtoa_r+0x94a>
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <_dtoa_r+0xbd4>)
 80079be:	f7ff ba95 	b.w	8006eec <_dtoa_r+0xdc>
 80079c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f47f aa6e 	bne.w	8006ea6 <_dtoa_r+0x96>
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <_dtoa_r+0xbd8>)
 80079cc:	f7ff ba8e 	b.w	8006eec <_dtoa_r+0xdc>
 80079d0:	9b02      	ldr	r3, [sp, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	dcae      	bgt.n	8007934 <_dtoa_r+0xb24>
 80079d6:	9b06      	ldr	r3, [sp, #24]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	f73f aea8 	bgt.w	800772e <_dtoa_r+0x91e>
 80079de:	e7a9      	b.n	8007934 <_dtoa_r+0xb24>
 80079e0:	08008f67 	.word	0x08008f67
 80079e4:	08008ec4 	.word	0x08008ec4
 80079e8:	08008ee8 	.word	0x08008ee8

080079ec <_localeconv_r>:
 80079ec:	4800      	ldr	r0, [pc, #0]	; (80079f0 <_localeconv_r+0x4>)
 80079ee:	4770      	bx	lr
 80079f0:	20000160 	.word	0x20000160

080079f4 <malloc>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <malloc+0xc>)
 80079f6:	4601      	mov	r1, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f000 bc17 	b.w	800822c <_malloc_r>
 80079fe:	bf00      	nop
 8007a00:	2000000c 	.word	0x2000000c

08007a04 <memcpy>:
 8007a04:	440a      	add	r2, r1
 8007a06:	4291      	cmp	r1, r2
 8007a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a0c:	d100      	bne.n	8007a10 <memcpy+0xc>
 8007a0e:	4770      	bx	lr
 8007a10:	b510      	push	{r4, lr}
 8007a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a1a:	4291      	cmp	r1, r2
 8007a1c:	d1f9      	bne.n	8007a12 <memcpy+0xe>
 8007a1e:	bd10      	pop	{r4, pc}

08007a20 <_Balloc>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a24:	4604      	mov	r4, r0
 8007a26:	460d      	mov	r5, r1
 8007a28:	b976      	cbnz	r6, 8007a48 <_Balloc+0x28>
 8007a2a:	2010      	movs	r0, #16
 8007a2c:	f7ff ffe2 	bl	80079f4 <malloc>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6260      	str	r0, [r4, #36]	; 0x24
 8007a34:	b920      	cbnz	r0, 8007a40 <_Balloc+0x20>
 8007a36:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <_Balloc+0x78>)
 8007a38:	4818      	ldr	r0, [pc, #96]	; (8007a9c <_Balloc+0x7c>)
 8007a3a:	2166      	movs	r1, #102	; 0x66
 8007a3c:	f000 fc7a 	bl	8008334 <__assert_func>
 8007a40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a44:	6006      	str	r6, [r0, #0]
 8007a46:	60c6      	str	r6, [r0, #12]
 8007a48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a4a:	68f3      	ldr	r3, [r6, #12]
 8007a4c:	b183      	cbz	r3, 8007a70 <_Balloc+0x50>
 8007a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a56:	b9b8      	cbnz	r0, 8007a88 <_Balloc+0x68>
 8007a58:	2101      	movs	r1, #1
 8007a5a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a5e:	1d72      	adds	r2, r6, #5
 8007a60:	0092      	lsls	r2, r2, #2
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 fb60 	bl	8008128 <_calloc_r>
 8007a68:	b160      	cbz	r0, 8007a84 <_Balloc+0x64>
 8007a6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a6e:	e00e      	b.n	8007a8e <_Balloc+0x6e>
 8007a70:	2221      	movs	r2, #33	; 0x21
 8007a72:	2104      	movs	r1, #4
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 fb57 	bl	8008128 <_calloc_r>
 8007a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a7c:	60f0      	str	r0, [r6, #12]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e4      	bne.n	8007a4e <_Balloc+0x2e>
 8007a84:	2000      	movs	r0, #0
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	6802      	ldr	r2, [r0, #0]
 8007a8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a94:	e7f7      	b.n	8007a86 <_Balloc+0x66>
 8007a96:	bf00      	nop
 8007a98:	08008ef5 	.word	0x08008ef5
 8007a9c:	08008f78 	.word	0x08008f78

08007aa0 <_Bfree>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	b976      	cbnz	r6, 8007ac8 <_Bfree+0x28>
 8007aaa:	2010      	movs	r0, #16
 8007aac:	f7ff ffa2 	bl	80079f4 <malloc>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ab4:	b920      	cbnz	r0, 8007ac0 <_Bfree+0x20>
 8007ab6:	4b09      	ldr	r3, [pc, #36]	; (8007adc <_Bfree+0x3c>)
 8007ab8:	4809      	ldr	r0, [pc, #36]	; (8007ae0 <_Bfree+0x40>)
 8007aba:	218a      	movs	r1, #138	; 0x8a
 8007abc:	f000 fc3a 	bl	8008334 <__assert_func>
 8007ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac4:	6006      	str	r6, [r0, #0]
 8007ac6:	60c6      	str	r6, [r0, #12]
 8007ac8:	b13c      	cbz	r4, 8007ada <_Bfree+0x3a>
 8007aca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007acc:	6862      	ldr	r2, [r4, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ad4:	6021      	str	r1, [r4, #0]
 8007ad6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	08008ef5 	.word	0x08008ef5
 8007ae0:	08008f78 	.word	0x08008f78

08007ae4 <__multadd>:
 8007ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae8:	690d      	ldr	r5, [r1, #16]
 8007aea:	4607      	mov	r7, r0
 8007aec:	460c      	mov	r4, r1
 8007aee:	461e      	mov	r6, r3
 8007af0:	f101 0c14 	add.w	ip, r1, #20
 8007af4:	2000      	movs	r0, #0
 8007af6:	f8dc 3000 	ldr.w	r3, [ip]
 8007afa:	b299      	uxth	r1, r3
 8007afc:	fb02 6101 	mla	r1, r2, r1, r6
 8007b00:	0c1e      	lsrs	r6, r3, #16
 8007b02:	0c0b      	lsrs	r3, r1, #16
 8007b04:	fb02 3306 	mla	r3, r2, r6, r3
 8007b08:	b289      	uxth	r1, r1
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b10:	4285      	cmp	r5, r0
 8007b12:	f84c 1b04 	str.w	r1, [ip], #4
 8007b16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b1a:	dcec      	bgt.n	8007af6 <__multadd+0x12>
 8007b1c:	b30e      	cbz	r6, 8007b62 <__multadd+0x7e>
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	42ab      	cmp	r3, r5
 8007b22:	dc19      	bgt.n	8007b58 <__multadd+0x74>
 8007b24:	6861      	ldr	r1, [r4, #4]
 8007b26:	4638      	mov	r0, r7
 8007b28:	3101      	adds	r1, #1
 8007b2a:	f7ff ff79 	bl	8007a20 <_Balloc>
 8007b2e:	4680      	mov	r8, r0
 8007b30:	b928      	cbnz	r0, 8007b3e <__multadd+0x5a>
 8007b32:	4602      	mov	r2, r0
 8007b34:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <__multadd+0x84>)
 8007b36:	480d      	ldr	r0, [pc, #52]	; (8007b6c <__multadd+0x88>)
 8007b38:	21b5      	movs	r1, #181	; 0xb5
 8007b3a:	f000 fbfb 	bl	8008334 <__assert_func>
 8007b3e:	6922      	ldr	r2, [r4, #16]
 8007b40:	3202      	adds	r2, #2
 8007b42:	f104 010c 	add.w	r1, r4, #12
 8007b46:	0092      	lsls	r2, r2, #2
 8007b48:	300c      	adds	r0, #12
 8007b4a:	f7ff ff5b 	bl	8007a04 <memcpy>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4638      	mov	r0, r7
 8007b52:	f7ff ffa5 	bl	8007aa0 <_Bfree>
 8007b56:	4644      	mov	r4, r8
 8007b58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b5c:	3501      	adds	r5, #1
 8007b5e:	615e      	str	r6, [r3, #20]
 8007b60:	6125      	str	r5, [r4, #16]
 8007b62:	4620      	mov	r0, r4
 8007b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b68:	08008f67 	.word	0x08008f67
 8007b6c:	08008f78 	.word	0x08008f78

08007b70 <__hi0bits>:
 8007b70:	0c03      	lsrs	r3, r0, #16
 8007b72:	041b      	lsls	r3, r3, #16
 8007b74:	b9d3      	cbnz	r3, 8007bac <__hi0bits+0x3c>
 8007b76:	0400      	lsls	r0, r0, #16
 8007b78:	2310      	movs	r3, #16
 8007b7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b7e:	bf04      	itt	eq
 8007b80:	0200      	lsleq	r0, r0, #8
 8007b82:	3308      	addeq	r3, #8
 8007b84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b88:	bf04      	itt	eq
 8007b8a:	0100      	lsleq	r0, r0, #4
 8007b8c:	3304      	addeq	r3, #4
 8007b8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b92:	bf04      	itt	eq
 8007b94:	0080      	lsleq	r0, r0, #2
 8007b96:	3302      	addeq	r3, #2
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	db05      	blt.n	8007ba8 <__hi0bits+0x38>
 8007b9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ba0:	f103 0301 	add.w	r3, r3, #1
 8007ba4:	bf08      	it	eq
 8007ba6:	2320      	moveq	r3, #32
 8007ba8:	4618      	mov	r0, r3
 8007baa:	4770      	bx	lr
 8007bac:	2300      	movs	r3, #0
 8007bae:	e7e4      	b.n	8007b7a <__hi0bits+0xa>

08007bb0 <__lo0bits>:
 8007bb0:	6803      	ldr	r3, [r0, #0]
 8007bb2:	f013 0207 	ands.w	r2, r3, #7
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	d00b      	beq.n	8007bd2 <__lo0bits+0x22>
 8007bba:	07da      	lsls	r2, r3, #31
 8007bbc:	d423      	bmi.n	8007c06 <__lo0bits+0x56>
 8007bbe:	0798      	lsls	r0, r3, #30
 8007bc0:	bf49      	itett	mi
 8007bc2:	085b      	lsrmi	r3, r3, #1
 8007bc4:	089b      	lsrpl	r3, r3, #2
 8007bc6:	2001      	movmi	r0, #1
 8007bc8:	600b      	strmi	r3, [r1, #0]
 8007bca:	bf5c      	itt	pl
 8007bcc:	600b      	strpl	r3, [r1, #0]
 8007bce:	2002      	movpl	r0, #2
 8007bd0:	4770      	bx	lr
 8007bd2:	b298      	uxth	r0, r3
 8007bd4:	b9a8      	cbnz	r0, 8007c02 <__lo0bits+0x52>
 8007bd6:	0c1b      	lsrs	r3, r3, #16
 8007bd8:	2010      	movs	r0, #16
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	b90a      	cbnz	r2, 8007be2 <__lo0bits+0x32>
 8007bde:	3008      	adds	r0, #8
 8007be0:	0a1b      	lsrs	r3, r3, #8
 8007be2:	071a      	lsls	r2, r3, #28
 8007be4:	bf04      	itt	eq
 8007be6:	091b      	lsreq	r3, r3, #4
 8007be8:	3004      	addeq	r0, #4
 8007bea:	079a      	lsls	r2, r3, #30
 8007bec:	bf04      	itt	eq
 8007bee:	089b      	lsreq	r3, r3, #2
 8007bf0:	3002      	addeq	r0, #2
 8007bf2:	07da      	lsls	r2, r3, #31
 8007bf4:	d403      	bmi.n	8007bfe <__lo0bits+0x4e>
 8007bf6:	085b      	lsrs	r3, r3, #1
 8007bf8:	f100 0001 	add.w	r0, r0, #1
 8007bfc:	d005      	beq.n	8007c0a <__lo0bits+0x5a>
 8007bfe:	600b      	str	r3, [r1, #0]
 8007c00:	4770      	bx	lr
 8007c02:	4610      	mov	r0, r2
 8007c04:	e7e9      	b.n	8007bda <__lo0bits+0x2a>
 8007c06:	2000      	movs	r0, #0
 8007c08:	4770      	bx	lr
 8007c0a:	2020      	movs	r0, #32
 8007c0c:	4770      	bx	lr
	...

08007c10 <__i2b>:
 8007c10:	b510      	push	{r4, lr}
 8007c12:	460c      	mov	r4, r1
 8007c14:	2101      	movs	r1, #1
 8007c16:	f7ff ff03 	bl	8007a20 <_Balloc>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	b928      	cbnz	r0, 8007c2a <__i2b+0x1a>
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <__i2b+0x24>)
 8007c20:	4805      	ldr	r0, [pc, #20]	; (8007c38 <__i2b+0x28>)
 8007c22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c26:	f000 fb85 	bl	8008334 <__assert_func>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	6144      	str	r4, [r0, #20]
 8007c2e:	6103      	str	r3, [r0, #16]
 8007c30:	bd10      	pop	{r4, pc}
 8007c32:	bf00      	nop
 8007c34:	08008f67 	.word	0x08008f67
 8007c38:	08008f78 	.word	0x08008f78

08007c3c <__multiply>:
 8007c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c40:	4691      	mov	r9, r2
 8007c42:	690a      	ldr	r2, [r1, #16]
 8007c44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	bfb8      	it	lt
 8007c4c:	460b      	movlt	r3, r1
 8007c4e:	460c      	mov	r4, r1
 8007c50:	bfbc      	itt	lt
 8007c52:	464c      	movlt	r4, r9
 8007c54:	4699      	movlt	r9, r3
 8007c56:	6927      	ldr	r7, [r4, #16]
 8007c58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	6861      	ldr	r1, [r4, #4]
 8007c60:	eb07 060a 	add.w	r6, r7, sl
 8007c64:	42b3      	cmp	r3, r6
 8007c66:	b085      	sub	sp, #20
 8007c68:	bfb8      	it	lt
 8007c6a:	3101      	addlt	r1, #1
 8007c6c:	f7ff fed8 	bl	8007a20 <_Balloc>
 8007c70:	b930      	cbnz	r0, 8007c80 <__multiply+0x44>
 8007c72:	4602      	mov	r2, r0
 8007c74:	4b44      	ldr	r3, [pc, #272]	; (8007d88 <__multiply+0x14c>)
 8007c76:	4845      	ldr	r0, [pc, #276]	; (8007d8c <__multiply+0x150>)
 8007c78:	f240 115d 	movw	r1, #349	; 0x15d
 8007c7c:	f000 fb5a 	bl	8008334 <__assert_func>
 8007c80:	f100 0514 	add.w	r5, r0, #20
 8007c84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c88:	462b      	mov	r3, r5
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4543      	cmp	r3, r8
 8007c8e:	d321      	bcc.n	8007cd4 <__multiply+0x98>
 8007c90:	f104 0314 	add.w	r3, r4, #20
 8007c94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c98:	f109 0314 	add.w	r3, r9, #20
 8007c9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ca0:	9202      	str	r2, [sp, #8]
 8007ca2:	1b3a      	subs	r2, r7, r4
 8007ca4:	3a15      	subs	r2, #21
 8007ca6:	f022 0203 	bic.w	r2, r2, #3
 8007caa:	3204      	adds	r2, #4
 8007cac:	f104 0115 	add.w	r1, r4, #21
 8007cb0:	428f      	cmp	r7, r1
 8007cb2:	bf38      	it	cc
 8007cb4:	2204      	movcc	r2, #4
 8007cb6:	9201      	str	r2, [sp, #4]
 8007cb8:	9a02      	ldr	r2, [sp, #8]
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d80c      	bhi.n	8007cda <__multiply+0x9e>
 8007cc0:	2e00      	cmp	r6, #0
 8007cc2:	dd03      	ble.n	8007ccc <__multiply+0x90>
 8007cc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d05a      	beq.n	8007d82 <__multiply+0x146>
 8007ccc:	6106      	str	r6, [r0, #16]
 8007cce:	b005      	add	sp, #20
 8007cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd4:	f843 2b04 	str.w	r2, [r3], #4
 8007cd8:	e7d8      	b.n	8007c8c <__multiply+0x50>
 8007cda:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cde:	f1ba 0f00 	cmp.w	sl, #0
 8007ce2:	d024      	beq.n	8007d2e <__multiply+0xf2>
 8007ce4:	f104 0e14 	add.w	lr, r4, #20
 8007ce8:	46a9      	mov	r9, r5
 8007cea:	f04f 0c00 	mov.w	ip, #0
 8007cee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007cf2:	f8d9 1000 	ldr.w	r1, [r9]
 8007cf6:	fa1f fb82 	uxth.w	fp, r2
 8007cfa:	b289      	uxth	r1, r1
 8007cfc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d04:	f8d9 2000 	ldr.w	r2, [r9]
 8007d08:	4461      	add	r1, ip
 8007d0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d0e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d16:	b289      	uxth	r1, r1
 8007d18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d1c:	4577      	cmp	r7, lr
 8007d1e:	f849 1b04 	str.w	r1, [r9], #4
 8007d22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d26:	d8e2      	bhi.n	8007cee <__multiply+0xb2>
 8007d28:	9a01      	ldr	r2, [sp, #4]
 8007d2a:	f845 c002 	str.w	ip, [r5, r2]
 8007d2e:	9a03      	ldr	r2, [sp, #12]
 8007d30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d34:	3304      	adds	r3, #4
 8007d36:	f1b9 0f00 	cmp.w	r9, #0
 8007d3a:	d020      	beq.n	8007d7e <__multiply+0x142>
 8007d3c:	6829      	ldr	r1, [r5, #0]
 8007d3e:	f104 0c14 	add.w	ip, r4, #20
 8007d42:	46ae      	mov	lr, r5
 8007d44:	f04f 0a00 	mov.w	sl, #0
 8007d48:	f8bc b000 	ldrh.w	fp, [ip]
 8007d4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d50:	fb09 220b 	mla	r2, r9, fp, r2
 8007d54:	4492      	add	sl, r2
 8007d56:	b289      	uxth	r1, r1
 8007d58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d5c:	f84e 1b04 	str.w	r1, [lr], #4
 8007d60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d64:	f8be 1000 	ldrh.w	r1, [lr]
 8007d68:	0c12      	lsrs	r2, r2, #16
 8007d6a:	fb09 1102 	mla	r1, r9, r2, r1
 8007d6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d72:	4567      	cmp	r7, ip
 8007d74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d78:	d8e6      	bhi.n	8007d48 <__multiply+0x10c>
 8007d7a:	9a01      	ldr	r2, [sp, #4]
 8007d7c:	50a9      	str	r1, [r5, r2]
 8007d7e:	3504      	adds	r5, #4
 8007d80:	e79a      	b.n	8007cb8 <__multiply+0x7c>
 8007d82:	3e01      	subs	r6, #1
 8007d84:	e79c      	b.n	8007cc0 <__multiply+0x84>
 8007d86:	bf00      	nop
 8007d88:	08008f67 	.word	0x08008f67
 8007d8c:	08008f78 	.word	0x08008f78

08007d90 <__pow5mult>:
 8007d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d94:	4615      	mov	r5, r2
 8007d96:	f012 0203 	ands.w	r2, r2, #3
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	460f      	mov	r7, r1
 8007d9e:	d007      	beq.n	8007db0 <__pow5mult+0x20>
 8007da0:	4c25      	ldr	r4, [pc, #148]	; (8007e38 <__pow5mult+0xa8>)
 8007da2:	3a01      	subs	r2, #1
 8007da4:	2300      	movs	r3, #0
 8007da6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007daa:	f7ff fe9b 	bl	8007ae4 <__multadd>
 8007dae:	4607      	mov	r7, r0
 8007db0:	10ad      	asrs	r5, r5, #2
 8007db2:	d03d      	beq.n	8007e30 <__pow5mult+0xa0>
 8007db4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007db6:	b97c      	cbnz	r4, 8007dd8 <__pow5mult+0x48>
 8007db8:	2010      	movs	r0, #16
 8007dba:	f7ff fe1b 	bl	80079f4 <malloc>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	6270      	str	r0, [r6, #36]	; 0x24
 8007dc2:	b928      	cbnz	r0, 8007dd0 <__pow5mult+0x40>
 8007dc4:	4b1d      	ldr	r3, [pc, #116]	; (8007e3c <__pow5mult+0xac>)
 8007dc6:	481e      	ldr	r0, [pc, #120]	; (8007e40 <__pow5mult+0xb0>)
 8007dc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007dcc:	f000 fab2 	bl	8008334 <__assert_func>
 8007dd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dd4:	6004      	str	r4, [r0, #0]
 8007dd6:	60c4      	str	r4, [r0, #12]
 8007dd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ddc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007de0:	b94c      	cbnz	r4, 8007df6 <__pow5mult+0x66>
 8007de2:	f240 2171 	movw	r1, #625	; 0x271
 8007de6:	4630      	mov	r0, r6
 8007de8:	f7ff ff12 	bl	8007c10 <__i2b>
 8007dec:	2300      	movs	r3, #0
 8007dee:	f8c8 0008 	str.w	r0, [r8, #8]
 8007df2:	4604      	mov	r4, r0
 8007df4:	6003      	str	r3, [r0, #0]
 8007df6:	f04f 0900 	mov.w	r9, #0
 8007dfa:	07eb      	lsls	r3, r5, #31
 8007dfc:	d50a      	bpl.n	8007e14 <__pow5mult+0x84>
 8007dfe:	4639      	mov	r1, r7
 8007e00:	4622      	mov	r2, r4
 8007e02:	4630      	mov	r0, r6
 8007e04:	f7ff ff1a 	bl	8007c3c <__multiply>
 8007e08:	4639      	mov	r1, r7
 8007e0a:	4680      	mov	r8, r0
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f7ff fe47 	bl	8007aa0 <_Bfree>
 8007e12:	4647      	mov	r7, r8
 8007e14:	106d      	asrs	r5, r5, #1
 8007e16:	d00b      	beq.n	8007e30 <__pow5mult+0xa0>
 8007e18:	6820      	ldr	r0, [r4, #0]
 8007e1a:	b938      	cbnz	r0, 8007e2c <__pow5mult+0x9c>
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4630      	mov	r0, r6
 8007e22:	f7ff ff0b 	bl	8007c3c <__multiply>
 8007e26:	6020      	str	r0, [r4, #0]
 8007e28:	f8c0 9000 	str.w	r9, [r0]
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	e7e4      	b.n	8007dfa <__pow5mult+0x6a>
 8007e30:	4638      	mov	r0, r7
 8007e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e36:	bf00      	nop
 8007e38:	080090c8 	.word	0x080090c8
 8007e3c:	08008ef5 	.word	0x08008ef5
 8007e40:	08008f78 	.word	0x08008f78

08007e44 <__lshift>:
 8007e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	460c      	mov	r4, r1
 8007e4a:	6849      	ldr	r1, [r1, #4]
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	4607      	mov	r7, r0
 8007e56:	4691      	mov	r9, r2
 8007e58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e5c:	f108 0601 	add.w	r6, r8, #1
 8007e60:	42b3      	cmp	r3, r6
 8007e62:	db0b      	blt.n	8007e7c <__lshift+0x38>
 8007e64:	4638      	mov	r0, r7
 8007e66:	f7ff fddb 	bl	8007a20 <_Balloc>
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	b948      	cbnz	r0, 8007e82 <__lshift+0x3e>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	4b2a      	ldr	r3, [pc, #168]	; (8007f1c <__lshift+0xd8>)
 8007e72:	482b      	ldr	r0, [pc, #172]	; (8007f20 <__lshift+0xdc>)
 8007e74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e78:	f000 fa5c 	bl	8008334 <__assert_func>
 8007e7c:	3101      	adds	r1, #1
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	e7ee      	b.n	8007e60 <__lshift+0x1c>
 8007e82:	2300      	movs	r3, #0
 8007e84:	f100 0114 	add.w	r1, r0, #20
 8007e88:	f100 0210 	add.w	r2, r0, #16
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	4553      	cmp	r3, sl
 8007e90:	db37      	blt.n	8007f02 <__lshift+0xbe>
 8007e92:	6920      	ldr	r0, [r4, #16]
 8007e94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e98:	f104 0314 	add.w	r3, r4, #20
 8007e9c:	f019 091f 	ands.w	r9, r9, #31
 8007ea0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ea4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ea8:	d02f      	beq.n	8007f0a <__lshift+0xc6>
 8007eaa:	f1c9 0e20 	rsb	lr, r9, #32
 8007eae:	468a      	mov	sl, r1
 8007eb0:	f04f 0c00 	mov.w	ip, #0
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	fa02 f209 	lsl.w	r2, r2, r9
 8007eba:	ea42 020c 	orr.w	r2, r2, ip
 8007ebe:	f84a 2b04 	str.w	r2, [sl], #4
 8007ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec6:	4298      	cmp	r0, r3
 8007ec8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007ecc:	d8f2      	bhi.n	8007eb4 <__lshift+0x70>
 8007ece:	1b03      	subs	r3, r0, r4
 8007ed0:	3b15      	subs	r3, #21
 8007ed2:	f023 0303 	bic.w	r3, r3, #3
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	f104 0215 	add.w	r2, r4, #21
 8007edc:	4290      	cmp	r0, r2
 8007ede:	bf38      	it	cc
 8007ee0:	2304      	movcc	r3, #4
 8007ee2:	f841 c003 	str.w	ip, [r1, r3]
 8007ee6:	f1bc 0f00 	cmp.w	ip, #0
 8007eea:	d001      	beq.n	8007ef0 <__lshift+0xac>
 8007eec:	f108 0602 	add.w	r6, r8, #2
 8007ef0:	3e01      	subs	r6, #1
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	612e      	str	r6, [r5, #16]
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	f7ff fdd2 	bl	8007aa0 <_Bfree>
 8007efc:	4628      	mov	r0, r5
 8007efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f02:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f06:	3301      	adds	r3, #1
 8007f08:	e7c1      	b.n	8007e8e <__lshift+0x4a>
 8007f0a:	3904      	subs	r1, #4
 8007f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f10:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f14:	4298      	cmp	r0, r3
 8007f16:	d8f9      	bhi.n	8007f0c <__lshift+0xc8>
 8007f18:	e7ea      	b.n	8007ef0 <__lshift+0xac>
 8007f1a:	bf00      	nop
 8007f1c:	08008f67 	.word	0x08008f67
 8007f20:	08008f78 	.word	0x08008f78

08007f24 <__mcmp>:
 8007f24:	b530      	push	{r4, r5, lr}
 8007f26:	6902      	ldr	r2, [r0, #16]
 8007f28:	690c      	ldr	r4, [r1, #16]
 8007f2a:	1b12      	subs	r2, r2, r4
 8007f2c:	d10e      	bne.n	8007f4c <__mcmp+0x28>
 8007f2e:	f100 0314 	add.w	r3, r0, #20
 8007f32:	3114      	adds	r1, #20
 8007f34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f44:	42a5      	cmp	r5, r4
 8007f46:	d003      	beq.n	8007f50 <__mcmp+0x2c>
 8007f48:	d305      	bcc.n	8007f56 <__mcmp+0x32>
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	bd30      	pop	{r4, r5, pc}
 8007f50:	4283      	cmp	r3, r0
 8007f52:	d3f3      	bcc.n	8007f3c <__mcmp+0x18>
 8007f54:	e7fa      	b.n	8007f4c <__mcmp+0x28>
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5a:	e7f7      	b.n	8007f4c <__mcmp+0x28>

08007f5c <__mdiff>:
 8007f5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f60:	460c      	mov	r4, r1
 8007f62:	4606      	mov	r6, r0
 8007f64:	4611      	mov	r1, r2
 8007f66:	4620      	mov	r0, r4
 8007f68:	4690      	mov	r8, r2
 8007f6a:	f7ff ffdb 	bl	8007f24 <__mcmp>
 8007f6e:	1e05      	subs	r5, r0, #0
 8007f70:	d110      	bne.n	8007f94 <__mdiff+0x38>
 8007f72:	4629      	mov	r1, r5
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7ff fd53 	bl	8007a20 <_Balloc>
 8007f7a:	b930      	cbnz	r0, 8007f8a <__mdiff+0x2e>
 8007f7c:	4b3a      	ldr	r3, [pc, #232]	; (8008068 <__mdiff+0x10c>)
 8007f7e:	4602      	mov	r2, r0
 8007f80:	f240 2132 	movw	r1, #562	; 0x232
 8007f84:	4839      	ldr	r0, [pc, #228]	; (800806c <__mdiff+0x110>)
 8007f86:	f000 f9d5 	bl	8008334 <__assert_func>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f94:	bfa4      	itt	ge
 8007f96:	4643      	movge	r3, r8
 8007f98:	46a0      	movge	r8, r4
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fa0:	bfa6      	itte	ge
 8007fa2:	461c      	movge	r4, r3
 8007fa4:	2500      	movge	r5, #0
 8007fa6:	2501      	movlt	r5, #1
 8007fa8:	f7ff fd3a 	bl	8007a20 <_Balloc>
 8007fac:	b920      	cbnz	r0, 8007fb8 <__mdiff+0x5c>
 8007fae:	4b2e      	ldr	r3, [pc, #184]	; (8008068 <__mdiff+0x10c>)
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fb6:	e7e5      	b.n	8007f84 <__mdiff+0x28>
 8007fb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fbc:	6926      	ldr	r6, [r4, #16]
 8007fbe:	60c5      	str	r5, [r0, #12]
 8007fc0:	f104 0914 	add.w	r9, r4, #20
 8007fc4:	f108 0514 	add.w	r5, r8, #20
 8007fc8:	f100 0e14 	add.w	lr, r0, #20
 8007fcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007fd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fd4:	f108 0210 	add.w	r2, r8, #16
 8007fd8:	46f2      	mov	sl, lr
 8007fda:	2100      	movs	r1, #0
 8007fdc:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fe0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007fe4:	fa1f f883 	uxth.w	r8, r3
 8007fe8:	fa11 f18b 	uxtah	r1, r1, fp
 8007fec:	0c1b      	lsrs	r3, r3, #16
 8007fee:	eba1 0808 	sub.w	r8, r1, r8
 8007ff2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007ff6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ffa:	fa1f f888 	uxth.w	r8, r8
 8007ffe:	1419      	asrs	r1, r3, #16
 8008000:	454e      	cmp	r6, r9
 8008002:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008006:	f84a 3b04 	str.w	r3, [sl], #4
 800800a:	d8e7      	bhi.n	8007fdc <__mdiff+0x80>
 800800c:	1b33      	subs	r3, r6, r4
 800800e:	3b15      	subs	r3, #21
 8008010:	f023 0303 	bic.w	r3, r3, #3
 8008014:	3304      	adds	r3, #4
 8008016:	3415      	adds	r4, #21
 8008018:	42a6      	cmp	r6, r4
 800801a:	bf38      	it	cc
 800801c:	2304      	movcc	r3, #4
 800801e:	441d      	add	r5, r3
 8008020:	4473      	add	r3, lr
 8008022:	469e      	mov	lr, r3
 8008024:	462e      	mov	r6, r5
 8008026:	4566      	cmp	r6, ip
 8008028:	d30e      	bcc.n	8008048 <__mdiff+0xec>
 800802a:	f10c 0203 	add.w	r2, ip, #3
 800802e:	1b52      	subs	r2, r2, r5
 8008030:	f022 0203 	bic.w	r2, r2, #3
 8008034:	3d03      	subs	r5, #3
 8008036:	45ac      	cmp	ip, r5
 8008038:	bf38      	it	cc
 800803a:	2200      	movcc	r2, #0
 800803c:	441a      	add	r2, r3
 800803e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008042:	b17b      	cbz	r3, 8008064 <__mdiff+0x108>
 8008044:	6107      	str	r7, [r0, #16]
 8008046:	e7a3      	b.n	8007f90 <__mdiff+0x34>
 8008048:	f856 8b04 	ldr.w	r8, [r6], #4
 800804c:	fa11 f288 	uxtah	r2, r1, r8
 8008050:	1414      	asrs	r4, r2, #16
 8008052:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008056:	b292      	uxth	r2, r2
 8008058:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800805c:	f84e 2b04 	str.w	r2, [lr], #4
 8008060:	1421      	asrs	r1, r4, #16
 8008062:	e7e0      	b.n	8008026 <__mdiff+0xca>
 8008064:	3f01      	subs	r7, #1
 8008066:	e7ea      	b.n	800803e <__mdiff+0xe2>
 8008068:	08008f67 	.word	0x08008f67
 800806c:	08008f78 	.word	0x08008f78

08008070 <__d2b>:
 8008070:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008074:	4689      	mov	r9, r1
 8008076:	2101      	movs	r1, #1
 8008078:	ec57 6b10 	vmov	r6, r7, d0
 800807c:	4690      	mov	r8, r2
 800807e:	f7ff fccf 	bl	8007a20 <_Balloc>
 8008082:	4604      	mov	r4, r0
 8008084:	b930      	cbnz	r0, 8008094 <__d2b+0x24>
 8008086:	4602      	mov	r2, r0
 8008088:	4b25      	ldr	r3, [pc, #148]	; (8008120 <__d2b+0xb0>)
 800808a:	4826      	ldr	r0, [pc, #152]	; (8008124 <__d2b+0xb4>)
 800808c:	f240 310a 	movw	r1, #778	; 0x30a
 8008090:	f000 f950 	bl	8008334 <__assert_func>
 8008094:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008098:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800809c:	bb35      	cbnz	r5, 80080ec <__d2b+0x7c>
 800809e:	2e00      	cmp	r6, #0
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	d028      	beq.n	80080f6 <__d2b+0x86>
 80080a4:	4668      	mov	r0, sp
 80080a6:	9600      	str	r6, [sp, #0]
 80080a8:	f7ff fd82 	bl	8007bb0 <__lo0bits>
 80080ac:	9900      	ldr	r1, [sp, #0]
 80080ae:	b300      	cbz	r0, 80080f2 <__d2b+0x82>
 80080b0:	9a01      	ldr	r2, [sp, #4]
 80080b2:	f1c0 0320 	rsb	r3, r0, #32
 80080b6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ba:	430b      	orrs	r3, r1
 80080bc:	40c2      	lsrs	r2, r0
 80080be:	6163      	str	r3, [r4, #20]
 80080c0:	9201      	str	r2, [sp, #4]
 80080c2:	9b01      	ldr	r3, [sp, #4]
 80080c4:	61a3      	str	r3, [r4, #24]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bf14      	ite	ne
 80080ca:	2202      	movne	r2, #2
 80080cc:	2201      	moveq	r2, #1
 80080ce:	6122      	str	r2, [r4, #16]
 80080d0:	b1d5      	cbz	r5, 8008108 <__d2b+0x98>
 80080d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080d6:	4405      	add	r5, r0
 80080d8:	f8c9 5000 	str.w	r5, [r9]
 80080dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080e0:	f8c8 0000 	str.w	r0, [r8]
 80080e4:	4620      	mov	r0, r4
 80080e6:	b003      	add	sp, #12
 80080e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080f0:	e7d5      	b.n	800809e <__d2b+0x2e>
 80080f2:	6161      	str	r1, [r4, #20]
 80080f4:	e7e5      	b.n	80080c2 <__d2b+0x52>
 80080f6:	a801      	add	r0, sp, #4
 80080f8:	f7ff fd5a 	bl	8007bb0 <__lo0bits>
 80080fc:	9b01      	ldr	r3, [sp, #4]
 80080fe:	6163      	str	r3, [r4, #20]
 8008100:	2201      	movs	r2, #1
 8008102:	6122      	str	r2, [r4, #16]
 8008104:	3020      	adds	r0, #32
 8008106:	e7e3      	b.n	80080d0 <__d2b+0x60>
 8008108:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800810c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008110:	f8c9 0000 	str.w	r0, [r9]
 8008114:	6918      	ldr	r0, [r3, #16]
 8008116:	f7ff fd2b 	bl	8007b70 <__hi0bits>
 800811a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800811e:	e7df      	b.n	80080e0 <__d2b+0x70>
 8008120:	08008f67 	.word	0x08008f67
 8008124:	08008f78 	.word	0x08008f78

08008128 <_calloc_r>:
 8008128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800812a:	fba1 2402 	umull	r2, r4, r1, r2
 800812e:	b94c      	cbnz	r4, 8008144 <_calloc_r+0x1c>
 8008130:	4611      	mov	r1, r2
 8008132:	9201      	str	r2, [sp, #4]
 8008134:	f000 f87a 	bl	800822c <_malloc_r>
 8008138:	9a01      	ldr	r2, [sp, #4]
 800813a:	4605      	mov	r5, r0
 800813c:	b930      	cbnz	r0, 800814c <_calloc_r+0x24>
 800813e:	4628      	mov	r0, r5
 8008140:	b003      	add	sp, #12
 8008142:	bd30      	pop	{r4, r5, pc}
 8008144:	220c      	movs	r2, #12
 8008146:	6002      	str	r2, [r0, #0]
 8008148:	2500      	movs	r5, #0
 800814a:	e7f8      	b.n	800813e <_calloc_r+0x16>
 800814c:	4621      	mov	r1, r4
 800814e:	f7fe f961 	bl	8006414 <memset>
 8008152:	e7f4      	b.n	800813e <_calloc_r+0x16>

08008154 <_free_r>:
 8008154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008156:	2900      	cmp	r1, #0
 8008158:	d044      	beq.n	80081e4 <_free_r+0x90>
 800815a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800815e:	9001      	str	r0, [sp, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f1a1 0404 	sub.w	r4, r1, #4
 8008166:	bfb8      	it	lt
 8008168:	18e4      	addlt	r4, r4, r3
 800816a:	f000 f925 	bl	80083b8 <__malloc_lock>
 800816e:	4a1e      	ldr	r2, [pc, #120]	; (80081e8 <_free_r+0x94>)
 8008170:	9801      	ldr	r0, [sp, #4]
 8008172:	6813      	ldr	r3, [r2, #0]
 8008174:	b933      	cbnz	r3, 8008184 <_free_r+0x30>
 8008176:	6063      	str	r3, [r4, #4]
 8008178:	6014      	str	r4, [r2, #0]
 800817a:	b003      	add	sp, #12
 800817c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008180:	f000 b920 	b.w	80083c4 <__malloc_unlock>
 8008184:	42a3      	cmp	r3, r4
 8008186:	d908      	bls.n	800819a <_free_r+0x46>
 8008188:	6825      	ldr	r5, [r4, #0]
 800818a:	1961      	adds	r1, r4, r5
 800818c:	428b      	cmp	r3, r1
 800818e:	bf01      	itttt	eq
 8008190:	6819      	ldreq	r1, [r3, #0]
 8008192:	685b      	ldreq	r3, [r3, #4]
 8008194:	1949      	addeq	r1, r1, r5
 8008196:	6021      	streq	r1, [r4, #0]
 8008198:	e7ed      	b.n	8008176 <_free_r+0x22>
 800819a:	461a      	mov	r2, r3
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	b10b      	cbz	r3, 80081a4 <_free_r+0x50>
 80081a0:	42a3      	cmp	r3, r4
 80081a2:	d9fa      	bls.n	800819a <_free_r+0x46>
 80081a4:	6811      	ldr	r1, [r2, #0]
 80081a6:	1855      	adds	r5, r2, r1
 80081a8:	42a5      	cmp	r5, r4
 80081aa:	d10b      	bne.n	80081c4 <_free_r+0x70>
 80081ac:	6824      	ldr	r4, [r4, #0]
 80081ae:	4421      	add	r1, r4
 80081b0:	1854      	adds	r4, r2, r1
 80081b2:	42a3      	cmp	r3, r4
 80081b4:	6011      	str	r1, [r2, #0]
 80081b6:	d1e0      	bne.n	800817a <_free_r+0x26>
 80081b8:	681c      	ldr	r4, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	6053      	str	r3, [r2, #4]
 80081be:	4421      	add	r1, r4
 80081c0:	6011      	str	r1, [r2, #0]
 80081c2:	e7da      	b.n	800817a <_free_r+0x26>
 80081c4:	d902      	bls.n	80081cc <_free_r+0x78>
 80081c6:	230c      	movs	r3, #12
 80081c8:	6003      	str	r3, [r0, #0]
 80081ca:	e7d6      	b.n	800817a <_free_r+0x26>
 80081cc:	6825      	ldr	r5, [r4, #0]
 80081ce:	1961      	adds	r1, r4, r5
 80081d0:	428b      	cmp	r3, r1
 80081d2:	bf04      	itt	eq
 80081d4:	6819      	ldreq	r1, [r3, #0]
 80081d6:	685b      	ldreq	r3, [r3, #4]
 80081d8:	6063      	str	r3, [r4, #4]
 80081da:	bf04      	itt	eq
 80081dc:	1949      	addeq	r1, r1, r5
 80081de:	6021      	streq	r1, [r4, #0]
 80081e0:	6054      	str	r4, [r2, #4]
 80081e2:	e7ca      	b.n	800817a <_free_r+0x26>
 80081e4:	b003      	add	sp, #12
 80081e6:	bd30      	pop	{r4, r5, pc}
 80081e8:	20000480 	.word	0x20000480

080081ec <sbrk_aligned>:
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	4e0e      	ldr	r6, [pc, #56]	; (8008228 <sbrk_aligned+0x3c>)
 80081f0:	460c      	mov	r4, r1
 80081f2:	6831      	ldr	r1, [r6, #0]
 80081f4:	4605      	mov	r5, r0
 80081f6:	b911      	cbnz	r1, 80081fe <sbrk_aligned+0x12>
 80081f8:	f000 f88c 	bl	8008314 <_sbrk_r>
 80081fc:	6030      	str	r0, [r6, #0]
 80081fe:	4621      	mov	r1, r4
 8008200:	4628      	mov	r0, r5
 8008202:	f000 f887 	bl	8008314 <_sbrk_r>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	d00a      	beq.n	8008220 <sbrk_aligned+0x34>
 800820a:	1cc4      	adds	r4, r0, #3
 800820c:	f024 0403 	bic.w	r4, r4, #3
 8008210:	42a0      	cmp	r0, r4
 8008212:	d007      	beq.n	8008224 <sbrk_aligned+0x38>
 8008214:	1a21      	subs	r1, r4, r0
 8008216:	4628      	mov	r0, r5
 8008218:	f000 f87c 	bl	8008314 <_sbrk_r>
 800821c:	3001      	adds	r0, #1
 800821e:	d101      	bne.n	8008224 <sbrk_aligned+0x38>
 8008220:	f04f 34ff 	mov.w	r4, #4294967295
 8008224:	4620      	mov	r0, r4
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	20000484 	.word	0x20000484

0800822c <_malloc_r>:
 800822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008230:	1ccd      	adds	r5, r1, #3
 8008232:	f025 0503 	bic.w	r5, r5, #3
 8008236:	3508      	adds	r5, #8
 8008238:	2d0c      	cmp	r5, #12
 800823a:	bf38      	it	cc
 800823c:	250c      	movcc	r5, #12
 800823e:	2d00      	cmp	r5, #0
 8008240:	4607      	mov	r7, r0
 8008242:	db01      	blt.n	8008248 <_malloc_r+0x1c>
 8008244:	42a9      	cmp	r1, r5
 8008246:	d905      	bls.n	8008254 <_malloc_r+0x28>
 8008248:	230c      	movs	r3, #12
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	2600      	movs	r6, #0
 800824e:	4630      	mov	r0, r6
 8008250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008254:	4e2e      	ldr	r6, [pc, #184]	; (8008310 <_malloc_r+0xe4>)
 8008256:	f000 f8af 	bl	80083b8 <__malloc_lock>
 800825a:	6833      	ldr	r3, [r6, #0]
 800825c:	461c      	mov	r4, r3
 800825e:	bb34      	cbnz	r4, 80082ae <_malloc_r+0x82>
 8008260:	4629      	mov	r1, r5
 8008262:	4638      	mov	r0, r7
 8008264:	f7ff ffc2 	bl	80081ec <sbrk_aligned>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	4604      	mov	r4, r0
 800826c:	d14d      	bne.n	800830a <_malloc_r+0xde>
 800826e:	6834      	ldr	r4, [r6, #0]
 8008270:	4626      	mov	r6, r4
 8008272:	2e00      	cmp	r6, #0
 8008274:	d140      	bne.n	80082f8 <_malloc_r+0xcc>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	4631      	mov	r1, r6
 800827a:	4638      	mov	r0, r7
 800827c:	eb04 0803 	add.w	r8, r4, r3
 8008280:	f000 f848 	bl	8008314 <_sbrk_r>
 8008284:	4580      	cmp	r8, r0
 8008286:	d13a      	bne.n	80082fe <_malloc_r+0xd2>
 8008288:	6821      	ldr	r1, [r4, #0]
 800828a:	3503      	adds	r5, #3
 800828c:	1a6d      	subs	r5, r5, r1
 800828e:	f025 0503 	bic.w	r5, r5, #3
 8008292:	3508      	adds	r5, #8
 8008294:	2d0c      	cmp	r5, #12
 8008296:	bf38      	it	cc
 8008298:	250c      	movcc	r5, #12
 800829a:	4629      	mov	r1, r5
 800829c:	4638      	mov	r0, r7
 800829e:	f7ff ffa5 	bl	80081ec <sbrk_aligned>
 80082a2:	3001      	adds	r0, #1
 80082a4:	d02b      	beq.n	80082fe <_malloc_r+0xd2>
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	442b      	add	r3, r5
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	e00e      	b.n	80082cc <_malloc_r+0xa0>
 80082ae:	6822      	ldr	r2, [r4, #0]
 80082b0:	1b52      	subs	r2, r2, r5
 80082b2:	d41e      	bmi.n	80082f2 <_malloc_r+0xc6>
 80082b4:	2a0b      	cmp	r2, #11
 80082b6:	d916      	bls.n	80082e6 <_malloc_r+0xba>
 80082b8:	1961      	adds	r1, r4, r5
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	6025      	str	r5, [r4, #0]
 80082be:	bf18      	it	ne
 80082c0:	6059      	strne	r1, [r3, #4]
 80082c2:	6863      	ldr	r3, [r4, #4]
 80082c4:	bf08      	it	eq
 80082c6:	6031      	streq	r1, [r6, #0]
 80082c8:	5162      	str	r2, [r4, r5]
 80082ca:	604b      	str	r3, [r1, #4]
 80082cc:	4638      	mov	r0, r7
 80082ce:	f104 060b 	add.w	r6, r4, #11
 80082d2:	f000 f877 	bl	80083c4 <__malloc_unlock>
 80082d6:	f026 0607 	bic.w	r6, r6, #7
 80082da:	1d23      	adds	r3, r4, #4
 80082dc:	1af2      	subs	r2, r6, r3
 80082de:	d0b6      	beq.n	800824e <_malloc_r+0x22>
 80082e0:	1b9b      	subs	r3, r3, r6
 80082e2:	50a3      	str	r3, [r4, r2]
 80082e4:	e7b3      	b.n	800824e <_malloc_r+0x22>
 80082e6:	6862      	ldr	r2, [r4, #4]
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	bf0c      	ite	eq
 80082ec:	6032      	streq	r2, [r6, #0]
 80082ee:	605a      	strne	r2, [r3, #4]
 80082f0:	e7ec      	b.n	80082cc <_malloc_r+0xa0>
 80082f2:	4623      	mov	r3, r4
 80082f4:	6864      	ldr	r4, [r4, #4]
 80082f6:	e7b2      	b.n	800825e <_malloc_r+0x32>
 80082f8:	4634      	mov	r4, r6
 80082fa:	6876      	ldr	r6, [r6, #4]
 80082fc:	e7b9      	b.n	8008272 <_malloc_r+0x46>
 80082fe:	230c      	movs	r3, #12
 8008300:	603b      	str	r3, [r7, #0]
 8008302:	4638      	mov	r0, r7
 8008304:	f000 f85e 	bl	80083c4 <__malloc_unlock>
 8008308:	e7a1      	b.n	800824e <_malloc_r+0x22>
 800830a:	6025      	str	r5, [r4, #0]
 800830c:	e7de      	b.n	80082cc <_malloc_r+0xa0>
 800830e:	bf00      	nop
 8008310:	20000480 	.word	0x20000480

08008314 <_sbrk_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d06      	ldr	r5, [pc, #24]	; (8008330 <_sbrk_r+0x1c>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	602b      	str	r3, [r5, #0]
 8008320:	f7f9 f9e2 	bl	80016e8 <_sbrk>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_sbrk_r+0x1a>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_sbrk_r+0x1a>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	20000488 	.word	0x20000488

08008334 <__assert_func>:
 8008334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008336:	4614      	mov	r4, r2
 8008338:	461a      	mov	r2, r3
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <__assert_func+0x2c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4605      	mov	r5, r0
 8008340:	68d8      	ldr	r0, [r3, #12]
 8008342:	b14c      	cbz	r4, 8008358 <__assert_func+0x24>
 8008344:	4b07      	ldr	r3, [pc, #28]	; (8008364 <__assert_func+0x30>)
 8008346:	9100      	str	r1, [sp, #0]
 8008348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800834c:	4906      	ldr	r1, [pc, #24]	; (8008368 <__assert_func+0x34>)
 800834e:	462b      	mov	r3, r5
 8008350:	f000 f80e 	bl	8008370 <fiprintf>
 8008354:	f000 fa64 	bl	8008820 <abort>
 8008358:	4b04      	ldr	r3, [pc, #16]	; (800836c <__assert_func+0x38>)
 800835a:	461c      	mov	r4, r3
 800835c:	e7f3      	b.n	8008346 <__assert_func+0x12>
 800835e:	bf00      	nop
 8008360:	2000000c 	.word	0x2000000c
 8008364:	080090d4 	.word	0x080090d4
 8008368:	080090e1 	.word	0x080090e1
 800836c:	0800910f 	.word	0x0800910f

08008370 <fiprintf>:
 8008370:	b40e      	push	{r1, r2, r3}
 8008372:	b503      	push	{r0, r1, lr}
 8008374:	4601      	mov	r1, r0
 8008376:	ab03      	add	r3, sp, #12
 8008378:	4805      	ldr	r0, [pc, #20]	; (8008390 <fiprintf+0x20>)
 800837a:	f853 2b04 	ldr.w	r2, [r3], #4
 800837e:	6800      	ldr	r0, [r0, #0]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	f000 f84f 	bl	8008424 <_vfiprintf_r>
 8008386:	b002      	add	sp, #8
 8008388:	f85d eb04 	ldr.w	lr, [sp], #4
 800838c:	b003      	add	sp, #12
 800838e:	4770      	bx	lr
 8008390:	2000000c 	.word	0x2000000c

08008394 <__ascii_mbtowc>:
 8008394:	b082      	sub	sp, #8
 8008396:	b901      	cbnz	r1, 800839a <__ascii_mbtowc+0x6>
 8008398:	a901      	add	r1, sp, #4
 800839a:	b142      	cbz	r2, 80083ae <__ascii_mbtowc+0x1a>
 800839c:	b14b      	cbz	r3, 80083b2 <__ascii_mbtowc+0x1e>
 800839e:	7813      	ldrb	r3, [r2, #0]
 80083a0:	600b      	str	r3, [r1, #0]
 80083a2:	7812      	ldrb	r2, [r2, #0]
 80083a4:	1e10      	subs	r0, r2, #0
 80083a6:	bf18      	it	ne
 80083a8:	2001      	movne	r0, #1
 80083aa:	b002      	add	sp, #8
 80083ac:	4770      	bx	lr
 80083ae:	4610      	mov	r0, r2
 80083b0:	e7fb      	b.n	80083aa <__ascii_mbtowc+0x16>
 80083b2:	f06f 0001 	mvn.w	r0, #1
 80083b6:	e7f8      	b.n	80083aa <__ascii_mbtowc+0x16>

080083b8 <__malloc_lock>:
 80083b8:	4801      	ldr	r0, [pc, #4]	; (80083c0 <__malloc_lock+0x8>)
 80083ba:	f000 bbf1 	b.w	8008ba0 <__retarget_lock_acquire_recursive>
 80083be:	bf00      	nop
 80083c0:	2000048c 	.word	0x2000048c

080083c4 <__malloc_unlock>:
 80083c4:	4801      	ldr	r0, [pc, #4]	; (80083cc <__malloc_unlock+0x8>)
 80083c6:	f000 bbec 	b.w	8008ba2 <__retarget_lock_release_recursive>
 80083ca:	bf00      	nop
 80083cc:	2000048c 	.word	0x2000048c

080083d0 <__sfputc_r>:
 80083d0:	6893      	ldr	r3, [r2, #8]
 80083d2:	3b01      	subs	r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	b410      	push	{r4}
 80083d8:	6093      	str	r3, [r2, #8]
 80083da:	da08      	bge.n	80083ee <__sfputc_r+0x1e>
 80083dc:	6994      	ldr	r4, [r2, #24]
 80083de:	42a3      	cmp	r3, r4
 80083e0:	db01      	blt.n	80083e6 <__sfputc_r+0x16>
 80083e2:	290a      	cmp	r1, #10
 80083e4:	d103      	bne.n	80083ee <__sfputc_r+0x1e>
 80083e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083ea:	f000 b94b 	b.w	8008684 <__swbuf_r>
 80083ee:	6813      	ldr	r3, [r2, #0]
 80083f0:	1c58      	adds	r0, r3, #1
 80083f2:	6010      	str	r0, [r2, #0]
 80083f4:	7019      	strb	r1, [r3, #0]
 80083f6:	4608      	mov	r0, r1
 80083f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <__sfputs_r>:
 80083fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008400:	4606      	mov	r6, r0
 8008402:	460f      	mov	r7, r1
 8008404:	4614      	mov	r4, r2
 8008406:	18d5      	adds	r5, r2, r3
 8008408:	42ac      	cmp	r4, r5
 800840a:	d101      	bne.n	8008410 <__sfputs_r+0x12>
 800840c:	2000      	movs	r0, #0
 800840e:	e007      	b.n	8008420 <__sfputs_r+0x22>
 8008410:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008414:	463a      	mov	r2, r7
 8008416:	4630      	mov	r0, r6
 8008418:	f7ff ffda 	bl	80083d0 <__sfputc_r>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d1f3      	bne.n	8008408 <__sfputs_r+0xa>
 8008420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008424 <_vfiprintf_r>:
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	460d      	mov	r5, r1
 800842a:	b09d      	sub	sp, #116	; 0x74
 800842c:	4614      	mov	r4, r2
 800842e:	4698      	mov	r8, r3
 8008430:	4606      	mov	r6, r0
 8008432:	b118      	cbz	r0, 800843c <_vfiprintf_r+0x18>
 8008434:	6983      	ldr	r3, [r0, #24]
 8008436:	b90b      	cbnz	r3, 800843c <_vfiprintf_r+0x18>
 8008438:	f000 fb14 	bl	8008a64 <__sinit>
 800843c:	4b89      	ldr	r3, [pc, #548]	; (8008664 <_vfiprintf_r+0x240>)
 800843e:	429d      	cmp	r5, r3
 8008440:	d11b      	bne.n	800847a <_vfiprintf_r+0x56>
 8008442:	6875      	ldr	r5, [r6, #4]
 8008444:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008446:	07d9      	lsls	r1, r3, #31
 8008448:	d405      	bmi.n	8008456 <_vfiprintf_r+0x32>
 800844a:	89ab      	ldrh	r3, [r5, #12]
 800844c:	059a      	lsls	r2, r3, #22
 800844e:	d402      	bmi.n	8008456 <_vfiprintf_r+0x32>
 8008450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008452:	f000 fba5 	bl	8008ba0 <__retarget_lock_acquire_recursive>
 8008456:	89ab      	ldrh	r3, [r5, #12]
 8008458:	071b      	lsls	r3, r3, #28
 800845a:	d501      	bpl.n	8008460 <_vfiprintf_r+0x3c>
 800845c:	692b      	ldr	r3, [r5, #16]
 800845e:	b9eb      	cbnz	r3, 800849c <_vfiprintf_r+0x78>
 8008460:	4629      	mov	r1, r5
 8008462:	4630      	mov	r0, r6
 8008464:	f000 f96e 	bl	8008744 <__swsetup_r>
 8008468:	b1c0      	cbz	r0, 800849c <_vfiprintf_r+0x78>
 800846a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800846c:	07dc      	lsls	r4, r3, #31
 800846e:	d50e      	bpl.n	800848e <_vfiprintf_r+0x6a>
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	b01d      	add	sp, #116	; 0x74
 8008476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847a:	4b7b      	ldr	r3, [pc, #492]	; (8008668 <_vfiprintf_r+0x244>)
 800847c:	429d      	cmp	r5, r3
 800847e:	d101      	bne.n	8008484 <_vfiprintf_r+0x60>
 8008480:	68b5      	ldr	r5, [r6, #8]
 8008482:	e7df      	b.n	8008444 <_vfiprintf_r+0x20>
 8008484:	4b79      	ldr	r3, [pc, #484]	; (800866c <_vfiprintf_r+0x248>)
 8008486:	429d      	cmp	r5, r3
 8008488:	bf08      	it	eq
 800848a:	68f5      	ldreq	r5, [r6, #12]
 800848c:	e7da      	b.n	8008444 <_vfiprintf_r+0x20>
 800848e:	89ab      	ldrh	r3, [r5, #12]
 8008490:	0598      	lsls	r0, r3, #22
 8008492:	d4ed      	bmi.n	8008470 <_vfiprintf_r+0x4c>
 8008494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008496:	f000 fb84 	bl	8008ba2 <__retarget_lock_release_recursive>
 800849a:	e7e9      	b.n	8008470 <_vfiprintf_r+0x4c>
 800849c:	2300      	movs	r3, #0
 800849e:	9309      	str	r3, [sp, #36]	; 0x24
 80084a0:	2320      	movs	r3, #32
 80084a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80084aa:	2330      	movs	r3, #48	; 0x30
 80084ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008670 <_vfiprintf_r+0x24c>
 80084b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084b4:	f04f 0901 	mov.w	r9, #1
 80084b8:	4623      	mov	r3, r4
 80084ba:	469a      	mov	sl, r3
 80084bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084c0:	b10a      	cbz	r2, 80084c6 <_vfiprintf_r+0xa2>
 80084c2:	2a25      	cmp	r2, #37	; 0x25
 80084c4:	d1f9      	bne.n	80084ba <_vfiprintf_r+0x96>
 80084c6:	ebba 0b04 	subs.w	fp, sl, r4
 80084ca:	d00b      	beq.n	80084e4 <_vfiprintf_r+0xc0>
 80084cc:	465b      	mov	r3, fp
 80084ce:	4622      	mov	r2, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	4630      	mov	r0, r6
 80084d4:	f7ff ff93 	bl	80083fe <__sfputs_r>
 80084d8:	3001      	adds	r0, #1
 80084da:	f000 80aa 	beq.w	8008632 <_vfiprintf_r+0x20e>
 80084de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084e0:	445a      	add	r2, fp
 80084e2:	9209      	str	r2, [sp, #36]	; 0x24
 80084e4:	f89a 3000 	ldrb.w	r3, [sl]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 80a2 	beq.w	8008632 <_vfiprintf_r+0x20e>
 80084ee:	2300      	movs	r3, #0
 80084f0:	f04f 32ff 	mov.w	r2, #4294967295
 80084f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084f8:	f10a 0a01 	add.w	sl, sl, #1
 80084fc:	9304      	str	r3, [sp, #16]
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008504:	931a      	str	r3, [sp, #104]	; 0x68
 8008506:	4654      	mov	r4, sl
 8008508:	2205      	movs	r2, #5
 800850a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850e:	4858      	ldr	r0, [pc, #352]	; (8008670 <_vfiprintf_r+0x24c>)
 8008510:	f7f7 fe66 	bl	80001e0 <memchr>
 8008514:	9a04      	ldr	r2, [sp, #16]
 8008516:	b9d8      	cbnz	r0, 8008550 <_vfiprintf_r+0x12c>
 8008518:	06d1      	lsls	r1, r2, #27
 800851a:	bf44      	itt	mi
 800851c:	2320      	movmi	r3, #32
 800851e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008522:	0713      	lsls	r3, r2, #28
 8008524:	bf44      	itt	mi
 8008526:	232b      	movmi	r3, #43	; 0x2b
 8008528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800852c:	f89a 3000 	ldrb.w	r3, [sl]
 8008530:	2b2a      	cmp	r3, #42	; 0x2a
 8008532:	d015      	beq.n	8008560 <_vfiprintf_r+0x13c>
 8008534:	9a07      	ldr	r2, [sp, #28]
 8008536:	4654      	mov	r4, sl
 8008538:	2000      	movs	r0, #0
 800853a:	f04f 0c0a 	mov.w	ip, #10
 800853e:	4621      	mov	r1, r4
 8008540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008544:	3b30      	subs	r3, #48	; 0x30
 8008546:	2b09      	cmp	r3, #9
 8008548:	d94e      	bls.n	80085e8 <_vfiprintf_r+0x1c4>
 800854a:	b1b0      	cbz	r0, 800857a <_vfiprintf_r+0x156>
 800854c:	9207      	str	r2, [sp, #28]
 800854e:	e014      	b.n	800857a <_vfiprintf_r+0x156>
 8008550:	eba0 0308 	sub.w	r3, r0, r8
 8008554:	fa09 f303 	lsl.w	r3, r9, r3
 8008558:	4313      	orrs	r3, r2
 800855a:	9304      	str	r3, [sp, #16]
 800855c:	46a2      	mov	sl, r4
 800855e:	e7d2      	b.n	8008506 <_vfiprintf_r+0xe2>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	1d19      	adds	r1, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	9103      	str	r1, [sp, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	bfbb      	ittet	lt
 800856c:	425b      	neglt	r3, r3
 800856e:	f042 0202 	orrlt.w	r2, r2, #2
 8008572:	9307      	strge	r3, [sp, #28]
 8008574:	9307      	strlt	r3, [sp, #28]
 8008576:	bfb8      	it	lt
 8008578:	9204      	strlt	r2, [sp, #16]
 800857a:	7823      	ldrb	r3, [r4, #0]
 800857c:	2b2e      	cmp	r3, #46	; 0x2e
 800857e:	d10c      	bne.n	800859a <_vfiprintf_r+0x176>
 8008580:	7863      	ldrb	r3, [r4, #1]
 8008582:	2b2a      	cmp	r3, #42	; 0x2a
 8008584:	d135      	bne.n	80085f2 <_vfiprintf_r+0x1ce>
 8008586:	9b03      	ldr	r3, [sp, #12]
 8008588:	1d1a      	adds	r2, r3, #4
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	9203      	str	r2, [sp, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	bfb8      	it	lt
 8008592:	f04f 33ff 	movlt.w	r3, #4294967295
 8008596:	3402      	adds	r4, #2
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008680 <_vfiprintf_r+0x25c>
 800859e:	7821      	ldrb	r1, [r4, #0]
 80085a0:	2203      	movs	r2, #3
 80085a2:	4650      	mov	r0, sl
 80085a4:	f7f7 fe1c 	bl	80001e0 <memchr>
 80085a8:	b140      	cbz	r0, 80085bc <_vfiprintf_r+0x198>
 80085aa:	2340      	movs	r3, #64	; 0x40
 80085ac:	eba0 000a 	sub.w	r0, r0, sl
 80085b0:	fa03 f000 	lsl.w	r0, r3, r0
 80085b4:	9b04      	ldr	r3, [sp, #16]
 80085b6:	4303      	orrs	r3, r0
 80085b8:	3401      	adds	r4, #1
 80085ba:	9304      	str	r3, [sp, #16]
 80085bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c0:	482c      	ldr	r0, [pc, #176]	; (8008674 <_vfiprintf_r+0x250>)
 80085c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085c6:	2206      	movs	r2, #6
 80085c8:	f7f7 fe0a 	bl	80001e0 <memchr>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d03f      	beq.n	8008650 <_vfiprintf_r+0x22c>
 80085d0:	4b29      	ldr	r3, [pc, #164]	; (8008678 <_vfiprintf_r+0x254>)
 80085d2:	bb1b      	cbnz	r3, 800861c <_vfiprintf_r+0x1f8>
 80085d4:	9b03      	ldr	r3, [sp, #12]
 80085d6:	3307      	adds	r3, #7
 80085d8:	f023 0307 	bic.w	r3, r3, #7
 80085dc:	3308      	adds	r3, #8
 80085de:	9303      	str	r3, [sp, #12]
 80085e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e2:	443b      	add	r3, r7
 80085e4:	9309      	str	r3, [sp, #36]	; 0x24
 80085e6:	e767      	b.n	80084b8 <_vfiprintf_r+0x94>
 80085e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ec:	460c      	mov	r4, r1
 80085ee:	2001      	movs	r0, #1
 80085f0:	e7a5      	b.n	800853e <_vfiprintf_r+0x11a>
 80085f2:	2300      	movs	r3, #0
 80085f4:	3401      	adds	r4, #1
 80085f6:	9305      	str	r3, [sp, #20]
 80085f8:	4619      	mov	r1, r3
 80085fa:	f04f 0c0a 	mov.w	ip, #10
 80085fe:	4620      	mov	r0, r4
 8008600:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008604:	3a30      	subs	r2, #48	; 0x30
 8008606:	2a09      	cmp	r2, #9
 8008608:	d903      	bls.n	8008612 <_vfiprintf_r+0x1ee>
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0c5      	beq.n	800859a <_vfiprintf_r+0x176>
 800860e:	9105      	str	r1, [sp, #20]
 8008610:	e7c3      	b.n	800859a <_vfiprintf_r+0x176>
 8008612:	fb0c 2101 	mla	r1, ip, r1, r2
 8008616:	4604      	mov	r4, r0
 8008618:	2301      	movs	r3, #1
 800861a:	e7f0      	b.n	80085fe <_vfiprintf_r+0x1da>
 800861c:	ab03      	add	r3, sp, #12
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	462a      	mov	r2, r5
 8008622:	4b16      	ldr	r3, [pc, #88]	; (800867c <_vfiprintf_r+0x258>)
 8008624:	a904      	add	r1, sp, #16
 8008626:	4630      	mov	r0, r6
 8008628:	f7fd ff9c 	bl	8006564 <_printf_float>
 800862c:	4607      	mov	r7, r0
 800862e:	1c78      	adds	r0, r7, #1
 8008630:	d1d6      	bne.n	80085e0 <_vfiprintf_r+0x1bc>
 8008632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008634:	07d9      	lsls	r1, r3, #31
 8008636:	d405      	bmi.n	8008644 <_vfiprintf_r+0x220>
 8008638:	89ab      	ldrh	r3, [r5, #12]
 800863a:	059a      	lsls	r2, r3, #22
 800863c:	d402      	bmi.n	8008644 <_vfiprintf_r+0x220>
 800863e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008640:	f000 faaf 	bl	8008ba2 <__retarget_lock_release_recursive>
 8008644:	89ab      	ldrh	r3, [r5, #12]
 8008646:	065b      	lsls	r3, r3, #25
 8008648:	f53f af12 	bmi.w	8008470 <_vfiprintf_r+0x4c>
 800864c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800864e:	e711      	b.n	8008474 <_vfiprintf_r+0x50>
 8008650:	ab03      	add	r3, sp, #12
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	462a      	mov	r2, r5
 8008656:	4b09      	ldr	r3, [pc, #36]	; (800867c <_vfiprintf_r+0x258>)
 8008658:	a904      	add	r1, sp, #16
 800865a:	4630      	mov	r0, r6
 800865c:	f7fe fa26 	bl	8006aac <_printf_i>
 8008660:	e7e4      	b.n	800862c <_vfiprintf_r+0x208>
 8008662:	bf00      	nop
 8008664:	0800924c 	.word	0x0800924c
 8008668:	0800926c 	.word	0x0800926c
 800866c:	0800922c 	.word	0x0800922c
 8008670:	0800911a 	.word	0x0800911a
 8008674:	08009124 	.word	0x08009124
 8008678:	08006565 	.word	0x08006565
 800867c:	080083ff 	.word	0x080083ff
 8008680:	08009120 	.word	0x08009120

08008684 <__swbuf_r>:
 8008684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008686:	460e      	mov	r6, r1
 8008688:	4614      	mov	r4, r2
 800868a:	4605      	mov	r5, r0
 800868c:	b118      	cbz	r0, 8008696 <__swbuf_r+0x12>
 800868e:	6983      	ldr	r3, [r0, #24]
 8008690:	b90b      	cbnz	r3, 8008696 <__swbuf_r+0x12>
 8008692:	f000 f9e7 	bl	8008a64 <__sinit>
 8008696:	4b21      	ldr	r3, [pc, #132]	; (800871c <__swbuf_r+0x98>)
 8008698:	429c      	cmp	r4, r3
 800869a:	d12b      	bne.n	80086f4 <__swbuf_r+0x70>
 800869c:	686c      	ldr	r4, [r5, #4]
 800869e:	69a3      	ldr	r3, [r4, #24]
 80086a0:	60a3      	str	r3, [r4, #8]
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	071a      	lsls	r2, r3, #28
 80086a6:	d52f      	bpl.n	8008708 <__swbuf_r+0x84>
 80086a8:	6923      	ldr	r3, [r4, #16]
 80086aa:	b36b      	cbz	r3, 8008708 <__swbuf_r+0x84>
 80086ac:	6923      	ldr	r3, [r4, #16]
 80086ae:	6820      	ldr	r0, [r4, #0]
 80086b0:	1ac0      	subs	r0, r0, r3
 80086b2:	6963      	ldr	r3, [r4, #20]
 80086b4:	b2f6      	uxtb	r6, r6
 80086b6:	4283      	cmp	r3, r0
 80086b8:	4637      	mov	r7, r6
 80086ba:	dc04      	bgt.n	80086c6 <__swbuf_r+0x42>
 80086bc:	4621      	mov	r1, r4
 80086be:	4628      	mov	r0, r5
 80086c0:	f000 f93c 	bl	800893c <_fflush_r>
 80086c4:	bb30      	cbnz	r0, 8008714 <__swbuf_r+0x90>
 80086c6:	68a3      	ldr	r3, [r4, #8]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	60a3      	str	r3, [r4, #8]
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	6022      	str	r2, [r4, #0]
 80086d2:	701e      	strb	r6, [r3, #0]
 80086d4:	6963      	ldr	r3, [r4, #20]
 80086d6:	3001      	adds	r0, #1
 80086d8:	4283      	cmp	r3, r0
 80086da:	d004      	beq.n	80086e6 <__swbuf_r+0x62>
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	07db      	lsls	r3, r3, #31
 80086e0:	d506      	bpl.n	80086f0 <__swbuf_r+0x6c>
 80086e2:	2e0a      	cmp	r6, #10
 80086e4:	d104      	bne.n	80086f0 <__swbuf_r+0x6c>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4628      	mov	r0, r5
 80086ea:	f000 f927 	bl	800893c <_fflush_r>
 80086ee:	b988      	cbnz	r0, 8008714 <__swbuf_r+0x90>
 80086f0:	4638      	mov	r0, r7
 80086f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <__swbuf_r+0x9c>)
 80086f6:	429c      	cmp	r4, r3
 80086f8:	d101      	bne.n	80086fe <__swbuf_r+0x7a>
 80086fa:	68ac      	ldr	r4, [r5, #8]
 80086fc:	e7cf      	b.n	800869e <__swbuf_r+0x1a>
 80086fe:	4b09      	ldr	r3, [pc, #36]	; (8008724 <__swbuf_r+0xa0>)
 8008700:	429c      	cmp	r4, r3
 8008702:	bf08      	it	eq
 8008704:	68ec      	ldreq	r4, [r5, #12]
 8008706:	e7ca      	b.n	800869e <__swbuf_r+0x1a>
 8008708:	4621      	mov	r1, r4
 800870a:	4628      	mov	r0, r5
 800870c:	f000 f81a 	bl	8008744 <__swsetup_r>
 8008710:	2800      	cmp	r0, #0
 8008712:	d0cb      	beq.n	80086ac <__swbuf_r+0x28>
 8008714:	f04f 37ff 	mov.w	r7, #4294967295
 8008718:	e7ea      	b.n	80086f0 <__swbuf_r+0x6c>
 800871a:	bf00      	nop
 800871c:	0800924c 	.word	0x0800924c
 8008720:	0800926c 	.word	0x0800926c
 8008724:	0800922c 	.word	0x0800922c

08008728 <__ascii_wctomb>:
 8008728:	b149      	cbz	r1, 800873e <__ascii_wctomb+0x16>
 800872a:	2aff      	cmp	r2, #255	; 0xff
 800872c:	bf85      	ittet	hi
 800872e:	238a      	movhi	r3, #138	; 0x8a
 8008730:	6003      	strhi	r3, [r0, #0]
 8008732:	700a      	strbls	r2, [r1, #0]
 8008734:	f04f 30ff 	movhi.w	r0, #4294967295
 8008738:	bf98      	it	ls
 800873a:	2001      	movls	r0, #1
 800873c:	4770      	bx	lr
 800873e:	4608      	mov	r0, r1
 8008740:	4770      	bx	lr
	...

08008744 <__swsetup_r>:
 8008744:	4b32      	ldr	r3, [pc, #200]	; (8008810 <__swsetup_r+0xcc>)
 8008746:	b570      	push	{r4, r5, r6, lr}
 8008748:	681d      	ldr	r5, [r3, #0]
 800874a:	4606      	mov	r6, r0
 800874c:	460c      	mov	r4, r1
 800874e:	b125      	cbz	r5, 800875a <__swsetup_r+0x16>
 8008750:	69ab      	ldr	r3, [r5, #24]
 8008752:	b913      	cbnz	r3, 800875a <__swsetup_r+0x16>
 8008754:	4628      	mov	r0, r5
 8008756:	f000 f985 	bl	8008a64 <__sinit>
 800875a:	4b2e      	ldr	r3, [pc, #184]	; (8008814 <__swsetup_r+0xd0>)
 800875c:	429c      	cmp	r4, r3
 800875e:	d10f      	bne.n	8008780 <__swsetup_r+0x3c>
 8008760:	686c      	ldr	r4, [r5, #4]
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008768:	0719      	lsls	r1, r3, #28
 800876a:	d42c      	bmi.n	80087c6 <__swsetup_r+0x82>
 800876c:	06dd      	lsls	r5, r3, #27
 800876e:	d411      	bmi.n	8008794 <__swsetup_r+0x50>
 8008770:	2309      	movs	r3, #9
 8008772:	6033      	str	r3, [r6, #0]
 8008774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008778:	81a3      	strh	r3, [r4, #12]
 800877a:	f04f 30ff 	mov.w	r0, #4294967295
 800877e:	e03e      	b.n	80087fe <__swsetup_r+0xba>
 8008780:	4b25      	ldr	r3, [pc, #148]	; (8008818 <__swsetup_r+0xd4>)
 8008782:	429c      	cmp	r4, r3
 8008784:	d101      	bne.n	800878a <__swsetup_r+0x46>
 8008786:	68ac      	ldr	r4, [r5, #8]
 8008788:	e7eb      	b.n	8008762 <__swsetup_r+0x1e>
 800878a:	4b24      	ldr	r3, [pc, #144]	; (800881c <__swsetup_r+0xd8>)
 800878c:	429c      	cmp	r4, r3
 800878e:	bf08      	it	eq
 8008790:	68ec      	ldreq	r4, [r5, #12]
 8008792:	e7e6      	b.n	8008762 <__swsetup_r+0x1e>
 8008794:	0758      	lsls	r0, r3, #29
 8008796:	d512      	bpl.n	80087be <__swsetup_r+0x7a>
 8008798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800879a:	b141      	cbz	r1, 80087ae <__swsetup_r+0x6a>
 800879c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087a0:	4299      	cmp	r1, r3
 80087a2:	d002      	beq.n	80087aa <__swsetup_r+0x66>
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7ff fcd5 	bl	8008154 <_free_r>
 80087aa:	2300      	movs	r3, #0
 80087ac:	6363      	str	r3, [r4, #52]	; 0x34
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087b4:	81a3      	strh	r3, [r4, #12]
 80087b6:	2300      	movs	r3, #0
 80087b8:	6063      	str	r3, [r4, #4]
 80087ba:	6923      	ldr	r3, [r4, #16]
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	f043 0308 	orr.w	r3, r3, #8
 80087c4:	81a3      	strh	r3, [r4, #12]
 80087c6:	6923      	ldr	r3, [r4, #16]
 80087c8:	b94b      	cbnz	r3, 80087de <__swsetup_r+0x9a>
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d4:	d003      	beq.n	80087de <__swsetup_r+0x9a>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4630      	mov	r0, r6
 80087da:	f000 fa09 	bl	8008bf0 <__smakebuf_r>
 80087de:	89a0      	ldrh	r0, [r4, #12]
 80087e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087e4:	f010 0301 	ands.w	r3, r0, #1
 80087e8:	d00a      	beq.n	8008800 <__swsetup_r+0xbc>
 80087ea:	2300      	movs	r3, #0
 80087ec:	60a3      	str	r3, [r4, #8]
 80087ee:	6963      	ldr	r3, [r4, #20]
 80087f0:	425b      	negs	r3, r3
 80087f2:	61a3      	str	r3, [r4, #24]
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	b943      	cbnz	r3, 800880a <__swsetup_r+0xc6>
 80087f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087fc:	d1ba      	bne.n	8008774 <__swsetup_r+0x30>
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	0781      	lsls	r1, r0, #30
 8008802:	bf58      	it	pl
 8008804:	6963      	ldrpl	r3, [r4, #20]
 8008806:	60a3      	str	r3, [r4, #8]
 8008808:	e7f4      	b.n	80087f4 <__swsetup_r+0xb0>
 800880a:	2000      	movs	r0, #0
 800880c:	e7f7      	b.n	80087fe <__swsetup_r+0xba>
 800880e:	bf00      	nop
 8008810:	2000000c 	.word	0x2000000c
 8008814:	0800924c 	.word	0x0800924c
 8008818:	0800926c 	.word	0x0800926c
 800881c:	0800922c 	.word	0x0800922c

08008820 <abort>:
 8008820:	b508      	push	{r3, lr}
 8008822:	2006      	movs	r0, #6
 8008824:	f000 fa4c 	bl	8008cc0 <raise>
 8008828:	2001      	movs	r0, #1
 800882a:	f7f8 fee5 	bl	80015f8 <_exit>
	...

08008830 <__sflush_r>:
 8008830:	898a      	ldrh	r2, [r1, #12]
 8008832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008836:	4605      	mov	r5, r0
 8008838:	0710      	lsls	r0, r2, #28
 800883a:	460c      	mov	r4, r1
 800883c:	d458      	bmi.n	80088f0 <__sflush_r+0xc0>
 800883e:	684b      	ldr	r3, [r1, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	dc05      	bgt.n	8008850 <__sflush_r+0x20>
 8008844:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	dc02      	bgt.n	8008850 <__sflush_r+0x20>
 800884a:	2000      	movs	r0, #0
 800884c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008852:	2e00      	cmp	r6, #0
 8008854:	d0f9      	beq.n	800884a <__sflush_r+0x1a>
 8008856:	2300      	movs	r3, #0
 8008858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800885c:	682f      	ldr	r7, [r5, #0]
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	d032      	beq.n	80088c8 <__sflush_r+0x98>
 8008862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	075a      	lsls	r2, r3, #29
 8008868:	d505      	bpl.n	8008876 <__sflush_r+0x46>
 800886a:	6863      	ldr	r3, [r4, #4]
 800886c:	1ac0      	subs	r0, r0, r3
 800886e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008870:	b10b      	cbz	r3, 8008876 <__sflush_r+0x46>
 8008872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008874:	1ac0      	subs	r0, r0, r3
 8008876:	2300      	movs	r3, #0
 8008878:	4602      	mov	r2, r0
 800887a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800887c:	6a21      	ldr	r1, [r4, #32]
 800887e:	4628      	mov	r0, r5
 8008880:	47b0      	blx	r6
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	d106      	bne.n	8008896 <__sflush_r+0x66>
 8008888:	6829      	ldr	r1, [r5, #0]
 800888a:	291d      	cmp	r1, #29
 800888c:	d82c      	bhi.n	80088e8 <__sflush_r+0xb8>
 800888e:	4a2a      	ldr	r2, [pc, #168]	; (8008938 <__sflush_r+0x108>)
 8008890:	40ca      	lsrs	r2, r1
 8008892:	07d6      	lsls	r6, r2, #31
 8008894:	d528      	bpl.n	80088e8 <__sflush_r+0xb8>
 8008896:	2200      	movs	r2, #0
 8008898:	6062      	str	r2, [r4, #4]
 800889a:	04d9      	lsls	r1, r3, #19
 800889c:	6922      	ldr	r2, [r4, #16]
 800889e:	6022      	str	r2, [r4, #0]
 80088a0:	d504      	bpl.n	80088ac <__sflush_r+0x7c>
 80088a2:	1c42      	adds	r2, r0, #1
 80088a4:	d101      	bne.n	80088aa <__sflush_r+0x7a>
 80088a6:	682b      	ldr	r3, [r5, #0]
 80088a8:	b903      	cbnz	r3, 80088ac <__sflush_r+0x7c>
 80088aa:	6560      	str	r0, [r4, #84]	; 0x54
 80088ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ae:	602f      	str	r7, [r5, #0]
 80088b0:	2900      	cmp	r1, #0
 80088b2:	d0ca      	beq.n	800884a <__sflush_r+0x1a>
 80088b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088b8:	4299      	cmp	r1, r3
 80088ba:	d002      	beq.n	80088c2 <__sflush_r+0x92>
 80088bc:	4628      	mov	r0, r5
 80088be:	f7ff fc49 	bl	8008154 <_free_r>
 80088c2:	2000      	movs	r0, #0
 80088c4:	6360      	str	r0, [r4, #52]	; 0x34
 80088c6:	e7c1      	b.n	800884c <__sflush_r+0x1c>
 80088c8:	6a21      	ldr	r1, [r4, #32]
 80088ca:	2301      	movs	r3, #1
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b0      	blx	r6
 80088d0:	1c41      	adds	r1, r0, #1
 80088d2:	d1c7      	bne.n	8008864 <__sflush_r+0x34>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0c4      	beq.n	8008864 <__sflush_r+0x34>
 80088da:	2b1d      	cmp	r3, #29
 80088dc:	d001      	beq.n	80088e2 <__sflush_r+0xb2>
 80088de:	2b16      	cmp	r3, #22
 80088e0:	d101      	bne.n	80088e6 <__sflush_r+0xb6>
 80088e2:	602f      	str	r7, [r5, #0]
 80088e4:	e7b1      	b.n	800884a <__sflush_r+0x1a>
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	e7ad      	b.n	800884c <__sflush_r+0x1c>
 80088f0:	690f      	ldr	r7, [r1, #16]
 80088f2:	2f00      	cmp	r7, #0
 80088f4:	d0a9      	beq.n	800884a <__sflush_r+0x1a>
 80088f6:	0793      	lsls	r3, r2, #30
 80088f8:	680e      	ldr	r6, [r1, #0]
 80088fa:	bf08      	it	eq
 80088fc:	694b      	ldreq	r3, [r1, #20]
 80088fe:	600f      	str	r7, [r1, #0]
 8008900:	bf18      	it	ne
 8008902:	2300      	movne	r3, #0
 8008904:	eba6 0807 	sub.w	r8, r6, r7
 8008908:	608b      	str	r3, [r1, #8]
 800890a:	f1b8 0f00 	cmp.w	r8, #0
 800890e:	dd9c      	ble.n	800884a <__sflush_r+0x1a>
 8008910:	6a21      	ldr	r1, [r4, #32]
 8008912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008914:	4643      	mov	r3, r8
 8008916:	463a      	mov	r2, r7
 8008918:	4628      	mov	r0, r5
 800891a:	47b0      	blx	r6
 800891c:	2800      	cmp	r0, #0
 800891e:	dc06      	bgt.n	800892e <__sflush_r+0xfe>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	f04f 30ff 	mov.w	r0, #4294967295
 800892c:	e78e      	b.n	800884c <__sflush_r+0x1c>
 800892e:	4407      	add	r7, r0
 8008930:	eba8 0800 	sub.w	r8, r8, r0
 8008934:	e7e9      	b.n	800890a <__sflush_r+0xda>
 8008936:	bf00      	nop
 8008938:	20400001 	.word	0x20400001

0800893c <_fflush_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	690b      	ldr	r3, [r1, #16]
 8008940:	4605      	mov	r5, r0
 8008942:	460c      	mov	r4, r1
 8008944:	b913      	cbnz	r3, 800894c <_fflush_r+0x10>
 8008946:	2500      	movs	r5, #0
 8008948:	4628      	mov	r0, r5
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	b118      	cbz	r0, 8008956 <_fflush_r+0x1a>
 800894e:	6983      	ldr	r3, [r0, #24]
 8008950:	b90b      	cbnz	r3, 8008956 <_fflush_r+0x1a>
 8008952:	f000 f887 	bl	8008a64 <__sinit>
 8008956:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <_fflush_r+0x6c>)
 8008958:	429c      	cmp	r4, r3
 800895a:	d11b      	bne.n	8008994 <_fflush_r+0x58>
 800895c:	686c      	ldr	r4, [r5, #4]
 800895e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0ef      	beq.n	8008946 <_fflush_r+0xa>
 8008966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008968:	07d0      	lsls	r0, r2, #31
 800896a:	d404      	bmi.n	8008976 <_fflush_r+0x3a>
 800896c:	0599      	lsls	r1, r3, #22
 800896e:	d402      	bmi.n	8008976 <_fflush_r+0x3a>
 8008970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008972:	f000 f915 	bl	8008ba0 <__retarget_lock_acquire_recursive>
 8008976:	4628      	mov	r0, r5
 8008978:	4621      	mov	r1, r4
 800897a:	f7ff ff59 	bl	8008830 <__sflush_r>
 800897e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008980:	07da      	lsls	r2, r3, #31
 8008982:	4605      	mov	r5, r0
 8008984:	d4e0      	bmi.n	8008948 <_fflush_r+0xc>
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	059b      	lsls	r3, r3, #22
 800898a:	d4dd      	bmi.n	8008948 <_fflush_r+0xc>
 800898c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800898e:	f000 f908 	bl	8008ba2 <__retarget_lock_release_recursive>
 8008992:	e7d9      	b.n	8008948 <_fflush_r+0xc>
 8008994:	4b05      	ldr	r3, [pc, #20]	; (80089ac <_fflush_r+0x70>)
 8008996:	429c      	cmp	r4, r3
 8008998:	d101      	bne.n	800899e <_fflush_r+0x62>
 800899a:	68ac      	ldr	r4, [r5, #8]
 800899c:	e7df      	b.n	800895e <_fflush_r+0x22>
 800899e:	4b04      	ldr	r3, [pc, #16]	; (80089b0 <_fflush_r+0x74>)
 80089a0:	429c      	cmp	r4, r3
 80089a2:	bf08      	it	eq
 80089a4:	68ec      	ldreq	r4, [r5, #12]
 80089a6:	e7da      	b.n	800895e <_fflush_r+0x22>
 80089a8:	0800924c 	.word	0x0800924c
 80089ac:	0800926c 	.word	0x0800926c
 80089b0:	0800922c 	.word	0x0800922c

080089b4 <std>:
 80089b4:	2300      	movs	r3, #0
 80089b6:	b510      	push	{r4, lr}
 80089b8:	4604      	mov	r4, r0
 80089ba:	e9c0 3300 	strd	r3, r3, [r0]
 80089be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089c2:	6083      	str	r3, [r0, #8]
 80089c4:	8181      	strh	r1, [r0, #12]
 80089c6:	6643      	str	r3, [r0, #100]	; 0x64
 80089c8:	81c2      	strh	r2, [r0, #14]
 80089ca:	6183      	str	r3, [r0, #24]
 80089cc:	4619      	mov	r1, r3
 80089ce:	2208      	movs	r2, #8
 80089d0:	305c      	adds	r0, #92	; 0x5c
 80089d2:	f7fd fd1f 	bl	8006414 <memset>
 80089d6:	4b05      	ldr	r3, [pc, #20]	; (80089ec <std+0x38>)
 80089d8:	6263      	str	r3, [r4, #36]	; 0x24
 80089da:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <std+0x3c>)
 80089dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80089de:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <std+0x40>)
 80089e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089e2:	4b05      	ldr	r3, [pc, #20]	; (80089f8 <std+0x44>)
 80089e4:	6224      	str	r4, [r4, #32]
 80089e6:	6323      	str	r3, [r4, #48]	; 0x30
 80089e8:	bd10      	pop	{r4, pc}
 80089ea:	bf00      	nop
 80089ec:	08008cf9 	.word	0x08008cf9
 80089f0:	08008d1b 	.word	0x08008d1b
 80089f4:	08008d53 	.word	0x08008d53
 80089f8:	08008d77 	.word	0x08008d77

080089fc <_cleanup_r>:
 80089fc:	4901      	ldr	r1, [pc, #4]	; (8008a04 <_cleanup_r+0x8>)
 80089fe:	f000 b8af 	b.w	8008b60 <_fwalk_reent>
 8008a02:	bf00      	nop
 8008a04:	0800893d 	.word	0x0800893d

08008a08 <__sfmoreglue>:
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	2268      	movs	r2, #104	; 0x68
 8008a0c:	1e4d      	subs	r5, r1, #1
 8008a0e:	4355      	muls	r5, r2
 8008a10:	460e      	mov	r6, r1
 8008a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a16:	f7ff fc09 	bl	800822c <_malloc_r>
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	b140      	cbz	r0, 8008a30 <__sfmoreglue+0x28>
 8008a1e:	2100      	movs	r1, #0
 8008a20:	e9c0 1600 	strd	r1, r6, [r0]
 8008a24:	300c      	adds	r0, #12
 8008a26:	60a0      	str	r0, [r4, #8]
 8008a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a2c:	f7fd fcf2 	bl	8006414 <memset>
 8008a30:	4620      	mov	r0, r4
 8008a32:	bd70      	pop	{r4, r5, r6, pc}

08008a34 <__sfp_lock_acquire>:
 8008a34:	4801      	ldr	r0, [pc, #4]	; (8008a3c <__sfp_lock_acquire+0x8>)
 8008a36:	f000 b8b3 	b.w	8008ba0 <__retarget_lock_acquire_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	2000048d 	.word	0x2000048d

08008a40 <__sfp_lock_release>:
 8008a40:	4801      	ldr	r0, [pc, #4]	; (8008a48 <__sfp_lock_release+0x8>)
 8008a42:	f000 b8ae 	b.w	8008ba2 <__retarget_lock_release_recursive>
 8008a46:	bf00      	nop
 8008a48:	2000048d 	.word	0x2000048d

08008a4c <__sinit_lock_acquire>:
 8008a4c:	4801      	ldr	r0, [pc, #4]	; (8008a54 <__sinit_lock_acquire+0x8>)
 8008a4e:	f000 b8a7 	b.w	8008ba0 <__retarget_lock_acquire_recursive>
 8008a52:	bf00      	nop
 8008a54:	2000048e 	.word	0x2000048e

08008a58 <__sinit_lock_release>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__sinit_lock_release+0x8>)
 8008a5a:	f000 b8a2 	b.w	8008ba2 <__retarget_lock_release_recursive>
 8008a5e:	bf00      	nop
 8008a60:	2000048e 	.word	0x2000048e

08008a64 <__sinit>:
 8008a64:	b510      	push	{r4, lr}
 8008a66:	4604      	mov	r4, r0
 8008a68:	f7ff fff0 	bl	8008a4c <__sinit_lock_acquire>
 8008a6c:	69a3      	ldr	r3, [r4, #24]
 8008a6e:	b11b      	cbz	r3, 8008a78 <__sinit+0x14>
 8008a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a74:	f7ff bff0 	b.w	8008a58 <__sinit_lock_release>
 8008a78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a7c:	6523      	str	r3, [r4, #80]	; 0x50
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <__sinit+0x68>)
 8008a80:	4a13      	ldr	r2, [pc, #76]	; (8008ad0 <__sinit+0x6c>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a86:	42a3      	cmp	r3, r4
 8008a88:	bf04      	itt	eq
 8008a8a:	2301      	moveq	r3, #1
 8008a8c:	61a3      	streq	r3, [r4, #24]
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 f820 	bl	8008ad4 <__sfp>
 8008a94:	6060      	str	r0, [r4, #4]
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 f81c 	bl	8008ad4 <__sfp>
 8008a9c:	60a0      	str	r0, [r4, #8]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f818 	bl	8008ad4 <__sfp>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	60e0      	str	r0, [r4, #12]
 8008aa8:	2104      	movs	r1, #4
 8008aaa:	6860      	ldr	r0, [r4, #4]
 8008aac:	f7ff ff82 	bl	80089b4 <std>
 8008ab0:	68a0      	ldr	r0, [r4, #8]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	2109      	movs	r1, #9
 8008ab6:	f7ff ff7d 	bl	80089b4 <std>
 8008aba:	68e0      	ldr	r0, [r4, #12]
 8008abc:	2202      	movs	r2, #2
 8008abe:	2112      	movs	r1, #18
 8008ac0:	f7ff ff78 	bl	80089b4 <std>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	61a3      	str	r3, [r4, #24]
 8008ac8:	e7d2      	b.n	8008a70 <__sinit+0xc>
 8008aca:	bf00      	nop
 8008acc:	08008eb0 	.word	0x08008eb0
 8008ad0:	080089fd 	.word	0x080089fd

08008ad4 <__sfp>:
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	f7ff ffac 	bl	8008a34 <__sfp_lock_acquire>
 8008adc:	4b1e      	ldr	r3, [pc, #120]	; (8008b58 <__sfp+0x84>)
 8008ade:	681e      	ldr	r6, [r3, #0]
 8008ae0:	69b3      	ldr	r3, [r6, #24]
 8008ae2:	b913      	cbnz	r3, 8008aea <__sfp+0x16>
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	f7ff ffbd 	bl	8008a64 <__sinit>
 8008aea:	3648      	adds	r6, #72	; 0x48
 8008aec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	d503      	bpl.n	8008afc <__sfp+0x28>
 8008af4:	6833      	ldr	r3, [r6, #0]
 8008af6:	b30b      	cbz	r3, 8008b3c <__sfp+0x68>
 8008af8:	6836      	ldr	r6, [r6, #0]
 8008afa:	e7f7      	b.n	8008aec <__sfp+0x18>
 8008afc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b00:	b9d5      	cbnz	r5, 8008b38 <__sfp+0x64>
 8008b02:	4b16      	ldr	r3, [pc, #88]	; (8008b5c <__sfp+0x88>)
 8008b04:	60e3      	str	r3, [r4, #12]
 8008b06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b0a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b0c:	f000 f847 	bl	8008b9e <__retarget_lock_init_recursive>
 8008b10:	f7ff ff96 	bl	8008a40 <__sfp_lock_release>
 8008b14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b1c:	6025      	str	r5, [r4, #0]
 8008b1e:	61a5      	str	r5, [r4, #24]
 8008b20:	2208      	movs	r2, #8
 8008b22:	4629      	mov	r1, r5
 8008b24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b28:	f7fd fc74 	bl	8006414 <memset>
 8008b2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b34:	4620      	mov	r0, r4
 8008b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b38:	3468      	adds	r4, #104	; 0x68
 8008b3a:	e7d9      	b.n	8008af0 <__sfp+0x1c>
 8008b3c:	2104      	movs	r1, #4
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f7ff ff62 	bl	8008a08 <__sfmoreglue>
 8008b44:	4604      	mov	r4, r0
 8008b46:	6030      	str	r0, [r6, #0]
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d1d5      	bne.n	8008af8 <__sfp+0x24>
 8008b4c:	f7ff ff78 	bl	8008a40 <__sfp_lock_release>
 8008b50:	230c      	movs	r3, #12
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	e7ee      	b.n	8008b34 <__sfp+0x60>
 8008b56:	bf00      	nop
 8008b58:	08008eb0 	.word	0x08008eb0
 8008b5c:	ffff0001 	.word	0xffff0001

08008b60 <_fwalk_reent>:
 8008b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b64:	4606      	mov	r6, r0
 8008b66:	4688      	mov	r8, r1
 8008b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b6c:	2700      	movs	r7, #0
 8008b6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b72:	f1b9 0901 	subs.w	r9, r9, #1
 8008b76:	d505      	bpl.n	8008b84 <_fwalk_reent+0x24>
 8008b78:	6824      	ldr	r4, [r4, #0]
 8008b7a:	2c00      	cmp	r4, #0
 8008b7c:	d1f7      	bne.n	8008b6e <_fwalk_reent+0xe>
 8008b7e:	4638      	mov	r0, r7
 8008b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b84:	89ab      	ldrh	r3, [r5, #12]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d907      	bls.n	8008b9a <_fwalk_reent+0x3a>
 8008b8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	d003      	beq.n	8008b9a <_fwalk_reent+0x3a>
 8008b92:	4629      	mov	r1, r5
 8008b94:	4630      	mov	r0, r6
 8008b96:	47c0      	blx	r8
 8008b98:	4307      	orrs	r7, r0
 8008b9a:	3568      	adds	r5, #104	; 0x68
 8008b9c:	e7e9      	b.n	8008b72 <_fwalk_reent+0x12>

08008b9e <__retarget_lock_init_recursive>:
 8008b9e:	4770      	bx	lr

08008ba0 <__retarget_lock_acquire_recursive>:
 8008ba0:	4770      	bx	lr

08008ba2 <__retarget_lock_release_recursive>:
 8008ba2:	4770      	bx	lr

08008ba4 <__swhatbuf_r>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	460e      	mov	r6, r1
 8008ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bac:	2900      	cmp	r1, #0
 8008bae:	b096      	sub	sp, #88	; 0x58
 8008bb0:	4614      	mov	r4, r2
 8008bb2:	461d      	mov	r5, r3
 8008bb4:	da08      	bge.n	8008bc8 <__swhatbuf_r+0x24>
 8008bb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	061a      	lsls	r2, r3, #24
 8008bc0:	d410      	bmi.n	8008be4 <__swhatbuf_r+0x40>
 8008bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bc6:	e00e      	b.n	8008be6 <__swhatbuf_r+0x42>
 8008bc8:	466a      	mov	r2, sp
 8008bca:	f000 f8fb 	bl	8008dc4 <_fstat_r>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	dbf1      	blt.n	8008bb6 <__swhatbuf_r+0x12>
 8008bd2:	9a01      	ldr	r2, [sp, #4]
 8008bd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bdc:	425a      	negs	r2, r3
 8008bde:	415a      	adcs	r2, r3
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	e7ee      	b.n	8008bc2 <__swhatbuf_r+0x1e>
 8008be4:	2340      	movs	r3, #64	; 0x40
 8008be6:	2000      	movs	r0, #0
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	b016      	add	sp, #88	; 0x58
 8008bec:	bd70      	pop	{r4, r5, r6, pc}
	...

08008bf0 <__smakebuf_r>:
 8008bf0:	898b      	ldrh	r3, [r1, #12]
 8008bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bf4:	079d      	lsls	r5, r3, #30
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	d507      	bpl.n	8008c0c <__smakebuf_r+0x1c>
 8008bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	6123      	str	r3, [r4, #16]
 8008c04:	2301      	movs	r3, #1
 8008c06:	6163      	str	r3, [r4, #20]
 8008c08:	b002      	add	sp, #8
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}
 8008c0c:	ab01      	add	r3, sp, #4
 8008c0e:	466a      	mov	r2, sp
 8008c10:	f7ff ffc8 	bl	8008ba4 <__swhatbuf_r>
 8008c14:	9900      	ldr	r1, [sp, #0]
 8008c16:	4605      	mov	r5, r0
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7ff fb07 	bl	800822c <_malloc_r>
 8008c1e:	b948      	cbnz	r0, 8008c34 <__smakebuf_r+0x44>
 8008c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c24:	059a      	lsls	r2, r3, #22
 8008c26:	d4ef      	bmi.n	8008c08 <__smakebuf_r+0x18>
 8008c28:	f023 0303 	bic.w	r3, r3, #3
 8008c2c:	f043 0302 	orr.w	r3, r3, #2
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	e7e3      	b.n	8008bfc <__smakebuf_r+0xc>
 8008c34:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <__smakebuf_r+0x7c>)
 8008c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	6020      	str	r0, [r4, #0]
 8008c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c40:	81a3      	strh	r3, [r4, #12]
 8008c42:	9b00      	ldr	r3, [sp, #0]
 8008c44:	6163      	str	r3, [r4, #20]
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	6120      	str	r0, [r4, #16]
 8008c4a:	b15b      	cbz	r3, 8008c64 <__smakebuf_r+0x74>
 8008c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c50:	4630      	mov	r0, r6
 8008c52:	f000 f8c9 	bl	8008de8 <_isatty_r>
 8008c56:	b128      	cbz	r0, 8008c64 <__smakebuf_r+0x74>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f023 0303 	bic.w	r3, r3, #3
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	89a0      	ldrh	r0, [r4, #12]
 8008c66:	4305      	orrs	r5, r0
 8008c68:	81a5      	strh	r5, [r4, #12]
 8008c6a:	e7cd      	b.n	8008c08 <__smakebuf_r+0x18>
 8008c6c:	080089fd 	.word	0x080089fd

08008c70 <_raise_r>:
 8008c70:	291f      	cmp	r1, #31
 8008c72:	b538      	push	{r3, r4, r5, lr}
 8008c74:	4604      	mov	r4, r0
 8008c76:	460d      	mov	r5, r1
 8008c78:	d904      	bls.n	8008c84 <_raise_r+0x14>
 8008c7a:	2316      	movs	r3, #22
 8008c7c:	6003      	str	r3, [r0, #0]
 8008c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c86:	b112      	cbz	r2, 8008c8e <_raise_r+0x1e>
 8008c88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c8c:	b94b      	cbnz	r3, 8008ca2 <_raise_r+0x32>
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f000 f830 	bl	8008cf4 <_getpid_r>
 8008c94:	462a      	mov	r2, r5
 8008c96:	4601      	mov	r1, r0
 8008c98:	4620      	mov	r0, r4
 8008c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c9e:	f000 b817 	b.w	8008cd0 <_kill_r>
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d00a      	beq.n	8008cbc <_raise_r+0x4c>
 8008ca6:	1c59      	adds	r1, r3, #1
 8008ca8:	d103      	bne.n	8008cb2 <_raise_r+0x42>
 8008caa:	2316      	movs	r3, #22
 8008cac:	6003      	str	r3, [r0, #0]
 8008cae:	2001      	movs	r0, #1
 8008cb0:	e7e7      	b.n	8008c82 <_raise_r+0x12>
 8008cb2:	2400      	movs	r4, #0
 8008cb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cb8:	4628      	mov	r0, r5
 8008cba:	4798      	blx	r3
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e7e0      	b.n	8008c82 <_raise_r+0x12>

08008cc0 <raise>:
 8008cc0:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <raise+0xc>)
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	f7ff bfd3 	b.w	8008c70 <_raise_r>
 8008cca:	bf00      	nop
 8008ccc:	2000000c 	.word	0x2000000c

08008cd0 <_kill_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4d07      	ldr	r5, [pc, #28]	; (8008cf0 <_kill_r+0x20>)
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	4608      	mov	r0, r1
 8008cda:	4611      	mov	r1, r2
 8008cdc:	602b      	str	r3, [r5, #0]
 8008cde:	f7f8 fc7b 	bl	80015d8 <_kill>
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	d102      	bne.n	8008cec <_kill_r+0x1c>
 8008ce6:	682b      	ldr	r3, [r5, #0]
 8008ce8:	b103      	cbz	r3, 8008cec <_kill_r+0x1c>
 8008cea:	6023      	str	r3, [r4, #0]
 8008cec:	bd38      	pop	{r3, r4, r5, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000488 	.word	0x20000488

08008cf4 <_getpid_r>:
 8008cf4:	f7f8 bc68 	b.w	80015c8 <_getpid>

08008cf8 <__sread>:
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d00:	f000 f894 	bl	8008e2c <_read_r>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	bfab      	itete	ge
 8008d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d0c:	181b      	addge	r3, r3, r0
 8008d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d12:	bfac      	ite	ge
 8008d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d16:	81a3      	strhlt	r3, [r4, #12]
 8008d18:	bd10      	pop	{r4, pc}

08008d1a <__swrite>:
 8008d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1e:	461f      	mov	r7, r3
 8008d20:	898b      	ldrh	r3, [r1, #12]
 8008d22:	05db      	lsls	r3, r3, #23
 8008d24:	4605      	mov	r5, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	4616      	mov	r6, r2
 8008d2a:	d505      	bpl.n	8008d38 <__swrite+0x1e>
 8008d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d30:	2302      	movs	r3, #2
 8008d32:	2200      	movs	r2, #0
 8008d34:	f000 f868 	bl	8008e08 <_lseek_r>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	4632      	mov	r2, r6
 8008d46:	463b      	mov	r3, r7
 8008d48:	4628      	mov	r0, r5
 8008d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4e:	f000 b817 	b.w	8008d80 <_write_r>

08008d52 <__sseek>:
 8008d52:	b510      	push	{r4, lr}
 8008d54:	460c      	mov	r4, r1
 8008d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5a:	f000 f855 	bl	8008e08 <_lseek_r>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	bf15      	itete	ne
 8008d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d6e:	81a3      	strheq	r3, [r4, #12]
 8008d70:	bf18      	it	ne
 8008d72:	81a3      	strhne	r3, [r4, #12]
 8008d74:	bd10      	pop	{r4, pc}

08008d76 <__sclose>:
 8008d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7a:	f000 b813 	b.w	8008da4 <_close_r>
	...

08008d80 <_write_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d07      	ldr	r5, [pc, #28]	; (8008da0 <_write_r+0x20>)
 8008d84:	4604      	mov	r4, r0
 8008d86:	4608      	mov	r0, r1
 8008d88:	4611      	mov	r1, r2
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	602a      	str	r2, [r5, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f7f8 fc59 	bl	8001646 <_write>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <_write_r+0x1e>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	b103      	cbz	r3, 8008d9e <_write_r+0x1e>
 8008d9c:	6023      	str	r3, [r4, #0]
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
 8008da0:	20000488 	.word	0x20000488

08008da4 <_close_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d06      	ldr	r5, [pc, #24]	; (8008dc0 <_close_r+0x1c>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	f7f8 fc65 	bl	800167e <_close>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_close_r+0x1a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_close_r+0x1a>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	20000488 	.word	0x20000488

08008dc4 <_fstat_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d07      	ldr	r5, [pc, #28]	; (8008de4 <_fstat_r+0x20>)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	4611      	mov	r1, r2
 8008dd0:	602b      	str	r3, [r5, #0]
 8008dd2:	f7f8 fc60 	bl	8001696 <_fstat>
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	d102      	bne.n	8008de0 <_fstat_r+0x1c>
 8008dda:	682b      	ldr	r3, [r5, #0]
 8008ddc:	b103      	cbz	r3, 8008de0 <_fstat_r+0x1c>
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	bd38      	pop	{r3, r4, r5, pc}
 8008de2:	bf00      	nop
 8008de4:	20000488 	.word	0x20000488

08008de8 <_isatty_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4d06      	ldr	r5, [pc, #24]	; (8008e04 <_isatty_r+0x1c>)
 8008dec:	2300      	movs	r3, #0
 8008dee:	4604      	mov	r4, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	602b      	str	r3, [r5, #0]
 8008df4:	f7f8 fc5f 	bl	80016b6 <_isatty>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_isatty_r+0x1a>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_isatty_r+0x1a>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	20000488 	.word	0x20000488

08008e08 <_lseek_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d07      	ldr	r5, [pc, #28]	; (8008e28 <_lseek_r+0x20>)
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	4608      	mov	r0, r1
 8008e10:	4611      	mov	r1, r2
 8008e12:	2200      	movs	r2, #0
 8008e14:	602a      	str	r2, [r5, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	f7f8 fc58 	bl	80016cc <_lseek>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d102      	bne.n	8008e26 <_lseek_r+0x1e>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	b103      	cbz	r3, 8008e26 <_lseek_r+0x1e>
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	20000488 	.word	0x20000488

08008e2c <_read_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d07      	ldr	r5, [pc, #28]	; (8008e4c <_read_r+0x20>)
 8008e30:	4604      	mov	r4, r0
 8008e32:	4608      	mov	r0, r1
 8008e34:	4611      	mov	r1, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	602a      	str	r2, [r5, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f7f8 fbe6 	bl	800160c <_read>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_read_r+0x1e>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_read_r+0x1e>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20000488 	.word	0x20000488

08008e50 <_init>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr

08008e5c <_fini>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr
